--textdomain wesnoth-lib
----
---- Definition of a single line text box.
----

_GUI_DRAW_BACKGROUND = (COLOR) -> {
    rectangle: {
        x: 0
        y: 0
        w: "(width)"
        h: "(height)"

        fill_color: COLOR

    }
}

_GUI_TEXTBOX_BACKGROUND_ENABLED = () -> {
    <_GUI_DRAW_BACKGROUND(GUI__BACKGROUND_COLOR_ENABLED!)
}

_GUI_TEXTBOX_BACKGROUND_DISABLED = () -> {
    <_GUI_DRAW_BACKGROUND(GUI__BACKGROUND_COLOR_DISABLED!)
}

_GUI_DRAW_BORDER = (COLOR) -> {
    rectangle: {
        x: 0
        y: 0
        w: "(width)"
        h: "(height)"

        border_thickness: 1
        border_color: COLOR

    }
}

_GUI_DRAW_TEXT = (SIZE, COLOR) -> {
    rectangle: {
        x: "(text_x_offset + selection_offset)"
        y: "(text_y_offset)"
        w: "(selection_width)"
        h: "(text_font_height)"

        border_thickness: 0
        fill_color: "21, 53, 80, 255"
    }

    text: {
        x: "(text_x_offset)"
        y: "(text_y_offset)"
        w: "(text_width)"
        h: "(text_height)"
        maximum_width: "(text_maximum_width)"
        font_size: SIZE
        color: COLOR
        text: "(text)"
    }
}

_GUI_DRAW_CURSOR = (X_OFFSET) -> {
    line: {
        x1: "(cursor_offset + #{X_OFFSET})"
        y1: "(text_y_offset + 2)"
        x2: "(cursor_offset + #{X_OFFSET})"
        y2: "(text_y_offset + text_font_height - 2)"
        color: "([255, 255, 255, cursor_alpha])"
        thickness: 1
    }

    rectangle: {
        x: "(composition_offset + #{X_OFFSET})"
        y: "(text_y_offset + text_font_height - 2)"
        w: "(composition_width)"
        h: "2"
        fill_color: "([140, 140, 0, if(composition_width > 0, 255, 0)])"
        border_thickness: 0
    }
}

_GUI_RESOLUTION = (RESOLUTION, MIN_WIDTH, DEFAULT_WIDTH, HEIGHT, X_OFFSET, EXTRA_WIDTH, FONT_SIZE, BACKGROUND_ENABLED, BACKGROUND_DISABLED) -> {
    resolution: {

        <RESOLUTION

        min_width: MIN_WIDTH
        min_height: HEIGHT

        default_width: DEFAULT_WIDTH
        default_height: HEIGHT

        max_width: 0
        max_height: HEIGHT

        text_font_size: FONT_SIZE
        text_x_offset: X_OFFSET
        text_y_offset: "(if(text_font_height <= height, (height - text_font_height) / 2, 0))"
        text_extra_width: EXTRA_WIDTH

        state_enabled: {

            draw: {

                <BACKGROUND_ENABLED

                <_GUI_DRAW_BORDER(GUI__BORDER_COLOR_DARK!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_ENABLED__DEFAULT!)

            }

        }

        state_disabled: {

            draw: {

                <BACKGROUND_DISABLED

                <_GUI_DRAW_BORDER(GUI__FONT_COLOR_DISABLED_DARK__DEFAULT!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_DISABLED__DEFAULT!)

            }

        }

        state_focused: {

            draw: {

                <BACKGROUND_ENABLED

                <_GUI_DRAW_BORDER(GUI__BORDER_COLOR!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_ENABLED__DEFAULT!)

                <_GUI_DRAW_CURSOR(X_OFFSET)

            }

        }

    }

}

Text_Box_Definition{
    id: "default"
    description: "Default text box"

    <_GUI_RESOLUTION({}, 40, 250, 25, 5, 10, GUI_FONT_SIZE_DEFAULT!, _GUI_TEXTBOX_BACKGROUND_ENABLED!, _GUI_TEXTBOX_BACKGROUND_DISABLED!)

}

Text_Box_Definition{
    id: "transparent"
    description: "Background-less text box, used for WML messages"

    <_GUI_RESOLUTION({}, 40, 250, 25, 5, 10, GUI_FONT_SIZE_DEFAULT!, {}, {})

}

_GUI_FILTER_BOX_STUFF = (FONT_SIZE) -> {
    image: {
        x: "(width - image_width)"
        y: 0
        name: "(if(text = '', 'icons/action/zoomdefault_25.png~FL(horiz)', ''))"
    }

    text: {
        x: "(text_x_offset)"
        y: "(text_y_offset)"
        w: "(text_width)"
        h: "(text_height)"
        maximum_width: "(text_maximum_width)"
        font_size: GUI_FONT_SIZE_SMALL!
        color: GUI__FONT_COLOR_DISABLED__DEFAULT!
        text: "(if(text = '', 'Search', ''))"
    }
}

_GUI_RESOLUTION_FILTER = (RESOLUTION, MIN_WIDTH, DEFAULT_WIDTH, HEIGHT, X_OFFSET, EXTRA_WIDTH, FONT_SIZE, BACKGROUND_ENABLED, BACKGROUND_DISABLED) -> {
    resolution: {

        <RESOLUTION

        min_width: MIN_WIDTH
        min_height: HEIGHT

        default_width: DEFAULT_WIDTH
        default_height: HEIGHT

        max_width: 0
        max_height: HEIGHT

        text_font_size: FONT_SIZE
        text_x_offset: X_OFFSET
        text_y_offset: "(if(text_font_height <= height, (height - text_font_height) / 2, 0))"
        text_extra_width: EXTRA_WIDTH

        state_enabled: {

            draw: {

                <BACKGROUND_ENABLED

                <_GUI_DRAW_BORDER(GUI__BORDER_COLOR_DARK!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_ENABLED__DEFAULT!)

                <_GUI_FILTER_BOX_STUFF(FONT_SIZE)

            }

        }

        state_disabled: {

            draw: {

                <BACKGROUND_DISABLED

                <_GUI_DRAW_BORDER(GUI__FONT_COLOR_DISABLED_DARK__DEFAULT!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_DISABLED__DEFAULT!)

                <_GUI_FILTER_BOX_STUFF(FONT_SIZE)

            }

        }

        state_focused: {

            draw: {

                <BACKGROUND_ENABLED

                <_GUI_DRAW_BORDER(GUI__BORDER_COLOR!)

                <_GUI_DRAW_TEXT(FONT_SIZE, GUI__FONT_COLOR_ENABLED__DEFAULT!)

                <_GUI_DRAW_CURSOR(X_OFFSET)

            }

        }

    }

}

Text_Box_Definition{
    id: "filter"
    description: "Filter text box"

    <_GUI_RESOLUTION_FILTER({}, 40, 250, 25, 5, 10, GUI_FONT_SIZE_DEFAULT!, _GUI_TEXTBOX_BACKGROUND_ENABLED!, _GUI_TEXTBOX_BACKGROUND_DISABLED!)

}

_GUI_RESOLUTION = nil
_GUI_RESOLUTION_FILTER = nil
_GUI_FILTER_BOX_STUFF = nil
_GUI_DRAW_CURSOR = nil
_GUI_DRAW_TEXT = nil
_GUI_DRAW_BORDER = nil
_GUI_DRAW_BACKGROUND = nil
_GUI_TEXTBOX_BACKGROUND_ENABLED = nil
_GUI_TEXTBOX_BACKGROUND_DISABLED = nil
