-- This test checks that sighted events are being triggered
-- at the appropriate time. An elvish archer moves towards
-- and discovers an orcish grunt.
-- We pass if the elvish archer is the discoverer, and the
-- variable "sighted_should_trigger" is set.
-- Companion tests check what happens if the orc is discovered
-- on the elf's turn, and also that we fail if we dont set the
-- flag.

TEST_SIGHTED_EVENTS_SCEN = (ID, BOB_CONDITION, SET_FLAG) ->
    Test{
        name: "Unit Test #{ID}"
        map: "test/maps/sighted_events.map"
        turns: 4
        id: ID
        random_start_time: false
        is_unit_test: true

        <DAWN!

        side: {
            side: 1
            controller: "human"
            name: "Alice"
            type: "Elvish Archer"
            id: "alice"
            fog: true
        }
        side: {
            side: 2
            controller: "human"
            name: "Bob"
            type: "Orcish Grunt"
            id: "bob"
            fog: true
        }

        event: {
            name: "prestart"
            do: ->
                VARIABLE("sighted_should_trigger", false)
        }

        event: {
            name: "sighted"
            do: ->
                ASSERT(VARIABLE_CONDITIONAL("unit.id", "equals", "bob"))
                ASSERT(VARIABLE_CONDITIONAL("second_unit.id", "equals", "alice"))
                RETURN(VARIABLE_CONDITIONAL("sighted_should_trigger", "boolean_equals", true))
        }

--Alice moves towards Bob.
        event: {
            name: "side 1 turn 1 refresh"
            do: ->
                Do_Command{
                    move: {
                        x: {1, 2, 3, 4, 5, 6, 7}
                        y: {3, 3, 3, 3, 3, 3, 3}
                    }
                }
        }

--Bob moves either down, then up (unseen), or left, then right (seen)
        event: {
            name: "side 2 turn 1 refresh"
            do: ->
                If{
                    <BOB_CONDITION
                    then: ->
                        Do_Command{
                            move: {
                                x: {16, 16, 16}
                                y: {3, 4, 5}
                            }
                        }
                        Do_Command{
                            move: {
                                x: {16, 16, 16}
                                y: {5, 4, 3}
                            }
                        }
                    
                    else: ->
                        If{
                            <SET_FLAG
                            then: ->
                                VARIABLE("sighted_should_trigger", true)
                            
                        }
                        Do_Command{
                            move: {
                                x: {16, 15, 14}
                                y: {3, 3, 3}
                            }
                        }
                        Do_Command{
                            move: {
                                x: {14, 15, 16}
                                y: {3, 3, 3}
                            }
                        }
                    
                }
        }

--Alice discovers Bob.
        event: {
            name: "side 1 turn 2 refresh"
            do: ->
                Do_Command{
                    move: {
                        x: {7, 8}
                        y: {3, 3}
                    }
                }
--With the next stop Bob should be visible.
                If{
                    <SET_FLAG
                    then: ->
                        VARIABLE("sighted_should_trigger", true)
                    
                }
                Do_Command{
                    move: {
                        x: {8, 9}
                        y: {3, 3}
                    }
                }
        }

--If we got this far without triggering sighted, we fail the test.
        event: {
            name: "side 2 turn 2"
            do: ->
                FAIL!
        }

--This makes the sides pass their turns, when the other events have taken place.
        event: {
            name: "side turn"
            first_time_only: false
            do: ->
                End_Turn{
                }
        }
    }


TEST_SIGHTED_EVENTS_SCEN("sighted_events", {true: {}}, {true: {}})
TEST_SIGHTED_EVENTS_SCEN("sighted_events_fail", {true: {}}, {false: {}})
TEST_SIGHTED_EVENTS_SCEN("sighted_on_opponents_turn", {false: {}}, {true: {}})
TEST_SIGHTED_EVENTS_SCEN("sighted_on_opponents_turn_fail", {false: {}}, {false: {}})
