-- This test checks the total damage of grunts with no traits vs 0% defense
-- elvish archers, at various times of day.
--
-- If it fails, it means that something has changed in the attack pipeline
-- code with how bonuses are calculated.
--
-- (Or that a balanced update has occurred and this test wasn't updated... )

TEST_GRUNT_DAMAGE = (ID, X, Y, EXPECTED_DAMAGE) ->
    UNIT(2, "Orcish Grunt", "#{(#{X} + 1)", Y, {random_traits: false})
    UNIT(1, "Elvish Archer", X, Y, {id: "#{ID}"})
    Do_Command{
        attack: {
            weapon: 0
            defender_weapon: 0
            source: {
                x: "#{(#{X} + 1)"
                y: Y
            }
            destination: {
                x: X
                y: Y
            }
        }
    }
    Store_Unit{
        filter: {
            id: ID
        }
        variable: "injured"
    }
    VARIABLE("damage", injured.max_hitpoints)
    VARIABLE_OP("damage", "sub", injured.hitpoints)
    ASSERT(VARIABLE_CONDITIONAL("damage", "equals", EXPECTED_DAMAGE))


Test{
    name: "Unit Test test_grunt_tod_damage"
    map: "test/maps/test_grunt_tod_damage.map"
    turns: 7
    id: "test_grunt_tod_damage"
    random_start_time: false
    is_unit_test: true

    <DEFAULT_SCHEDULE!

    side: {
        side: 1
        controller: "human"
        name: "Alice"
        type: "Elvish Archer"
        id: "alice"
    }
    side: {
        side: 2
        controller: "human"
        name: "Bob"
        type: "Orcish Grunt"
        id: "bob"
    }

--This turn is afternoon.
    event: {
        name: "side 2 turn 3 refresh"
        do: ->
            TEST_GRUNT_DAMAGE("test1", 1, 2, "#{(7*2)")
    }

--This turn is dusk.
    event: {
        name: "side 2 turn 4 refresh"
        do: ->
            TEST_GRUNT_DAMAGE("test2", 1, 4, "#{(9*2)")
    }

--This turn is first watch.
    event: {
        name: "side 2 turn 5 refresh"
        do: ->
            TEST_GRUNT_DAMAGE("test3", 1, 6, "#{(11*2)")
    }

--If we got this far without failing an assertion, we pass the test.
    event: {
        name: "side 2 turn 6"
        do: ->
            SUCCEED!
    }

--This makes all sides pass their turns, when the other events have taken place.
    event: {
        name: "side turn"
        first_time_only: false
        do: ->
            End_Turn{
            }
    }
}

-- Same test but using [time_area] tags instead of default_schedule
-- to produce the damage changes
--

Test{
    name: "Unit Test test_time_area_damage"
    map: "test/maps/test_grunt_tod_damage.map"
    turns: 7
    id: "test_time_area_damage"
    random_start_time: false
    is_unit_test: true

    <DEFAULT_SCHEDULE!

    side: {
        side: 1
        controller: "human"
        name: "Alice"
        type: "Elvish Archer"
        id: "alice"
    }
    side: {
        side: 2
        controller: "human"
        name: "Bob"
        type: "Orcish Grunt"
        id: "bob"
    }

    event: {
        name: "start"
        do: ->
            End_Turn{
            }
    }

    event: {
        name: "side 2 turn 1"
        do: ->
            Time_Area{
                id: "foo"
                x: "1-2"
                y: "1-10"
                <AFTERNOON!
            }
            TEST_GRUNT_DAMAGE("test1", 1, 2, "#{(7*2)")
            Time_Area{
                id: "foo"
                remove: true
            }

            Time_Area{
                id: "foo"
                x: "1-2"
                y: "1-10"
                <DUSK!
            }
            TEST_GRUNT_DAMAGE("test2", 1, 4, "#{(9*2)")
            Time_Area{
                id: "foo"
                remove: true
            }

            Time_Area{
                id: "foo"
                x: "1-2"
                y: "1-10"
                <FIRST_WATCH!
            }
            TEST_GRUNT_DAMAGE("test3", 1, 6, "#{(11*2)")

            SUCCEED!
    }
}

-- Test a time area declared in prestart event

Test{
    name: "Unit Test test_time_area_prestart"
    map: "test/maps/test_grunt_tod_damage.map"
    turns: 7
    id: "test_time_area_prestart"
    random_start_time: false
    is_unit_test: true

    <DEFAULT_SCHEDULE!

    side: {
        side: 1
        controller: "human"
        name: "Alice"
        type: "Elvish Archer"
        id: "alice"
    }
    side: {
        side: 2
        controller: "human"
        name: "Bob"
        type: "Orcish Grunt"
        id: "bob"
    }

    event: {
        name: "prestart"
        do: ->
            Time_Area{
                x: "1-2"
                y: "1-10"
                <FIRST_WATCH!
            }
    }

    event: {
        name: "start"
        do: ->
            End_Turn{
            }
    }

    event: {
        name: "side 2 turn 1"
        do: ->
            TEST_GRUNT_DAMAGE("test3", 1, 6, "#{(11*2)")

            SUCCEED!
    }
}
