-- The purpose of this test is to make a scenario that plays but goes out of sync with the replay.
-- This is done as a sanity check of the unit testing mechanism.
-- We use the unsynced rng, lua.random, to achieve this.
-- Basically we keep giving side 1 a random amount of gold and recruiting as
-- many woses as possible, killing them immediately to make space. We do this
-- for 60 turns. In the replay we will actually have a random amount of gold
-- each time, so if we have bad luck one turn we won't have enough to afford
-- that many woses.
-- For each turn its about 50-50 not to go out of sync, so the chance not to
-- go out of sync (for true randomness) would be ~ 2^{-60}.
-- (However none of our generators use more than 32 bits per seed.)

TEST_BREAK_REPLAY = (ID, GET_RND_NUM) ->
    GENERIC_UNIT_TEST(ID, {
            event: {
                name: "start"
                do: ->
                    Allow_Recruit{
                        side: 1
                        type: "Wose"
                    }
            }
            event: {
                name: "recruit"
                first_time_only: false
                do: ->
                    Kill{
                        x: x1
                        y: y1
                        animate: true
                    }
            }
            event: {
                name: "side 1 turn refresh"
                first_time_only: false
                do: ->
                    GET_RND_NUM
                    Modify_Side{
                        side: 1
                        gold: rnd_num
                    }
                    While{
                        <VARIABLE_CONDITIONAL("rnd_num", "greater_than_equal_to", 20)
                        do: ->
                            Do_Command{
                                recruit: {
                                    type: "Wose"
                                    x: 7, y: 4
                                    from: {
                                        x: 7, y: 3
                                    }
                                }
                            }
                            VARIABLE_OP("rnd_num", "sub", 20)
                        
                    }
                    End_Turn{
                    }
            }
            event: {
                name: "side 2 turn 60"
                do: ->
                    SUCCEED!
            }
            event: {
                name: "side 2 turn refresh"
                first_time_only: false
                do: ->
                    End_Turn{
                    }
            }
    })


TEST_BREAK_REPLAY("break_replay_with_lua_random", {
        lua: {
            code: [[
                wesnoth.set_variable("rnd_num", math.random(200))
            ]]
        }
})

TEST_BREAK_REPLAY("fixed_lua_random_replay_with_sync_choice", {
        lua: {
            code: [[
                local result = wesnoth.synchronize_choice(
                  function()
                    return { value = math.random(200) }
                  end)
                wesnoth.set_variable("rnd_num", result.value)
            ]]
        }
})
