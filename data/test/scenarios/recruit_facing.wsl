CHECK_RECRUIT = (CONTENT) -> {
    event: {
        name: "recruit"
        do: ->
            Lua{
                code: [[
                    local temp = wesnoth.get_variable("unit")
                    local result = wesnoth.synchronize_choice(
                      function()
                        return { value = temp.facing }
                      end)
                    wesnoth.set_variable("synced_temp", result.value)
                ]]
            }
            ASSERT(VARIABLE_CONDITIONAL("unit.facing", "equals", synced_temp))
            CONTENT
    }
}

CHECK_FACES = (FACEDIR) -> {
    <CHECK_RECRUIT({
            <ASSERT(VARIABLE_CONDITIONAL("unit.facing", "equals", FACEDIR))
    })
}

RECRUIT = (TYPE, TO, FROM) ->
    Do_Command{
        recruit: {
            type: TYPE
            x: TO[1], y: TO[2]
            from: {
                x: FROM[1], y: FROM[2]
            }
        }
    }


RECRUIT_TEST = (NAME, CONTENT) ->
    GENERIC_UNIT_TEST(NAME, {
            event: {
                name: "start"
                do: ->
                    Allow_Recruit{
                        side: 1
                        type: "Spearman"
                    }
                    Allow_Recruit{
                        side: 2, type: "Orcish Grunt"
                    }
            }
            event: {
                name: "turn refresh"
                first_time_only: false
                do: ->
                    Kill{
                        canrecruit: false
                    }
            }
            <CONTENT
    })


RECRUIT_TEST("recruit_facing_enemy_one", {
        event: {
            name: "side 1 turn refresh"
            do: ->
                CHECK_FACES("ne")
                RECRUIT("Spearman", {7, 4}, {7, 3})
                End_Turn{
                }
        }
        event: {
            name: "side 2 turn refresh"
            do: ->
                CHECK_FACES("nw")
                RECRUIT("Orcish Grunt", {13, 4}, {13, 3})
                End_Turn{
                }
        }
        event: {
            name: "side 1 turn 2"
            do: ->
                SUCCEED!
        }
})

RECRUIT_TEST("recruit_facing_enemy_two", {
        event: {
            name: "side 2 turn refresh"
            first_time_only: false
            do: ->
                End_Turn{
                }
        }
        event: {
            name: "side 1 turn 1 refresh"
            do: ->
                CHECK_FACES("ne")
                RECRUIT("Spearman", {7, 4}, {7, 3})
                End_Turn{
                }
        }
        event: {
            name: "side 1 turn 2 refresh"
            do: ->
                Unit{
                    x: 7, y: 1, side: 2, type: "Orcish Grunt"
                }
                CHECK_FACES("n")
                RECRUIT("Spearman", {7, 4}, {7, 3})
                End_Turn{
                }
        }
        event: {
            name: "side 1 turn 3 refresh"
            do: ->
                Unit{
                    x: 7, y: 7, side: 2, type: "Orcish Warrior"
                }
                CHECK_FACES("s")
                RECRUIT("Spearman", {7, 4}, {7, 3})
                End_Turn{
                }
        }
        event: {
            name: "side 1 turn 4 refresh"
            do: ->
                SUCCEED!
        }
})

EMPTY_MAP = () -> {
    victory_when_enemies_defeated: false
    map_data: "Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg
Gg, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch,1 Kh, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Ch, Gg
Gg, Ch, Ch, Ch, Ch,2 Ch, Ch, Ch, Ch, Ch, Gg
Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg"
    event: {
        name: "start"
        do: ->
            Gold{
                side: 1, amount: 1000
            }
            Kill{
                side: 2
            }
    }
}

RECRUIT_AND_CHECK = (TURN, FACING, LOC) -> {
    event: {
        name: "side 1 turn #{TURN} refresh"
        do: ->
            CHECK_FACES(FACING)
            RECRUIT("Spearman", LOC, {5, 4})
            End_Turn{
            }
    }
}
RECALL_AND_CHECK = (TURN, FACING, LOC) -> {
    event: {
        name: "side 1 turn #{TURN} refresh"
        do: ->
            Store_Unit{
                filter: {
                    canrecruit: true
                }
                variable: "leader_store"
            }
            CHECK_FACES(FACING)
            Unit{
                type: "Spearman"
                x: "recall", y: "recall"
                side: 1
                id: "test_#{TURN}"
            }
            Do_Command{
                recall: {
                    value: "test_#{TURN}"
                    x: LOC[1], y: LOC[2]
                }
            }
            Unstore_Unit{
                variable: "leader_store"
            }
            End_Turn{
            }
    }
}

RECRUIT_TEST("recruit_facing_leader", {
        <EMPTY_MAP!
        <RECRUIT_AND_CHECK(1, "n", {5, 2})
        <RECRUIT_AND_CHECK(2, "s", {5, 5})
        <RECRUIT_AND_CHECK(3, "nw", {2, 3})
        <RECRUIT_AND_CHECK(4, "ne", {8, 3})
        <RECRUIT_AND_CHECK(5, "sw", {2, 4})
        <RECRUIT_AND_CHECK(6, "sw", {3, 5})

--Rotational symmetry edge cases
        <RECRUIT_AND_CHECK(7, "nw", {3, 4})
        <RECRUIT_AND_CHECK(8, "se", {7, 4})
        event: {
            name: "side 1 turn 9 refresh"
            do: ->
                SUCCEED!
        }
})
RECRUIT_TEST("recruit_facing_center", {
        <EMPTY_MAP!
        <RECALL_AND_CHECK(1, "s", {5, 2})
        <RECALL_AND_CHECK(2, "n", {5, 5})
        <RECALL_AND_CHECK(3, "se", {2, 3})
        <RECALL_AND_CHECK(4, "sw", {8, 3})
        <RECALL_AND_CHECK(5, "ne", {2, 4})
        <RECALL_AND_CHECK(6, "ne", {3, 5})

--Rotational symmetry edge cases
        <RECALL_AND_CHECK(7, "se", {3, 4})
        <RECALL_AND_CHECK(8, "nw", {7, 4})
        event: {
            name: "side 1 turn 9 refresh"
            do: ->
                SUCCEED!
        }
})
