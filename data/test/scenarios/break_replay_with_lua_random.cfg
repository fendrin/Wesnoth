# The purpose of this test is to make a scenario that plays but goes out of sync with the replay.
# This is done as a sanity check of the unit testing mechanism.
# We use the unsynced rng, lua.random, to achieve this.
# Basically we keep giving side 1 a random amount of gold and recruiting as
# many woses as possible, killing them immediately to make space. We do this 
# for 30 turns. In the replay we will actually have a random amount of gold 
# each time, so if we have bad luck one turn we won't have enough to afford
# that many woses.
# For each turn its about 50-50 not to go out of sync, so the chance not to
# go out of sync should be roughly less than one in a billion.

{GENERIC_UNIT_TEST "break_replay_with_lua_random" (
    [event]
        name = start
        [allow_recruit]
		side=1
		type=Wose
	[/allow_recruit]
    [/event]
    [event]
        name = recruit
	first_time_only = no
        [kill]
            x = $x1
            y = $y1
            animate=yes
        [/kill]
    [/event]
    [event]
        name = side 1 turn refresh
	first_time_only=no
        [lua]
            code =<<
                wesnoth.set_variable("rnd_num", math.random(200))
            >>
        [/lua]
        [modify_side]
		side = 1
		gold = $rnd_num
	[/modify_side]
	[while]
		{VARIABLE_CONDITIONAL rnd_num greater_than_equal_to 20}
		[do]
			[do_command]
				[recruit]
					type="Wose"
					x,y=7,4
					[from]
						x,y=7,3
					[/from]
				[/recruit]
			[/do_command]
			{VARIABLE_OP rnd_num sub 20}
		[/do]
	[/while]
	[end_turn]
	[/end_turn]
    [/event]
    [event]
        name = side 2 turn 30
        {RETURN ([true][/true])}
    [/event]
    [event]
        name = side 2 turn refresh
	first_time_only=no
        [end_turn]
        [/end_turn]
    [/event]
)}
