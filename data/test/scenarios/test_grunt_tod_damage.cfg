# This test checks the total damage of grunts with no traits vs 0% defense 
# elvish archers, at various times of day. 
#
# If it fails, it means that something has changed in the attack pipeline 
# code with how bonuses are calculated.
#
# (Or that a balanced update has occurred and this test wasn't updated... )

#define TEST_GRUNT_DAMAGE ID X Y EXPECTED_DAMAGE
        {UNIT 2 "Orcish Grunt" "$({X} + 1)" {Y} (random_traits=false)}
        {UNIT 1 "Elvish Archer" {X} {Y} (id={ID})}
        [do_command]
            [attack]
                weapon = 0
                defender_weapon = 0
                [source]
                    x = "$({X} + 1)"
                    y = {Y}
                [/source]
                [destination]
                    x = {X}
                    y = {Y}
                [/destination]
            [/attack]
        [/do_command]
        [store_unit]
            [filter]
                id = {ID}
            [/filter]
            variable = injured
        [/store_unit]
        {VARIABLE damage $injured.max_hitpoints}
        {VARIABLE_OP damage sub $injured.hitpoints}
        {ASSERT {VARIABLE_CONDITIONAL damage equals {EXPECTED_DAMAGE}}}
#enddef

[test]
    name = "Unit Test test_grunt_tod_damage"
    map_data = "{test/maps/test_grunt_tod_damage.map}"
    turns = 7
    id = test_grunt_tod_damage
    random_start_time = no

    {DEFAULT_SCHEDULE}

    [side]
       side=1
       controller=human
       name = "Alice"
       type = Elvish Archer
       id=alice
    [/side]
    [side]
       side=2
       controller=human
       name = "Bob"
       type = Orcish Grunt
       id=bob
    [/side]

    #This turn is afternoon.
    [event]
        name = side 2 turn 3 refresh
        {TEST_GRUNT_DAMAGE test1 1 2 "$(7*2)"}
    [/event]

    #This turn is dusk.
    [event]
        name = side 2 turn 4 refresh
        {TEST_GRUNT_DAMAGE test2 1 4 "$(9*2)"}
    [/event]

    #This turn is first watch.
    [event]
        name = side 2 turn 5 refresh
        {TEST_GRUNT_DAMAGE test3 1 6 "$(11*2)"}
    [/event]

    #If we got this far without failing an assertion, we pass the test.
    [event]
        name = side 2 turn 6
        {RETURN ([true][/true])}
    [/event]

    #This makes all sides pass their turns, when the other events have taken place.
    [event]
        name = side turn
        first_time_only = no
        [end_turn]
        [/end_turn]
    [/event]
[/test]
