-- This unit test defines a WML object based implementation of the "feeding" ability
-- and checks that it works. What is being tested here, beyond what is tested in
-- test_unit_map and other scenarios that test the attack pathway, is that
-- - the die event works
-- - objects attach to units by id correctly
-- - abilities can be properly detected in filters
-- - abillities which add other objects works
-- - this impl of feeding works

STR_FEEDING = () ->
    "foo"


STR_FEEDING_EFFECT = () ->
    "bar"


STR_FEEDING_DESCRIPTION = () ->
    "baz"


TEST_FEEDING = (ID, EXPECTED_INCREASE) ->
    Store_Unit{
        filter: {
            id: ID
        }
        variable: "Killer"
    }

    VARIABLE("victim_x", Killer.x)
    VARIABLE_OP("victim_x", "sub", 1)
    VARIABLE("victim_y", Killer.y)

    VARIABLE("victim_side", 3)
    VARIABLE_OP("victim_side", "sub", Killer.side)

    VARIABLE("Killer_start_hp", Killer.hitpoints)

    Terrain{
        x: victim_x, y: victim_y
        terrain: "Xv"
    }
    UNIT(victim_side, "Elvish Archer", victim_x, victim_y, {hitpoints: 1})
    Do_Command{
        attack: {
            weapon: 0
            defender_weapon: 0
            source: {
                x: Killer.x, y: Killer.y
            }
            destination: {
                x: victim_x, y: victim_y
            }
        }
    }

    Store_Unit{
        filter: {
            id: ID
        }
        variable: "Killer"
    }

    VARIABLE_OP("Killer_start_hp", "add", EXPECTED_INCREASE)

    ASSERT(VARIABLE_CONDITIONAL("Killer.hitpoints", "equals", Killer_start_hp))


GENERIC_UNIT_TEST("feeding", {
        event: {
            id: "ability_feeding_die"
            name: "die"
            first_time_only: false
            filter: {
                not: {
                    filter_wml: {
                        status: {
                            not_living: "yes"
                        }
                    }
                }
            }
            filter_second: {
                ability: "feeding_Test"
            }
            do: ->
                Unstore_Unit{
                    variable: "second_unit"
                    <COLOR_HEAL!
                    text: STR_FEEDING_EFFECT!
                    find_vacant: false
                }
                Object{
                    silent: true
                    duration: "forever"
                    filter: {
                        x: x2, y: y2
                    }
                    effect: {
                        apply_to: "hitpoints"
                        increase_total: 1
                        increase: 1
                    }
                }
        }
        event: {
            name: "start"
            do: ->
                Object{
                    id: "feeding_object"
                    silent: true
                    effect: {
                        apply_to: "new_ability"
                        abilities: {
                            dummy: {
                                id: "feeding_Test"
                                name: STR_FEEDING!
                                female_name: STR_FEEDING!
                                description: STR_FEEDING_DESCRIPTION!
                            }
                        }
                    }
                    filter: {
                        id: "bob"
                    }
                }
        }
        event: {
            name: "start"
            do: ->
                TEST_FEEDING("alice", 0)
                TEST_FEEDING("alice", 0)
                TEST_FEEDING("alice", 0)

                End_Turn{
                }
        }
        event: {
            name: "side 2 turn 1"
            do: ->
                TEST_FEEDING("bob", 1)
                TEST_FEEDING("bob", 1)
                TEST_FEEDING("bob", 1)

                Store_Unit{
                    filter: {
                        id: "bob"
                    }
                    variable: "Bob"
                }

                VARIABLE_OP("Bob.experience", "add", 50)

                Unstore_Unit{
                    variable: "Bob"
                }

                TEST_FEEDING("bob", 1)
                TEST_FEEDING("bob", 1)
                TEST_FEEDING("bob", 1)

                SUCCEED!
        }
})
