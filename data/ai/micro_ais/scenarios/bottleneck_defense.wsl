--textdomain wesnoth-ai

Test{
    id: "bottleneck_defense"
    name: _ "Bottleneck Defense"
    next_scenario: "micro_ai_test"

    map: "ai/micro_ais/maps/bottleneck_defense.map"

    <DEFAULT_SCHEDULE!
    turns: -1
    victory_when_enemies_defeated: false

    side: {
        side: 1
        controller: "ai"
        id: "LuaAI"
        type: "Lieutenant"
        defeat_condition: "no_units_left"
        persistent: false

        canrecruit: true
        recruit: {"Spearman", "Bowman"}
        gold: 125

        unit: {
            type: "White Mage"
            x: 23, y: 6
        }
    }

    side: {
        side: 2
        controller: "ai"
        suppress_end_turn_confirmation: true
        type: "Orcish Leader"
        id: "Big Bad Orc"
        name: _ "Big Bad Orc"
        persistent: false

        canrecruit: true
        recruit: {"Orcish Archer", "Orcish Grunt"}
        gold: 400

        ai: {
            aggression: 1.0
        }
    }

    side: {  -- This side is only here because we need one persistent side for the game to go on
        side: 3
        controller: "null"
        persistent: true
        save_id: "Grnk"
        hidden: true
    }

    event: {
        name: "prestart"
        do: ->
            VARIABLE("scenario_name", "bottleneck_defense")

-- Set up the Bottleneck Defense Micro AI
            Micro_Ai{
                side: 1
                ai_type: "bottleneck_defense"
                action: "add"

                x: {14, 14, 14}
                y: {7, 9, 8}
                enemy_x: {13, 13}
                enemy_y: {8, 9}

                healer_x: {14, 14, 15, 15}
                healer_y: {7, 9, 8, 9}
                leadership_x: {14, 14, 15, 15}
                leadership_y: {7, 9, 9, 8}
                active_side_leader: true
            }
    }

    event: {
        name: "start"
        do: ->
            MESSAGE("LuaAI", "", "", _ "All right, chaps. Those orcs need to be stopped.")
            STORE_UNIT_VAR({id: "Big Bad Orc"}, "profile", "profile")
            MESSAGE("Big Bad Orc", "#{profile~FL()~RIGHT()", "", _ "They there!  We them get!")
            CLEAR_VARIABLE("profile")
-- wmllint: unbalanced-on
            MESSAGE("LuaAI", "", "", _ "We need to hold that pass for as long as we can. Let's put our strongest fighters on the front line and bring injured units to the back for healing. If we're careful enough, we might even win this battle. I'll join you as soon as I'm done recruiting and do my share of the fighting.

Note: The Bottleneck Defense AI is coded as a Micro AI. A Micro AI can be added and adapted to the need of a scenario easily using only WML and the [micro_ai] tag. Check out the <span color='#00A000'>Micro AI wiki page</span> at http://wiki.wesnoth.org/Micro_AIs for more information.")
-- wmllint: unbalanced-off
-- wmllint: local spellings AIs RCA

            Message{
                speaker: "narrator"
                caption: _ "Question for the Player"
                image: "wesnoth-icon.png"
                message: _ "In this scenario, the AI playing the humans in the east is instructed to form a defensive line at the pass and hold off the orcs for as long as possible. Do you want to play the orc side or let the default (RCA) AI do that?"
                option: {
                    label: _ "<span font='16'>I'll watch the two AIs fight it out.</span>"
                }
                option: {
                    label: _ "<span font='16'>I'll play the orcs.</span>"
                    command: ->
                        Modify_Side{
                            side: 2
                            controller: "human"
                        }
                    
                }
            }

            Objectives{
                summary: _ "Take the pass"
                objective: {
                    description: _ "Defeat all humans"
                    condition: "win"
                }
                objective: {
                    description: _ "Death of Big Bad Orc"
                    condition: "lose"
                }
                objective: {
                    description: _ "Only one orc remains"
                    condition: "lose"
                }
            }
    }

-- White Mage has to hang out at keep for one turn
    event: {
        name: "side 1 turn 1 refresh"
        do: ->
            MODIFY_UNIT({type: "White Mage"}, "moves", 0)
    }

-- When leader dies: message, then keep fighting
    event: {
        name: "last_breath"
        filter: {
            id: "LuaAI"
        }
        do: ->
            If{
                have_unit: {
                    side: 1
                }
                then: ->
                    MESSAGE("LuaAI", "", "", _ "I may have fallen, but we will continue to defend the pass to the last man!")
                
            }
    }

-- When the last unit on one side dies, end the scenario
    event: {
        name: "die"
        first_time_only: false
        do: ->
            If{
                not: {  -- If all pass defenders have died
                    have_unit: {
                        side: 1
                    }
                }
                or: {  -- or if all orcs (except their leader) have died
                    have_unit: {
                        side: 2
                        count: 1
                    }
                }
                then: ->
                    Kill{
                        id: unit.id
                    }

-- So that game goes on to next scenario
                    Modify_Side{
                        side: 3
                        controller: "human"
                    }

                    MESSAGE("narrator", "wesnoth-icon.png", "", _ "Well, that was that.")

                    Endlevel{
                        result: "victory"
                        bonus: false
                        carryover_percentage: 0
                        carryover_report: false
                        linger_mode: false
                    }
                
            }
    }

-- Spearmen only advance to Javelineers
    event: {
        name: "recruit"
        first_time_only: false
        filter: {
            type: "Spearman"
        }
        do: ->
            MODIFY_UNIT({id: unit.id}, "advances_to", "Javelineer")
    }
}
