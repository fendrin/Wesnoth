#textdomain wesnoth-ai

#define RCA_STAGE
    # The standard RCA stage with its candidate actions; same for all Micro AIs
    [stage]
        id=main_loop
        name=ai_default_rca::candidate_action_evaluation_loop
        {AI_CA_GOTO}
        {AI_CA_RECRUITMENT}
        {AI_CA_MOVE_LEADER_TO_GOALS}
        {AI_CA_MOVE_LEADER_TO_KEEP}
        {AI_CA_COMBAT}
        {AI_CA_HEALING}
        {AI_CA_VILLAGES}
        {AI_CA_RETREAT}
        {AI_CA_MOVE_TO_TARGETS}
        {AI_CA_LEADER_SHARES_KEEP}
    [/stage]
#enddef

#define MICRO_AI_HEALER_SUPPORT
    # Sets up the healer support Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=healer_support
        description=_"Healer Support Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_healer_support_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_BOTTLENECK_DEFENSE
    # Sets up the bottleneck defense Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=bottleneck_defense
        description=_"Bottleneck Defense Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_bottleneck_defense_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_MESSENGER_ESCORT
    # Sets up the messenger escort Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=messenger_escort
        description=_"Messenger Escort Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_messenger_escort_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_ANIMALS
    # Sets up all the animals Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Animals Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                local engine = {}
                engine = wesnoth.require("ai/micro_ais/ais/mai_big_animals_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_forest_animals_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_herding_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_hunter_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_swarm_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_wolves_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_wolves_multipacks_engine.lua").init(ai, engine)
                return engine
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]

    # Somewhat hacky way to get a deprecation message displayed
    # This macro goes into the [side] tag, so ActionWML tags cannot be used
    [unit]
        type=Fog Clearer
        x,y=1,1
        id=ai_micro_ai_animals_fake_unit

        [event]
            name=prestart
            id=ai_micro_ai_animals_deprecation_message

            [wml_message]
                logger=warn
                message = "The MICRO_AI_ANIMALS macro is deprecated.  Use the macros for the individual animal Micro AI engines instead."
            [/wml_message]

            [kill]
                id=ai_micro_ai_animals_fake_unit
            [/kill]
        [/event]
    [/unit]
#enddef

#define MICRO_AI_BIG_ANIMALS
    # Sets up all the big_animals Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Big Animals Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_big_animals_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_FOREST_ANIMALS
    # Sets up all the forest_animals Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Forest Animals Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_forest_animals_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_HERDING
    # Sets up all the herding Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Herding Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_herding_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_HUNTER
    # Sets up all the hunter Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Hunter Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_hunter_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_SWARM
    # Sets up all the swarm Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Swarm Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_swarm_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_WOLVES
    # Sets up all the wolves Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Wolves Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_wolves_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_WOLVES_MULTIPACKS
    # Sets up all the wolves_multipacks Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=animals
        description=_"Multipack Wolves Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_wolves_multipacks_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_GUARDIAN
    # Sets up the guardian Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=guardian
        description=_"Guardian Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                local engine = {}
                engine = wesnoth.require("ai/micro_ais/ais/mai_coward_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_return_guardian_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_stationed_guardian_engine.lua").init(ai, engine)
                engine = wesnoth.require("ai/micro_ais/ais/mai_zone_guardian_engine.lua").init(ai, engine)
                return engine
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_COWARD
    # Sets up the coward Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=coward
        description=_"Coward Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_coward_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_RETURN_GUARDIAN
    # Sets up the return guardian Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=return_guardian
        description=_"Return Guardian Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_return_guardian_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_STATIONED_GUARDIAN
    # Sets up the stationed guardian Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=stationed_guardian
        description=_"Stationed Guardian Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_stationed_guardian_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_ZONE_GUARDIAN
    # Sets up the zone guardian Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=zone_guardian
        description=_"Zone Guardian Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_zone_guardian_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_PROTECT_UNIT
    # Sets up the protect unit Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=protect_unit
        description=_"Protect Unit Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_protect_unit_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_PATROL
    # Sets up the patrol Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=patrol
        description=_"Patrol Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_patrol_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_LURKERS
    # Sets up the lurkers Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=lurkers
        description=_"Lurkers Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_lurkers_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_RECRUITING
    # Sets up the recruiting Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=recruiting
        description=_"Recruiting Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_recruit_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_GOTO
    # Sets up the Goto Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=goto
        description=_"Goto Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_goto_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_HANG_OUT
    # Sets up the Hang Out Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=hang_out
        description=_"Hang Out Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_hang_out_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_SIMPLE_ATTACK
    # Sets up the Simple Attack Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side]

    [ai]
        id=simple_attack
        description=_"Simple Attack Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("ai/micro_ais/ais/mai_simple_attack_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef
