--textdomain wesnoth
-- These are clutter, scheduled to be removed.

-- ! in comments is used for generating HTML documentation, ignore it otherwise.

--wmllint: markcheck off
DEPRECATE = (MACRO_NAME, VERSION_NAME) -> {
-- Tag ActionWML macros for removal, where VERSION_NAME is the the next development series from the date of deprecation.
    deprecated_message: {
        what: MACRO_NAME
        level: 2
        version: VERSION_NAME
    }
}

DEPRECATE_ACTION_MACRO = (MACRO_NAME, LEVEL, VERSION, MESSAGE) -> {
-- Tag ActionWML macros for removal, where VERSION is the the next development series from the date of deprecation.
    deprecated_message: {
        what: MACRO_NAME
        level: LEVEL
        version: VERSION_NAME!
        message: MESSAGE
    }
}
--wmllint: markcheck on

MAGENTA_IS_THE_TEAM_COLOR = () -> {
-- This used to be used to set the default team colour for most unit types
-- It's no longer needed, since the default is now set in the game_config.
    }true

    ABILITY_LEADERSHIP_LEVEL_1 = () -> {
        <ABILITY_LEADERSHIP!
    }

    ABILITY_LEADERSHIP_LEVEL_2 = () -> {
        <ABILITY_LEADERSHIP!
    }

    ABILITY_LEADERSHIP_LEVEL_3 = () -> {
        <ABILITY_LEADERSHIP!
    }

    ABILITY_LEADERSHIP_LEVEL_4 = () -> {
        <ABILITY_LEADERSHIP!
    }

    ABILITY_LEADERSHIP_LEVEL_5 = () -> {
        <ABILITY_LEADERSHIP!
    }

    EARLY_FINISH_BONUS_CAPTION = () -> {
-- Deprecated; use the below EARLY_FINISH_BONUS_FOOTNOTE instead
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:461: attempt to concatenate local 'node_type' (a nil value)

        EARLY_FINISH_BONUS_NOTE = () -> {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:461: attempt to concatenate local 'node_type' (a nil value)

            NO_EARLY_FINISH_BONUS_NOTE = () -> {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:461: attempt to concatenate local 'node_type' (a nil value)

                NO_GOLD_CARRYOVER_NOTE = () -> {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:461: attempt to concatenate local 'node_type' (a nil value)

                    NEW_GOLD_CARRYOVER_NOTE_100 = () -> {
                        _ "
100% of finishing gold carried over to the next scenario."

                        NEW_GOLD_CARRYOVER_NOTE_40: () -> {
                            _ "
40% of finishing gold carried over to the next scenario."

                            NEW_GOLD_CARRYOVER_NOTE_20: () -> {
                                _ "
20% of finishing gold carried over to the next scenario."

                                MISSILE_FRAME_FIREBALL: () -> {
-- Deprecated; use MISSILE_FRAME_FIREBALL_XY X_OFFSET Y_OFFSET instead
                                    <MISSILE_FRAME_FIREBALL_XY(0, 0)
                                }

                                MESSAGE: (SPEAKER_ID, IMAGE, CAPTION_TEXT, MESSAGE_TEXT) ->
-- Displays a text message spoken by SPEAKER_ID.
-- Speaker can be any of: narrator, unit and second_unit
-- For example, let's have the narrator, which looks like a faery
-- express some feelings on the undead:
--! {MESSAGE narrator "units/elves-wood/shyde.png" _ "Faery" _ "Aarr! Them be undeadies! Loooks at them.."}
                                    Message{
                                        speaker: SPEAKER_ID
                                        message: MESSAGE_TEXT
                                        image: IMAGE
                                        caption: CAPTION_TEXT
                                    }
                                

                                STORY_PART_SPEECH: (BACKGROUND_IMAGE, SPEAKER_VALUE, SPEECH_VALUE) -> {
                                    part: {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 98:         story={CAPTION {SPEAKER_VALUE}} + {SPEECH_VALUE}
                                        background_layer: {
                                            image: BACKGROUND_IMAGE
                                            scale: false
                                        }
                                    }
                                }

                                LOYAL_UNDEAD_UNIT: (SIDE, TYPE, X, Y) -> {
-- Create a unit with the Undead and Loyal traits.
                                    unit: {
                                        type: TYPE
                                        side: SIDE
                                        x: X
                                        y: Y
                                        modifications: {
                                            <TRAIT_UNDEAD!
                                            <TRAIT_LOYAL!
                                        }
                                        overlays: "misc/loyal-icon.png"
                                    }
                                }

                                ON_SIGHTING: (ID, SIGHTING_SIDE, SIGHTED_FILTER, ACTION_WML) -> {
-- NOTE: As of version 1.11, this macro is unnecessary, since sighted
-- events now work as intended.
--
-- This is intended to be used when a regular sighted event can't be relied
-- on (that'd be most of the time). This event triggers when a unit matching
-- SIGHTED_FILTER is first seen by a unit of side SIGHTING_SIDE. This works
-- whether the sighting happens due to moving, recruiting, recalling,
-- attacking (in case DSU was on before the attack) or advancing. If none of
-- those actions manage to "catch" the moment of sighting, then it will occur
-- when the current side ends their turn.
--
-- The 'unit' and 'second_unit' message speaker shortcuts as well as the
-- auto-stored $unit and $second_unit should work normally: the sighting unit
-- is the primary unit and the sighted unit is the secondary unit.
--
-- You need to provide a unique ID if you use several of these events in the
-- same scenario. Otherwise it can be left empty.
--
-- Only works if SIGHTING_SIDE has fog and/or shroud.
--
-- Example:
--! {ON_SIGHTING () 1 side=2,3 (
--!     [message]
--!         speaker=unit
--!         message= _ "I can see a side $second_unit.side $second_unit.language_name|!"
--!     [/message]
--!     [message]
--!         speaker=second_unit
--!         message= _ "Oh my! I was seen by a side $unit.side $unit.language_name|!"
--!     [/message]
--! )}
--!
                                    event: {
                                        name: "SIGHTED_#{ID}_trigger_action_WML"
                                        do: ->
                                            ACTION_WML
                                    }

                                    event: {
                                        name: {"moveto", "recruit", "recall", "attack", "post advance", "side turn"}
                                        first_time_only: false

                                        filter: {
                                            side: SIGHTING_SIDE

                                            or: {
                                                <SIGHTED_FILTER
                                            }
                                        }
                                        do: ->
                                            If{
                                                variable: {
                                                    name: "SIGHTED_#{ID}_finished"
                                                    not_equals: true
                                                }

                                                then: ->
                                                    Store_Side{
                                                        side: SIGHTING_SIDE
                                                        variable: "stored_sighting_side"
                                                    }

                                                    If{
                                                        have_unit: {
                                                            <SIGHTED_FILTER

                                                            filter_vision: {
                                                                side: SIGHTING_SIDE
                                                            }
                                                        }

                                                        and: {
                                                            variable: {
                                                                name: "stored_sighting_side.fog"
                                                                boolean_equals: true
                                                            }

                                                            or: {
                                                                variable: {
                                                                    name: "stored_sighting_side.shroud"
                                                                    boolean_equals: true
                                                                }
                                                            }
                                                        }

                                                        then: ->
                                                            Fire_Event{
                                                                name: "SIGHTED_#{ID}_trigger_action_WML"

                                                                primary_unit: {
                                                                    side: SIGHTING_SIDE

                                                                    filter_location: {
                                                                        filter: {
                                                                            <SIGHTED_FILTER

                                                                            not: {
                                                                                side: SIGHTING_SIDE
                                                                            }
                                                                        }

                                                                        radius: "#{(#{this_unit.max_moves + 1)"
                                                                    }
                                                                }

                                                                secondary_unit: {
                                                                    <SIGHTED_FILTER

                                                                    filter_vision: {
                                                                        side: SIGHTING_SIDE
                                                                    }
                                                                }
                                                            }

                                                            Set_Variable{
                                                                name: "SIGHTED_#{ID}_finished"
                                                                value: true
                                                            }
                                                        

                                                        else: ->
                                                            Allow_Undo{
                                                            }
                                                        
                                                    }

                                                    Clear_Variable{
                                                        name: "stored_sighting_side"
                                                    }
                                                

                                                else: ->
                                                    Allow_Undo{
                                                    }
                                                
                                            }
                                    }

                                    event: {
                                        name: "victory"
                                        do: ->
                                            Clear_Variable{
                                                name: "SIGHTED_#{ID}_finished"
                                            }
                                    }
                                }

                                ANIMATED_CAMPFIRE: (X, Y) -> {
-- Embed this at scenario toplevel, not within an event.
-- Note that it will freeze while dialogue popups are onscreen.
                                    terrain_graphics: {
                                        x: X
                                        y: Y
                                        tile: {
                                            x: 0
                                            y: 0
                                            image: {
                                                layer: 0
                                                name: "misc/fire-A[01~08].png:140"
                                            }
                                        }
                                    }
                                }

                                ANIMATED_BRAZIER: (X, Y) -> {
-- Embed this at scenario toplevel, not within an event.
-- Note that it will freeze while dialogue popups are onscreen.
                                    terrain_graphics: {
                                        x: X
                                        y: Y
                                        tile: {
                                            x: 0
                                            y: 0
                                            image: {
                                                layer: 0
-- wmlscope: start ignoring
-- FIXME: More implicit-path breakage
                                                name: "../items/brazier-lit[1~8].png:140"
-- wmlscope: stop ignoring
                                            }
                                        }
                                    }
                                }

                                MENU_IMG_TXT: (IMAGE, TEXT) -> {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 307: "&"+{IMAGE}+"="+{TEXT}#enddef

                                    MENU_IMG_TXT2: (IMAGE, FIRST_TEXT_VALUE, SECOND_TEXT_VALUE) -> {
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 310: "&"+{IMAGE}+"="+{FIRST_TEXT_VALUE}+"="+{SECOND_TEXT_VALUE}#enddef

                                        MAKE_AI_SIDE_PERSISTENT: (SIDE) -> {
--Macro to make a ai controlled side persistent.
--Needs to be placed below the side definition.
                                            side: {
                                                amend: true
                                                persistent: true
                                            }
                                        }

-- wmlindent: start ignoring
                                        FOREACH: (ARRAY_VALUE, VAR) -> {
-- Macro to begin a WML clause that iterates over an array.
                                            <VARIABLE(VAR, 0)
                                            while: {
                                                variable: {
                                                    name: VAR
                                                    less_than: Var(ARRAY_VALUE).length
                                                }
                                                do: ->
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! do closed by define at line 327

                                                    NEXT = (VAR) -> {
-- Macro to end a WML clause that iterates over an array.
                                                        set_variable: {
                                                            name: VAR
                                                            add: 1
                                                        }
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! table closed by do at line 335
err: ../attic/data/core/macros/deprecated-utils.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! table closed by while at line 336
                                                <CLEAR_VARIABLE(VAR)
                                            }
-- wmlindent: stop ignoring

-- wmlindent: opener "{FOREACH "
-- wmlindent: closer "{NEXT "

                                            DRAKE_FLYING_ANIM = (STANDING_IMAGE, FLYING_IMAGE) -> {
                                                standing_anim: {
                                                    start_time: 0
                                                    filter: {
                                                        filter_location: {
                                                            terrain_type: {"!", "W*", "Qx*", "Ql*"}
                                                            or: {
                                                                terrain_type: {"Wwf", "Wwr", "*^V*"}
                                                            }
                                                        }
                                                    }
                                                    frame: {
                                                        image: "#{STANDING_IMAGE}:150"
                                                    }
                                                }

                                                standing_anim: {
                                                    start_time: 0
                                                    layer: 60
                                                    submerge: 0.01
                                                    filter: {
                                                        filter_location: {
                                                            terrain_type: {"W*", "Qx*", "Ql*"}
                                                            not: {
                                                                terrain_type: {"Wwf", "Wwr", "*^V*"}
                                                            }
                                                        }
                                                    }
                                                    frame: {
                                                        image: "#{FLYING_IMAGE}:150"
                                                    }
                                                }
                                            }

                                            SOUND.SLOW = () -> {
-- This was used to play a sound when slowing a unit, it had to
-- be placed inside an attack animation. Now this sound is played
-- automatically, there is no other use for this macro.
                                                }true

                                                SOUND.POISON = () -> {
-- This was used to play a sound when poisoning a unit, it had to
-- be placed inside an attack animation. Now this sound is played
-- automatically, there is no other use for this macro.
                                                    }true

                                                    NO_INTERRUPT_NO_UNDO = () -> {
-- This can be used in mid-movement events (enter_hex and exit_hex) to cause
-- no interruption of movement, yet prevent the move from being undone.
                                                        <DEPRECATE_ACTION_MACRO("NO_INTERRUPT_NO_UNDO", 3, "1.16", "")
                                                    }
