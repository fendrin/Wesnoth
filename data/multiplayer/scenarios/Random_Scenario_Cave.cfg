#textdomain wesnoth-multiplayer

#define CLEAR_TERRAINS
Rb,Rb,Rb,Rb,Rb,Rb,Rb,Rb^Uf,Rb^Ii,Sm,Sm,Uue,Rb^Fetd,Rb^Fdw#enddef

#define ROAD_COSTS
	[road_cost]
		terrain=Rb
		cost=2
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Rb^Uf
		cost=20
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Rb^Fdw
		cost=20
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Uue
		cost=10
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Rb^Ii
		cost=2
		convert_to=Ur^Ii
	[/road_cost]
	[road_cost]
		terrain=Uue
		cost=50
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Sm
		cost=75
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Rb^Fetd
		cost=75
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Rb^Fdw
		cost=75
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Wwg
		cost=100
		convert_to_bridge=Wwg^Bw|,Wwg^Bw/,Wwg^Bw\
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Ur
		cost=2
		convert_to=Ur
	[/road_cost]
	[road_cost]
		terrain=Ur^Ii
		cost=2
		convert_to=Ur^Ii
	[/road_cost]
	[road_cost]
		terrain=Rb^Vu
		cost=5
		convert_to=Ur^Vu
	[/road_cost]
	[road_cost]
		terrain=Rb^Vud
		cost=5
		convert_to=Ur^Vud
	[/road_cost]
	[road_cost]
		terrain=Uue^Vud
		cost=55
		convert_to=Ur^Vud
	[/road_cost]
	# We don't want to carve a new tunnel now,
	# so give walls a ridiculously high cost.
	[road_cost]
		terrain=Xue
		cost=1000
		convert_to=Uue
	[/road_cost]
#enddef

#define PLAYER_CHAMBER NUMBER X Y REL
	[chamber]
		id=player_{NUMBER}
		require_player={NUMBER}
		x={X}
		y={Y}
		relative_to={REL}
		size=5
		jagged=2
		[item_location]
			id={NUMBER}
			place_castle=yes
		[/item_location]
		[items]
			[side]
				side={NUMBER}
			[/side]
		[/items]
		[passage]
			destination=central_chamber
			windiness=3
			laziness=2
			jagged=3
			width=3
			terrain_clear={CLEAR_TERRAINS}
			place_villages=yes
		[/passage]
		[passage]
			ignore=no
			destination=central_chamber
			windiness=2
			jagged=2
			width=2
			{ROAD_COSTS}
		[/passage]
	[/chamber]
#enddef

#define MAP_OPTION_CONTROL ID LABEL TYPE WML
[row]
	[column]
		grow_factor=0
		horizontal_grow=true
		border=all
		border_size=5
		[label]
			definition=default
			label={LABEL}
			text_alignment=right
		[/label]
	[/column]
	[column]
		grow_factor=1
		horizontal_grow=true
		border=all
		border_size=10
		[{TYPE}]
			id={ID}
			{WML}
		[/{TYPE}]
	[/column]
	[column]
		grow_factor=0
		horizontal_grow=true
		border=all
		border_size=5
		# This is basically the expansion of the GUI_FORCE_WIDGET_MINIMUM_SIZE macro
		# That macro is not available here, as it's defined in the GUI2 scope
		# whereas we're in the game config scope.
		[stacked_widget]
			definition=default
			[layer]
				[row]
					grow_factor=1
					[column]
						grow_factor=1
						horizontal_grow=true
						vertical_grow=true
						[spacer]
							definition=default
							width=100
							height=0
						[/spacer]
					[/column]
				[/row]
			[/layer]
			[layer]
				[row]
					grow_factor = 1
					[column]
						grow_factor = 1
						horizontal_grow = true
						vertical_grow = true
						[label]
							id={ID}_label
							definition=default
						[/label]
					[/column]
				[/row]
			[/layer]
		[/stacked_widget]
	[/column]
[/row]
#enddef

[multiplayer]
    # This id is currently hardcoded by the random map generator of the editor
    id=multiplayer_Random_Map_Cave
    name= _ "Random map (Cave)"
    description= _ "A random map set in a cave. Note: random maps are often unbalanced, but if you have time, you can regenerate them until you get a good one."
    scenario_generation=lua
    [generator]
        id="cavegen"
        config_name="Lua Cave Generator"
        create_scenario=<<
        	return wesnoth.require("lua/cave_map_generator.lua").generate_scenario(...)
        >>
		user_config=<<
			local params = ...

			local function players_changed()
				params.nplayers = wesnoth.get_dialog_value("players")
				wesnoth.set_dialog_value(params.nplayers, "players_label")
			end

			local function width_changed()
				params.map_width = wesnoth.get_dialog_value("width")
				wesnoth.set_dialog_value(params.map_width, "width_label")
			end

			local function height_changed()
				params.map_height = wesnoth.get_dialog_value("height")
				wesnoth.set_dialog_value(params.map_height, "height_label")
			end

			local function density_changed()
				params.village_density = wesnoth.get_dialog_value("village_density")
				-- Need wesnoth-lib for the village density label
				local _ = wesnoth.textdomain "wesnoth-lib"
				local label = wesnoth.format(_"$villages/1000 tiles", {villages = params.village_density})
				wesnoth.set_dialog_value(label, "village_density_label")
			end

			local function jagged_changed()
				-- We're setting the value, so wml.get_child and co won't work
				-- However they do return the all-children index of the child
				local __, i = wml.get_nth_child(params, "chamber", 1)
				params[i][2].jagged = wesnoth.get_dialog_value("jagged")
				wesnoth.set_dialog_value(params[i][2].jagged, "jagged_label")
			end

			local function lake_size_changed()
				-- We're setting the value, so wml.get_child and co won't work
				-- However they do return the all-children index of the child
				local __, i = wml.get_nth_child(params, "chamber", 2)
				params[i][2].size = wesnoth.get_dialog_value("lake_size")
				wesnoth.set_dialog_value(params[i][2].size, "lake_size_label")
			end

			local function windiness_changed()
				-- We're setting the value, so wml.get_child and co won't work
				-- However they do return the all-children index of the child
				local __, i = wml.get_nth_child(params, "chamber", 3)
				local val = wesnoth.get_dialog_value("windiness")
				for j = i, #params do
					if params[i][1] == "chamber" then
						local __, k = wml.get_nth_child(params[i][2], "passage", 1)
						params[i][2][k][2].windiness = val
					end
				end
				wesnoth.set_dialog_value(val, "windiness_label")
			end

			local function roads_toggled()
				-- We're setting the value, so wml.get_child and co won't work
				-- However they do return the all-children index of the child
				local __, i = wml.get_nth_child(params, "chamber", 3)
				local val = not wesnoth.get_dialog_value("roads")
				for j = i, #params do
					if params[i][1] == "chamber" then
						local __, k = wml.get_nth_child(params[i][2], "passage", 2)
						params[i][2][k][2].ignore = val
					end
				end
			end

			local function pre_show()
				wesnoth.set_dialog_value(params.nplayers, "players")
				wesnoth.set_dialog_value(params.map_width, "width")
				wesnoth.set_dialog_value(params.map_height, "height")
				wesnoth.set_dialog_value(params.village_density, "village_density")
				wesnoth.set_dialog_value(wml.get_nth_child(params, "chamber", 1).jagged, "jagged")
				wesnoth.set_dialog_value(wml.get_nth_child(params, "chamber", 2).size, "lake_size")

				local first_player = wml.get_nth_child(params, "chamber", 3)
				local windiness = wml.get_nth_child(first_player, "passage", 1).windiness
				wesnoth.set_dialog_value(windiness, "windiness")

				local roads = not wml.get_nth_child(first_player, "passage", 2).ignore
				wesnoth.set_dialog_value(roads, "roads")

				-- Callbacks...
				wesnoth.set_dialog_callback(players_changed, "players")
				wesnoth.set_dialog_callback(width_changed, "width")
				wesnoth.set_dialog_callback(height_changed, "height")
				wesnoth.set_dialog_callback(density_changed, "village_density")
				wesnoth.set_dialog_callback(jagged_changed, "jagged")
				wesnoth.set_dialog_callback(lake_size_changed, "lake_size")
				wesnoth.set_dialog_callback(windiness_changed, "windiness")
				wesnoth.set_dialog_callback(roads_toggled, "roads")

				-- Init labels
				players_changed()
				width_changed()
				height_changed()
				density_changed()
				jagged_changed()
				lake_size_changed()
				windiness_changed()
				roads_toggled()
			end

			wesnoth.show_dialog(wml.get_child(params, 'dialog'), pre_show)
			return params
		>>
        [scenario]
            name= _ "Random map (Cave)"
            id=multiplayer_Random_Map_Cave
            {DEFAULT_MUSIC_PLAYLIST}
            {DEFAULT_SCHEDULE}
        [/scenario]
        terrain_clear={CLEAR_TERRAINS}
        terrain_wall=Xue
        terrain_castle=Co
        terrain_keep=Ko
        terrain_village=Rb^Vu,Rb^Vu,Rb^Vu,Rb^Vu,Rb^Vu,Rb^Vud,Rb^Vud,Uue^Vud

        map_width=40
        map_height=40
        village_density=25
        nplayers=4

        [chamber]
            id=central_chamber
            x=14..26
            y=14..26
            size=20
            jagged=30
        [/chamber]
        [chamber]
            id=lake
            x=14..26
            y=14..26
            size=5
            jagged=12
            terrain_clear=Wwg
        [/chamber]
        {PLAYER_CHAMBER 1 3..10 3..10 top-left}
        {PLAYER_CHAMBER 2 3..10 3..10 bottom-right}
        {PLAYER_CHAMBER 3 3..10 3..10 bottom-left}
        {PLAYER_CHAMBER 4 3..10 3..10 top-right}
        {PLAYER_CHAMBER 5 3..10 3..10 top-middle}
        {PLAYER_CHAMBER 6 3..10 3..10 bottom-middle}
        {PLAYER_CHAMBER 7 3..10 3..10 middle-left}
        {PLAYER_CHAMBER 8 3..10 3..10 middle-right}

		# This section is not used by the generator
		# Instead, it's used by the user config script as GUI2 [resolution] WML.
		[dialog]
			definition = "default"
			automatic_placement = true
			vertical_placement = "center"
			horizontal_placement = "center"
			maximum_height = 600
			[tooltip]
				id=tooltip
			[/tooltip]
			[helptip]
				id=tooltip
			[/helptip]
			#textdomain wesnoth-lib
			[grid]
				[row]
					grow_factor=0
					[column]
						grow_factor=1
						border=all
						border_size=5
						horizontal_alignment=left
						[label]
							definition=title
							label=_"Map Generator Settings"
						[/label]
					[/column]
				[/row]
				[row]
					grow_factor=1
					[column]
						horizontal_grow=true
						vertical_grow=true
						[grid]
							{MAP_OPTION_CONTROL players _"Players:" slider (
								definition=minimal
								minimum_value=2
								maximum_value=8
								step_size=1
							)}
							{MAP_OPTION_CONTROL width _"Width:" slider (
								definition=minimal
								minimum_value=20
								maximum_value=100
								step_size=1
							)}
							{MAP_OPTION_CONTROL height _"Height:" slider (
								definition=minimal
								minimum_value=20
								maximum_value=100
								step_size=1
							)}
							{MAP_OPTION_CONTROL village_density _"Villages:" slider (
								definition=minimal
								minimum_value=0
								maximum_value=50
								step_size=1
							)}
							#textdomain wesnoth-multiplayer
							{MAP_OPTION_CONTROL jagged _"Chamber Jaggedness:" slider (
								definition=minimal
								minimum_value=10
								maximum_value=50
								step_size=5
							)}
							{MAP_OPTION_CONTROL lake_size _"Lake Size:" slider (
								definition=minimal
								minimum_value=5
								maximum_value=50
								step_size=5
							)}
							{MAP_OPTION_CONTROL windiness _"Passage Windiness:" slider (
								definition=minimal
								minimum_value=1
								maximum_value=20
								step_size=1
							)}
							#textdomain wesnoth-lib
							{MAP_OPTION_CONTROL roads "" toggle_button (
								definition=checkbox
								label=_"Roads Between Castles"
							)}
						[/grid]
					[/column]
				[/row]
				[row]
					grow_factor=0
					[column]
						border=all
						border_size=5
						horizontal_alignment=right
						#textdomain wesnoth-lib
						[button]
							definition=default
							id=ok
							label=_"Close"
						[/button]
					[/column]
				[/row]
			[/grid]
		[/dialog]
    [/generator]
[/multiplayer]

#undef CLEAR_TERRAINS
#undef ROAD_COSTS
#undef PLAYER_CHAMBER
#undef MAP_OPTION_CONTROL
