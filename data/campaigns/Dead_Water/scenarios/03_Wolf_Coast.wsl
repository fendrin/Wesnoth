--textdomain wesnoth-dw

-- This is a fairly easy level to give you a break. Go north, then lure
-- wolves into the water where you can pick them off. You really should
-- get a second healer leveled up here if you haven't yet. Netcasters
-- and enchantresses are probably you next priorities. You'll want a
-- bunch of both. There is a storm trident in the south-east. I would
-- give it to a fighter. They are not very useful in this campaign, but
-- they have a lot of hitpoints, so they can stay alive well. The
-- trident will help him level quickly.

Scenario{
    name: _ "Wolf Coast"
    map: "campaigns/Dead_Water/maps/Wolf_Coast.map"

    id: "03_Wolf_Coast"
    next_scenario: "04_Slavers"
    story: {
        part: {
            <DW_BIGMAP!
            story: _ "Distrustful of the open ocean, Kai Krellis led his people up the coast."
        }

        part: {
            <DW_BIGMAP!
            story: _ "They had only just begun their trek when they encountered wolves who had gotten wind of the battle. Many of the wolves were ridden by goblins. The orcs of Tirigaz, chastened by Kai Laudiss’s victory, might have decided not to bother the merfolk, but these goblins were bandits and outcasts even to their own kind."
        }
    }

    <DW_TRACK(JOURNEY_03_NEW!)

    <DEFAULT_SCHEDULE!
    <TURNS4(18, 17, 16, 16)

    item: {
        x: 20
        y: 17
        image: "items/storm-trident-buried.png"
    }

    side: {
        <SIDE_1!
        <GOLD4(100, 100, 90, 80)
    }

    <STARTING_VILLAGES(1, 6)

    event: {
        name: "prestart"
        do: ->
            Music{
                name: "traveling_minstrels.ogg"
            }
            Music{
                name: "knolls.ogg"
                append: true
            }

-- wmllint: who RECALL_LOYAL_UNITS is Friendly Bat, Undead Bat, Fearsome Bat
            RECALL_LOYAL_UNITS!

            Objectives{
                side: 1
                objective: {
                    description: _ "Defeat enemy leader"
                    condition: "win"
                }

                <HOW_TO_LOSE!

                gold_carryover: {
                    bonus: true
                    carryover_percentage: 40
                }
            }
    }

    side: {
        side: 2
        controller: "ai"
        user_team_name: _ "Wolf Riders"
        team_name: "bad guys"

        id: "Gashnok"
        name: _ "Gashnok"
        canrecruit: true

        <if EASY then {
            type: "Goblin Knight"
            recruit: {"Wolf Rider", "Goblin Knight"}
        }

        <if NORMAL then {
            type: "Goblin Knight"
            recruit: {"Wolf Rider", "Goblin Knight", "Goblin Pillager"}
        }

        <if HARD then {
            type: "Direwolf Rider"
            recruit: {"Wolf Rider", "Goblin Knight", "Goblin Pillager"}
        }

        <if NIGHTMARE then {
            type: "Direwolf Rider"
            recruit: {"Wolf Rider", "Goblin Knight", "Goblin Pillager"}
        }

        ai: {
            goal: {
                name: "target"
                criteria: {
                    race: "monster"
                }
                value: 0
            }
            goal: {
                name: "target"
                criteria: {
                    race: "merman"
                }
                value: 100
            }
            recruitment_pattern: "scout, scout"
            village_value: 0
        }
-- For some reason, the leader tends to go on a little
-- walkabout before recruiting anything. This [ai] tag keeps
-- him home until he's recruited for a couple rounds.
        ai: {
            turns: "1-4"
            passive_leader: true
        }

        <GOLD4(200, 250, 300, 350)
        <INCOME4(2, 6, 10, 14)
        <FLAG_VARIANT6("ragged")
    }

    side: {
        side: 3
        controller: "ai"
        no_leader: true
        user_team_name: _ "Wild Wolves"
        ai: {
            goal: {
                name: "target"
                criteria: {
                    race: "merman"
                }
                value: 100
            }
            goal: {
                name: "target"
                criteria: {
                    race: "goblin"
                }
                value: 0
            }
        }
    }

    event: {
        name: "prestart"
        do: ->
            Unit{
                type: "Wolf"
                x: 20
                y: 24
                side: 3
            }
            Unit{
                type: "Wolf"
                x: 20
                y: 25
                side: 3
            }
    }

    <LIMIT_CONTEMPORANEOUS_RECRUITS(2, "Goblin Knight", 3)

    <if NORMAL then {
        <LIMIT_CONTEMPORANEOUS_RECRUITS(2, "Goblin Pillager", 2)
    }

    <if HARD then {
        <LIMIT_CONTEMPORANEOUS_RECRUITS(2, "Goblin Pillager", 3)
    }

    <if NIGHTMARE then {
        <LIMIT_CONTEMPORANEOUS_RECRUITS(2, "Goblin Pillager", 4)
    }

    event: {
        name: "prestart"
        do: ->
            Unit{
                type: "Goblin Knight"
                x: 15
                y: 5
                side: 2
                id: "Vrunt"
                name: _ "Vrunt"
                unrenamable: true
            }
    }

    event: {
        name: "start"
        do: ->
            Message{
                speaker: "Gashnok"
                message: _ "Smells like lots of death in the south. There must be a good feast near that merman town."
            }

            Message{
                speaker: "Vrunt"
                message: _ "Let’s hope those wild wolves over there don’t get to it before we do."
            }

            Message{
                speaker: "Gashnok"
                message: _ "Hold on...It looks like a better feast is coming our way! Fresh fish, boys! Go get it."
            }

            Message{
                speaker: "Kai Krellis"
                message: _ "Beware, people!"
            }
    }

    event: {
        name: "moveto"
        first_time_only: true

        filter: {
            x: 20
            y: 17
            id: {"Friendly Bat", "Undead Bat", "Fearsome Bat"}
        }
        do: ->
            If{
                variable: {
                    name: "get_trident"
                    not_equals: "done"
                }

                then: ->
                    Message{
                        speaker: "unit"
                        message: _ "Neep, neep!"
                    }

                    Message{
                        speaker: "Kai Krellis"
                        message: _ "Someone go find out what is exciting the bat."
                    }

                    Allow_Undo{}
                
            }
    }

-- The first_time_only moveto event causes a trident *image* to
-- show up on the hex, and causes tridents to be explained. The
-- moved unit gets the option to take it.
--
-- If the unit takes it, a trident *object* is put on the hex, and
-- the unit gets it because he is standing there already.
--
-- If the unit does not take it, another moveto event is
-- added. This one is *not* first_time_only. It does pretty much
-- the same thing, but with shorter messages.
--
-- If the unit does not take the trident, an [allow_undo] is added
-- to the event.
    event: {
        name: "moveto"
        first_time_only: true

        filter: {
            x: 20
            y: 17
            side: 1
            race: "merman"
        }
        do: ->
            Message{
                speaker: "unit"
                message: _ "There is something sticking out of the mud here. Ah! I got it."
            }

            PLACE_IMAGE("items/storm-trident.png", 20, 17)

            Message{
                speaker: "Cylanna"
                message: _ "I know what that is. It’s a storm trident. It is supposed to let you control the lightning."
            }

            Message{
                speaker: "narrator"
                message: _ "The trident is 14×2, magical, ranged, with <i>fire</i> damage."
                image: "wesnoth-icon.png"
            }

            Message{
                speaker: "unit"
                option: {
                    label: _ "That sounds great! I’ll take it."
                    command: ->
                        Set_Variable{
                            name: "get_trident"
                            value: true
                        }
                    
                }
                option: {
                    label: _ "That sounds frightening. Let someone else have it."
                }
            }

            If{
                variable: {
                    name: "get_trident"
                    equals: true
                }
                then: ->
                    STORM_TRIDENT(20, 17, "trident1")
                    Set_Variable{
                        name: "get_trident"
                        value: "done"
                    }
                
                else: ->
                    Allow_Undo{}
                    Event{
                        name: "moveto"
                        first_time_only: false

                        filter: {
                            x: 20
                            y: 17
                            side: 1
                            race: "merman"
                        }
                        do: ->
                            If{
                                variable: {
                                    name: "get_trident"
                                    not_equals: "done"
                                }
                                then: ->
                                    Message{
                                        speaker: "unit"
                                        option: {
                                            label: _ "Let me have that trident. I want to control lightning!"
                                            command: ->
                                                Set_Variable{
                                                    name: "get_trident"
                                                    value: true
                                                }
                                            
                                        }
                                        option: {
                                            label: _ "I’ll just leave that trident where it is."
                                        }
                                    }
                                
                            }

                            If{
                                variable: {
                                    name: "get_trident"
                                    equals: true
                                }
                                then: ->
                                    STORM_TRIDENT(20, 17, "trident1")
                                    Set_Variable{
                                        name: "get_trident"
                                        value: "done"
                                    }
                                
                                else: ->
                                    Allow_Undo{}
                                
                            }
                    }
                
            }
    }

    event: {
        name: "enemies defeated"
        do: ->
            Clear_Variable{
                name: "get_trident"
            }

            Endlevel{
                result: "victory"
                bonus: true
                <NEW_GOLD_CARRYOVER(40)
            }
    }

    <HERO_DEATHS!
}
