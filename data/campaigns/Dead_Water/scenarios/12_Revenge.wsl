--textdomain wesnoth-dw

Scenario{
    name: _ "Revenge"
    map: "campaigns/Dead_Water/maps/Home_2.map"

    id: "12_Revenge"
    next_scenario: "13_Epilogue"

    story: {
        part: {
            <DW_BIGMAP!
            story: _ "The mission had been more difficult than Kai Krellis would have believed when he started. Finally though, the end was in sight. He had seen how priestesses could carve through masses of undead, and now he traveled with a whole contingent of them. Tyegëa was even more powerful, though as unpredictable as Cylanna had said."
        }
        part: {
            <DW_BIGMAP!
            story: _ "The tribe that had fled Jotha unable to fight returned as an army stiffened by veteran fighters and led by a warrior king. Though they were tired from their journey, weariness fell from them as they neared home. The mermen arrived during the night, and found the mouth of their bay guarded, so they headed south along the coast to some outlying villages to gather news of the invaders."
        }
    }

    <DW_TRACK(JOURNEY_12_NEW!)

    <DEFAULT_SCHEDULE_SECOND_WATCH!
    turns: -1

    side: {
        <SIDE_1!
        <GOLD4(300, 300, 300, 300)  -- I doubt this is enough to win, but there was a lot of gold on The Flaming Sword, so the player should have around 200 plus this (on normal).
    }

    side: {
        side: 2
        controller: "ai"
        user_team_name: _ "Mal-Ravanal’s Forces"
        team_name: "bad guys"
        color: "teal"
        type: "Lich"
        id: "Mal-Kevek"
        name: _ "Mal-Kevek"
        canrecruit: true

        <FLAG_VARIANT("undead")
        <GOLD4(420, 520, 640, 760)
        <INCOME4(18, 23, 26, 28)
    }

    side: {
        side: 3
        controller: "ai"
        user_team_name: _ "Mal-Ravanal’s Forces"
        team_name: "bad guys"
        color: "orange"
        type: "Necromancer"
        id: "Mel Daveth"
        name: _ "Mel Daveth"
        canrecruit: true

        <FLAG_VARIANT("undead")
        <GOLD4(320, 420, 520, 620)
        <INCOME4(12, 16, 20, 22)
        unit: {
            type: "Draug"
            x: 15, y: 4
            ai_special: "guardian"
            facing: "nw"
        }
        unit: {
            type: "Revenant"
            x: 16, y: 4
            ai_special: "guardian"
            facing: "nw"
        }
        unit: {
            type: "Draug"
            x: 18, y: 2
            ai_special: "guardian"
            facing: "nw"
        }
        unit: {
            type: "Revenant"
            x: 19, y: 3
            ai_special: "guardian"
            facing: "nw"
        }
    }

    side: {
        side: 4
        controller: "ai"
        user_team_name: _ "Mal-Ravanal’s Forces"
        team_name: "bad guys"
        color: "white"
        type: "Death Knight"
        id: "Dead Knight"
        canrecruit: true

        <FLAG_VARIANT("undead")
        <GOLD4(400, 510, 620, 680)
        <INCOME4(18, 23, 26, 28)
    }

    side: {
        side: 5
        controller: "ai"
        user_team_name: _ "Mal-Ravanal’s Forces"
        team_name: "bad guys"
        color: "purple"
        no_leader: true
        <FLAG_VARIANT("undead")

        ai: {
            village_value: 0
        }
    }
-- The following macros should not go into the turn 2 event,
-- because they contain prestart events.
-- I want more, not more powerful, units. Limit the level threes so
-- the leaders have to buy more level twos:
    <if EASY then {
        <LIMIT_RECRUITS(2, "Necrophage", 2)
        <LIMIT_RECRUITS(2, "Spectre", 3)
        <LIMIT_RECRUITS(4, "Chocobone", 2)
        <LIMIT_RECRUITS(4, "Draug", 1)
    }
    <if NORMAL then {
        <LIMIT_RECRUITS(2, "Necrophage", 2)
        <LIMIT_RECRUITS(2, "Spectre", 3)
        <LIMIT_RECRUITS(2, "Nightgaunt", 2)
        <LIMIT_RECRUITS(4, "Banebow", 3)
        <LIMIT_RECRUITS(4, "Draug", 1)
    }
    <if HARD then {
        <LIMIT_RECRUITS(2, "Necrophage", 2)
        <LIMIT_RECRUITS(2, "Spectre", 4)
        <LIMIT_RECRUITS(2, "Nightgaunt", 3)
        <LIMIT_RECRUITS(4, "Banebow", 4)
        <LIMIT_RECRUITS(4, "Draug", 1)
    }
    <if NIGHTMARE then {
        <LIMIT_RECRUITS(2, "Necrophage", 3)
        <LIMIT_RECRUITS(2, "Spectre", 4)
        <LIMIT_RECRUITS(2, "Nightgaunt", 4)
        <LIMIT_RECRUITS(4, "Banebow", 5)
        <LIMIT_RECRUITS(4, "Draug", 1)
    }

    <RECRUIT_UNIT_VARIATIONS(3, "Walking Corpse", "none,swimmer,swimmer,swimmer")
    <RECRUIT_UNIT_VARIATIONS(3, "Soulless", "none,swimmer,swimmer,swimmer")

    <RING_OF_STRENGTH_EVENTS!

--The mermen have no villages left when they return (but a few are
--still unclaimed):
    <STARTING_VILLAGES(2, 15)
    <STARTING_VILLAGES_AREA(2, 28, 24, 4)

    <STARTING_VILLAGES(3, 7)
    <STARTING_VILLAGES_AREA(3, 17, 15, 7)

    <STARTING_VILLAGES(4, 12)
    <STARTING_VILLAGES_AREA(4, 24, 1, 6)

    event: {
        name: "turn 2"

        <if EASY then {
            set_recruit: {
                side: 2
                recruit: "Ghost, Wraith, Spectre, Shadow, Ghoul, Necrophage"
            }
            set_recruit: {
                side: 3
                recruit: "Walking Corpse, Soulless, Vampire Bat, Blood Bat"
            }
            set_recruit: {
                side: 4
                recruit: "Vampire Bat, Chocobone, Skeleton, Deathblade, Draug, Skeleton Archer, Bone Shooter"
            }
        }
        <if NORMAL then {
            set_recruit: {
                side: 2
                recruit: "Ghost, Wraith, Spectre, Shadow, Nightgaunt, Necrophage"
            }
            set_recruit: {
                side: 3
                recruit: "Walking Corpse, Soulless, Vampire Bat, Blood Bat"
            }
            set_recruit: {
                side: 4
                recruit: "Vampire Bat, Chocobone, Skeleton, Deathblade, Draug, Skeleton Archer, Bone Shooter, Banebow"
            }
        }
        <if HARD then {
            set_recruit: {
                side: 2
                recruit: "Ghost, Wraith, Spectre, Shadow, Nightgaunt, Necrophage"
            }
            set_recruit: {
                side: 3
                recruit: "Walking Corpse, Soulless, Vampire Bat, Blood Bat"
            }
            set_recruit: {
                side: 4
                recruit: "Vampire Bat, Chocobone, Skeleton, Deathblade, Draug, Skeleton Archer, Bone Shooter, Banebow"
            }
        }
        <if NIGHTMARE then {
            set_recruit: {
                side: 2
                recruit: "Ghost, Wraith, Spectre, Shadow, Nightgaunt, Necrophage"
            }
            set_recruit: {
                side: 3
                recruit: "Walking Corpse, Soulless, Vampire Bat, Blood Bat"
            }
            set_recruit: {
                side: 4
                recruit: "Vampire Bat, Chocobone, Skeleton, Deathblade, Draug, Skeleton Archer, Bone Shooter, Banebow"
            }
        }
    }

    event: {
        name: "prestart"
        do: ->
            Hide_Unit{
                x: 16, y: 24
            }

            Item{
                x: 15
                y: 5
                image: "scenery/village-human-burned2.png"
            }
            Item{
                x: 15
                y: 15
                image: "scenery/village-human-burned1.png"
            }
            Item{
                x: 30
                y: 9
                image: "scenery/trash.png"
            }
            Item{
                x: 52
                y: 19
                image: "scenery/mine-abandoned.png"
            }
            Item{
                x: 14
                y: 11
                image: "items/bones.png"
            }
            Item{
                x: 51
                y: 20
                image: "items/coal.png"
            }

            Music{
                name: "breaking_the_chains.ogg"
            }
            Music{
                name: "vengeful.ogg"
                append: true
            }

            Objectives{
                side: 1
                objective: {
                    description: _ "Defeat all enemy leaders"
                    condition: "win"
                }
                objective: {
                    description: _ "Death of Kai Krellis"
                    condition: "lose"
                }

                <IS_LAST_SCENARIO!
            }

-- If one of the bad guys was killed in the second scenario,
-- show the user a different name. The internal description can
-- stay the same.
            If{
                variable: {
                    name: "MK_dead"
                    equals: true
                }

                then: ->
                    Store_Unit{
                        filter: {
                            id: "Mal-Kevek"
                        }
                        variable: "bad_guy_stored"
                        kill: true
                    }
                    Set_Variable{
                        name: "bad_guy_stored.name"
                        value: "Mal-Necross"
                    }
                    Unstore_Unit{
                        variable: "bad_guy_stored"
                    }
                
            }

            If{
                variable: {
                    name: "MD_dead"
                    equals: true
                }

                then: ->
                    Store_Unit{
                        filter: {
                            id: "Mel Daveth"
                        }
                        variable: "bad_guy_stored"
                        kill: true
                    }
                    Set_Variable{
                        name: "bad_guy_stored.name"
                        value: "Mal-Verloth"
                    }
                    Unstore_Unit{
                        variable: "bad_guy_stored"
                    }
                
            }

            Clear_Variable{
                name: "bad_guy_stored"
            }
    }

-- This event shows KK on the edge of the map for a second, moves
-- him to a village, pauses, then moves him to the castle. At the
-- village some units are spawned with some dialog.
    event: {
        name: "start"

-- Store KK so we have the type for [move_unit_fake]:
        do: ->
            Store_Unit{
                filter: {
                    id: "Kai Krellis"
                }
                variable: "KK_stored"
            }

-- Show KK at the edge of the screen: (He actually starts in
-- the castle (hidden) to make this opening more
-- configurable. It just requires one extra teleport.)
            Teleport{
                filter: {
                    id: "Kai Krellis"
                }
                x: 1, y: 14
            }
            Scroll_To{
                x: 1, y: 14
            }
            Unhide_Unit{}
            Redraw{}
            Delay{
                time: 1000
            }
            Hide_Unit{
                x: 1, y: 14
            }

-- Show the move to the village:
            Move_Unit_Fake{
                x: {2, 5}
                y: {14, 18}
                type: KK_stored.type
                side: 1
            }

-- Move KK to the village:
            Teleport{
                filter: {
                    id: "Kai Krellis"
                }
                x: 5, y: 18
            }
            Unhide_Unit{}
-- Capture the village KK did not stop in:
            Capture_Village{
                side: 1
                x: 5, y: 17
            }

-- Action at the village:
            Unit{
                side: 1
                type: "Merman Fighter"
                x: 5, y: 18
                id: "Nebthun"
                name: "Nebthun"
                experience: 6
                modifications: {
                    <TRAIT_LOYAL!
                    <TRAIT_RESILIENT!
                }
                <IS_LOYAL!
            }
            Unit{
                side: 1
                type: "Merman Hunter"
                x: 5, y: 18
                id: "Jarla"
                name: "Jarla"
                modifications: {
                    <TRAIT_LOYAL!
                    <TRAIT_INTELLIGENT!
                }
                experience: 10
                <IS_LOYAL!
            }
            Unit{
                side: 1
                type: "Merman Brawler"
                x: 5, y: 18
                id: "Tabomo"
                name: "Tabomo"
                modifications: {
                    <TRAIT_LOYAL!
                    <TRAIT_STRONG!
                }
                experience: 32
                <IS_LOYAL!
            }
            Message{
                speaker: "Nebthun"
                message: _ "Kai Krellis! You live! We thought you and your people had all been killed when Jotha fell."
            }
            Message{
                speaker: "Kai Krellis"
                message: _ "No, most of us escaped. I thought your settlements might be far enough away to escape harm, but you look as if you had seen battle."
            }
            Message{
                speaker: "Nebthun"
                message: _ "Indeed, though we have not been hard pressed. The creatures have been busy fouling the waters and making the bay more to their liking. We worry that they will soon be back to finish with us, and I fear we will not survive."
            }
            Message{
                speaker: "Kai Krellis"
                message: _ "We come prepared for battle, and have brought help. We will reclaim our home and make yours safe as well. Mal-Ravanal will pay this day."
            }
            Message{
                speaker: "Nebthun"
                message: _ "Good. We will join you. You will be impressed with how quickly Tabomo here crushes skeletons. I think we should make the ruined castle on the mainland our base. The undead cut down many trees there to make bridges, and it is much easier to move through now."
            }

-- Move KK to the keep:
            Hide_Unit{
                x: 5, y: 18
            }
            Teleport{
                filter: {
                    id: "Kai Krellis"
                }
                x: 16, y: 24
            }

-- Show the move to the keep:
            Move_Unit_Fake{
                x: {5, 16}
                y: {18, 24}
                type: KK_stored.type
                side: 1
            }

-- ...and:
            Unhide_Unit{}
-- wmllint: who RECALL_LOYAL_UNITS is Tyegea
            RECALL_LOYAL_UNITS!

            Clear_Variable{
                name: "KK_stored"
            }
    }

    event: {
        name: "turn 2"
        do: ->
            Message{
                speaker: "narrator"
                message: _ "At dawn, the mermen got a good look at their opponents."
                image: "wesnoth-icon.png"
            }

            Message{
                speaker: "Tyegea"
                message: _ "This doesn’t look too bad."
            }

            Message{
                speaker: "Kai Krellis"
                message: _ "Maybe not yet, but just wait."
            }

            Message{
                speaker: "Mel Daveth"
                message: _ "The mermen...they came back! Bring back the search parties! Call back the hordes!"
            }

            Message{
                speaker: "Mal-Kevek"
                message: _ "Just make some more, you fool. There are plenty of corpses to go around."
            }

            Message{
                speaker: "Dead Knight"
                message: _ "Uhhh."
            }

            Unit{
                type: "Blood Bat"
                side: 3
                animate: true
                x: 31, y: 9
            }
            Kill{
                x: 31, y: 9
                animate: false
            }
            Move_Unit_Fake{
                type: "Blood Bat"
                x: {31, 32}
                y: {9, 1}
                side: 3
            }
    }

    event: {
        name: "turn 4"
        do: ->
            Message{
                speaker: "Tyegea"
                message: _ "I suppose this <i>does</i> look a little overwhelming. I may enjoy it though. It can be satisfying to rain holy fire down on misbehaving spirits."
            }

            Message{
                speaker: "Gwabbo"
                message: _ "Absolutely! Bring ’em on!"
            }
    }

    event: {
        name: "turn 10"
        <if EASY then {
            set_variable: {
                name: "type_1"
                value: "Dark Adept"
            }
            set_variable: {
                name: "type_2"
                value: "Dark Adept"
            }
            set_variable: {
                name: "type_3"
                value: "Dark Sorcerer"
            }
        }
        <if NORMAL then {
            set_variable: {
                name: "type_1"
                value: "Dark Adept"
            }
            set_variable: {
                name: "type_2"
                value: "Dark Sorcerer"
            }
            set_variable: {
                name: "type_3"
                value: "Dark Sorcerer"
            }
        }
        <if HARD then {
            set_variable: {
                name: "type_1"
                value: "Dark Sorcerer"
            }
            set_variable: {
                name: "type_2"
                value: "Dark Sorcerer"
            }
            set_variable: {
                name: "type_3"
                value: "Dark Sorcerer"
            }
        }
        <if NIGHTMARE then {
            set_variable: {
                name: "type_1"
                value: "Dark Sorcerer"
            }
            set_variable: {
                name: "type_2"
                value: "Dark Sorcerer"
            }
            set_variable: {
                name: "type_3"
                value: "Necromancer"
            }
        }
        do: ->
            Move_Unit_Fake{
                type: type_3
                side: 5
                x: {23, 26}
                y: {1, 4}
            }
            Unit{
                side: 5
                type: type_3
                name: "Carallcyn"
                id: "Carallcyn"
                x: 26, y: 4
            }
            Message{
                speaker: "Carallcyn"
                message: _ "We searched up the coast for miles, and here they are!"
            }
            Unit{
                side: 5
                type: type_2
                generate_name: true
                x: 25, y: 4
            }
            Unit{
                side: 5
                type: type_1
                generate_name: true
                x: 27, y: 3
                gender: "female"
            }
            Unit{
                side: 5
                type: type_2
                generate_name: true
                x: 28, y: 2
                gender: "female"
            }
            Unit{
                side: 5
                type: type_1
                generate_name: true
                x: 29, y: 3
            }
            Unit{
                side: 5
                type: type_2
                generate_name: true
                x: 34, y: 1
            }
            unless EASY!
                Unit{
                    side: 5
                    type: type_3
                    generate_name: true
                    x: 32, y: 2
                    gender: "female"
                }
            

            Clear_Variable{
                name: "type_1"
            }
            Clear_Variable{
                name: "type_2"
            }
            Clear_Variable{
                name: "type_3"
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Tyegea"
        }
        do: ->
            Message{
                speaker: "Tyegea"
                message: _ "I was wrong. You are no grandson of <i>mine</i>!"
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Kai Krellis"
        }
        do: ->
            Message{
                speaker: "Kai Krellis"
                message: _ "I have failed my people."
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Mal-Kevek"
        }
        do: ->
            Message{
                speaker: "Mal-Kevek"
                message: _ "This is impossible!"
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Dead Knight"
        }
        do: ->
            Message{
-- wmllint: local spelling gruh
                speaker: "Dead Knight"
                message: _ "Gruh!"
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Mel Daveth"
        }
        do: ->
            Message{
-- wmllint: local spelling Rava uhh
                speaker: "Mel Daveth"
                message: _ "Save me Lord Rava...uhh!"
            }
    }

    event: {
        name: "die"
        filter: {
            id: "Mel Daveth"
        }
        do: ->
            RING_OF_STRENGTH_APPEARS!
    }

    event: {
        name: "enemies defeated"
        do: ->
            Message{
                speaker: "Kai Krellis"
                message: _ "We have retaken our home!"
            }
    }

    event: {
        name: "die"
        filter: {
            id: "Cylanna"
        }
        do: ->
            Message{
                speaker: "Kai Krellis"
                message: _ "Cylanna! I will miss you."
            }
    }

    event: {
        name: "die"
        filter: {
            id: "Tyegea"
        }
        do: ->
            Message{
                speaker: "Cylanna"
                message: _ "Tyegëa! No!"
            }
    }

    event: {
        name: "die"
        filter: {
            id: "Kai Krellis"
        }
        do: ->
            Endlevel{
                result: "defeat"
            }
    }

    event: {
        name: "moveto"

        filter: {
            x: 14
            y: 11
            side: 1
            id: "Inky"
        }
        do: ->
            Message{
                speaker: "Kai Krellis"
                message: _ "Inky has found something. Someone should check it out."
            }

            Allow_Undo{}
    }

    event: {
        name: "moveto"

        filter: {
            x: 14
            y: 11
            side: 1
            race: "bats"
        }
        do: ->
            Message{
                speaker: "unit"
                message: _ "Neep, neep!"
            }
            Message{
                speaker: "Kai Krellis"
                message: _ "Something must be there! Good bat! Someone should find out what it is."
            }

            Allow_Undo{}
    }

-- The first_time_only moveto event causes a necklace *image* to
-- show up on the hex, and causes the necklace to be explained. The
-- moved unit gets the option to take it.
--
-- If the unit takes it, a necklace *object* is put on the hex, and
-- the unit gets it because he is standing there already.
--
-- If the unit does not take it, another moveto event is
-- added. This one is *not* first_time_only. It does pretty much
-- the same thing, but with shorter messages.
--
-- If the unit does not take the necklace, an [allow_undo] is added
-- to the event.
    event: {
        name: "moveto"
        first_time_only: true

        filter: {
            x: 14
            y: 11
            side: 1
            not: {
                race: {"bats", "monster"}
            }
        }
        do: ->
            Message{
                speaker: "unit"
                message: _ "This man was wearing a necklace with a pendant on it. I’m sure the shape means something."
            }

            PLACE_IMAGE("items/ankh-necklace.png", 14, 11)

            Message{
                speaker: "Tyegea"
                message: _ "It does indeed. It is an ankh, and that pendant will strengthen your life force."
            }

            Message{
                speaker: "narrator"
                message: _ "The ankh necklace provides 70% resistance to <i>arcane</i> damage."
                image: "wesnoth-icon.png"
            }

            Message{
                speaker: "unit"
                option: {
                    label: _ "That sounds great! I’ll take it."
                    command: ->
                        Set_Variable{
                            name: "get_necklace"
                            value: true
                        }
                    
                }
                option: {
                    label: _ "It doesn’t seem to have helped its previous owner. I don’t want it."
                }
            }

            If{
                variable: {
                    name: "get_necklace"
                    equals: true
                }
                then: ->
                    ANKH_NECKLACE(14, 11, "necklace1")
                    Set_Variable{
                        name: "get_necklace"
                        value: "done"
                    }
                
                else: ->
                    Allow_Undo{}
                    Event{
                        name: "moveto"
                        first_time_only: false

                        filter: {
                            x: 14
                            y: 11
                            side: 1
                        }
                        do: ->
                            If{
                                variable: {
                                    name: "get_necklace"
                                    not_equals: "done"
                                }
                                then: ->
                                    Message{
                                        speaker: "unit"
                                        option: {
                                            label: _ "I would like my life force protected."
                                            command: ->
                                                Set_Variable{
                                                    name: "get_necklace"
                                                    value: true
                                                }
                                            
                                        }
                                        option: {
                                            label: _ "My life force feels fine as it is."
                                        }
                                    }
                                
                            }

                            If{
                                variable: {
                                    name: "get_necklace"
                                    equals: true
                                }
                                then: ->
                                    ANKH_NECKLACE(14, 11, "necklace1")
                                    Set_Variable{
                                        name: "get_necklace"
                                        value: "done"
                                    }
                                
                                else: ->
                                    Allow_Undo{}
                                
                            }
                    }
                
            }
    }
}
