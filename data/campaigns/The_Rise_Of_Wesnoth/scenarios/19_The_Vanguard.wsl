--textdomain wesnoth-trow
Scenario{
    id: "19_The_Vanguard"
    name: _ "The Vanguard"
    next_scenario: "20_Return_of_the_Fleet"
    bonus: true
    map: "campaigns/The_Rise_Of_Wesnoth/maps/19_The_Vanguard.map"

    <TURNS(41, 38, 35)
    <DEFAULT_SCHEDULE!

    <SCENARIO_MUSIC("loyalists.ogg")
    <EXTRA_SCENARIO_MUSIC("northerners.ogg")
    <EXTRA_SCENARIO_MUSIC("breaking_the_chains.ogg")
    <EXTRA_SCENARIO_MUSIC("siege_of_laurelmor.ogg")

-- No story
    <TROW_GC_TRACK(JOURNEY_19_NEW!)

    <TROW_DEATHS!

    side: {
        id: "Prince Haldric"
        name: _ "Prince Haldric"
        side: 1
        type: "Noble Commander"
        unrenamable: true
        canrecruit: true
        gold: 200
        controller: "human"
        team_name: "Haldric"
        user_team_name: _ "Refugees"
        fog: true
        <FLAG_VARIANT("loyalist")
    }

    side: {
        type: "Orcish Warlord"
        id: "Tan-Erirt"
        name: _ "Tan-Erirt"
        side: 2
        canrecruit: true
        <if EASY then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Goblin Pillager", "Goblin Knight", "Goblin Spearman"}
        }

        <if NORMAL then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Goblin Pillager", "Goblin Knight", "Orcish Slayer", "Orcish Warrior", "Goblin Spearman"}
        }

        <if HARD then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Orcish Warrior", "Goblin Knight", "Goblin Pillager", "Orcish Slayer", "Goblin Spearman", "Goblin Impaler"}
        }
        <GOLD(150, 190, 230)
        team_name: "orcs"
        user_team_name: _ "Orcs"
        ai: {
--{NO_SCOUTS}
            recruitment_pattern: {"scout", "fighter", "fighter", "mixed fighter", "archer"}
            <ATTACK_DEPTH(5, 5, 6)
        }
        ai: {
            time_of_day: {"dusk", "first_watch", "second_watch"}
            aggression: 0.75
            caution: 0.0
            grouping: false
        }
        <INCOME(2, 4, 8)
    }

    <STARTING_VILLAGES(2, 8)

    side: {
        type: "Orcish Warlord"
        id: "Tan-Gagar"
        name: _ "Tan-Gagar"
        profile: "portraits/orcs/grunt-2.png"
        side: 3
        canrecruit: true
        <if EASY then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Goblin Pillager", "Goblin Knight", "Goblin Spearman"}
        }

        <if NORMAL then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Goblin Knight", "Orcish Slayer", "Orcish Warrior", "Goblin Spearman"}
        }

        <if HARD then {
            recruit: {"Orcish Archer", "Orcish Assassin", "Orcish Grunt", "Wolf Rider", "Orcish Crossbowman", "Orcish Warrior", "Goblin Knight", "Goblin Pillager", "Orcish Slayer", "Goblin Spearman", "Goblin Impaler"}
        }
        <GOLD(150, 190, 230)
        team_name: "orcs"
        user_team_name: _ "Orcs"
        ai: {
--{NO_SCOUTS}
            recruitment_pattern: {"scout", "fighter", "fighter", "mixed fighter", "archer"}
            <ATTACK_DEPTH(5, 5, 6)
        }
        ai: {
            time_of_day: {"dusk", "first_watch", "second_watch"}
            aggression: 0.75
            caution: 0.0
            grouping: false
        }
        <INCOME(2, 4, 8)
    }

    <STARTING_VILLAGES(3, 8)

    side: {
        type: "Troll Warrior"
        id: "Thruf"
        name: _ "Thruf"
        side: 4
        canrecruit: true
        <if EASY then {
            recruit: "Troll Whelp"
        }

        <if NORMAL then {
            recruit: {"Troll Whelp", "Troll", "Troll Rocklobber"}
        }

        <if HARD then {
            recruit: {"Troll Whelp", "Troll", "Troll Warrior", "Troll Rocklobber"}
        }

        <GOLD(110, 150, 190)
        team_name: "orcs"
        user_team_name: _ "Orcs"
        ai: {
            <NO_SCOUTS!
            <if EASY then {
                recruitment_pattern: "fighter"
            } else {
                recruitment_pattern: {"fighter", "fighter", "mixed fighter"}
            }
            grouping: false
            <ATTACK_DEPTH(5, 5, 6)
        }

        <INCOME(2, 4, 8)
    }

    <STARTING_VILLAGES(4, 8)

    event: {
        name: "prestart"

-- TODO: better random locations
        do: ->
            VARIABLE_OP("xx1", "rand", "10..18")
            VARIABLE_OP("yy1", "rand", "2..6")

            PLACE_IMAGE("items/chest-plain-closed.png", xx1, yy1)

            Recall{
                id: "Lady Jessene"
            }
            Recall{
                id: "Commander Aethyr"
            }

            Remove_Object{
                id: "Prince Haldric"
                object_id: "ruby_of_fire"
            }

            Objectives{
                side: 1
                objective: {
                    description: _ "Defeat all enemy leaders"
                    condition: "win"
                }
                objective: {
                    description: _ "Death of Prince Haldric"
                    condition: "lose"
                }
                objective: {
                    description: _ "Death of Commander Aethyr"
                    condition: "lose"
                }

                <TURNS_RUN_OUT!

                gold_carryover: {
                    bonus: true
                    carryover_percentage: 40
                }
            }
    }

    event: {
        name: "start"
        do: ->
            Message{
                speaker: "narrator"
                message: _ "Haldric and his companions race across the plains to confront the resurgent orcish threat. On the eve of battle, Lady Jessene catches up with Haldric on a fog-covered plain."
                image: "wesnoth-icon.png"
            }
            Message{
                speaker: "Lady Jessene"
                message: _ "Haldric, the elves, we can’t trust them!"
            }

            Message{
                speaker: "Prince Haldric"
                message: _ "I could have told you that."
            }
            Message{
                speaker: "Lady Jessene"
                message: _ "Haldric, it’s bad. The elves are having second thoughts. They think we might be more trouble than we’re worth. We have to defeat these orcs decisively."
            }
            Message{
                speaker: "Prince Haldric"
                message: _ "That does not sound unreasonable."
            }
            Message{
                speaker: "Lady Jessene"
                message: _ "More orcs will follow after these. That ruby guarantees it. If more orcs follow us here, the elves seem content to let us fight it out. Then they said they would ‘deal with the survivors’."
            }
            Message{
                speaker: "Lady Jessene"
                message: _ "Jevyan is here... His familiar, that skull. He won’t let such a lucrative prize as the Ruby of Fire just slip away. Especially when he sees that he has the advantage."
            }
            Message{
                speaker: "Prince Haldric"
                message: _ "I have a plan. Jessene, remember that troll-hole? Here, take the Ruby of Fire, hide it in the hole."
            }
            Message{
                speaker: "Lady Jessene"
                message: _ "Haldric! What! Why?"
            }
            Message{
                speaker: "Prince Haldric"
                message: _ "Just do it."
            }
            Message{
                speaker: "Prince Haldric"
                message: _ "Commander Aethyr, did these orcs come on our ships? Did they capture the fleet we sent out?"
            }
            Message{
                speaker: "Commander Aethyr"
                message: _ "No, sir! They must have seized all remaining boats on the Green Isle. Our fleet should be returning any day now."
            }
            Message{
                speaker: "Prince Haldric"
                message: _ "We are a refugee people. We must push back their vanguard, and secure our beachhead. If they capture our ships all is lost. We will be crushed under a tide of orcs."
                image: "portraits/haldric-mad.png"
            }

            Recall{
                id: "Burin the Lost"
            }
            Recall{
                id: "Sir Ruddry"
            }
            Recall{
                id: "Sir Ladoc"
            }
            Recall{
                id: "Minister Edren"
            }

            Store_Unit{
                variable: "jessica_store"
                kill: true
                filter: {
                    id: "Lady Jessene"
                }
            }

            Message{
                speaker: "narrator"
                message: _ "Lady Jessene soon departs. In the distance a voice booms:"
                image: "wesnoth-icon.png"
            }

            Message{
                speaker: "Tan-Gagar"
                message: _ "Drop the gold where it is! We’ve paid our friends enough. There are humans about, I can smell ’em!"
            }
    }

    event: {
        name: "time over"
        do: ->
            Message{
                speaker: "Prince Haldric"
                message: _ "We have run out of time... We’ll never beat the orcs to the beach."
                image: "portraits/haldric-surprised.png"
            }
    }

    event: {
        name: "moveto"
        filter: {
            side: 1
            x: xx1
            y: yy1
        }
        do: ->
            Sound{
                name: "open-chest.wav"
            }

            Message{
                speaker: "unit"
                message: _ "I’ve found the orcs’ chest! It’s filled with gold."
            }

            Remove_Item{
                x: x1, y: y1
            }

            PLACE_IMAGE("items/chest-plain-open.png", xx1, yy1)

            if EASY
                LOOT(125, 1)
            

            if NORMAL
                LOOT(100, 1)
            

            if HARD
                LOOT(75, 1)
            
    }

-- When an enemy side has less than half of its units left, some undead
-- appear at the next turn start in a location from which they can't reach
-- any player unit in one turn.
--
-- NOTE: if you modify anything in the inner event, make extra sure you
-- handle delayed/undelayed variable substitution right!

    event: {
        name: "die"
        first_time_only: false

        filter: {
            side: {2, 3, 4}
        }

        filter_condition: {
            variable: {
                name: "side_#{unit.side}_undead_backup_triggered"
                boolean_not_equals: true
            }
        }

-- This bit tracks the highest number of units the side has had; in most
-- cases this will likely be the number of units the side has when its
-- first unit dies.
--
-- If this counter isn't perfectly accurate in every situation, it
-- shouldn't matter.
        do: ->
            Store_Unit{
                filter: {
                    side: unit.side

                    not: {
                        x: x1, y: y1
                    }
                }

                kill: false
                variable: "this_side_enemies"
            }
            If{
                variable: {
                    name: "side_#{unit.side}_top_enemy_count"
                    less_than_equal_to: this_side_enemies.length
                }

                then: ->
                    VARIABLE("side_#{unit.side}_top_enemy_count", "#{(#{this_side_enemies.length + 1)")
                
            }

            If{
                variable: {
                    name: "this_side_enemies.length"
                    less_than_equal_to: "#{(#{side_#{unit.side}_top_enemy_count / 2)"
                }

                then: ->
--{DEBUG_MSG "Side $unit.side only has $this_side_enemies.length|/$side_$unit.side|_top_enemy_count units left, triggering undead reinforcements..."}

                    VARIABLE("side_#{unit.side}_undead_backup_triggered", true)

                    Store_Starting_Location{
                        side: unit.side
                        variable: "search_center"
                    }

                    Event{
                        name: "new turn"
                        delayed_variable_substitution: false

-- This loop searches for a location which satisfies the
-- following conditions:
-- 1. Within exactly 12 hexes from any player unit
-- 2. As close as possible to the location where this unit
--    was killed, but only through G*,R*,C*,K*,S*
-- 3. Not next to any existing (enemy) unit
                        do: ->
                            VARIABLE("search_radius", 1)
                            While{
                                variable: {
                                    name: "possible_undead_locs.length"
                                    less_than: 1
                                }

                                variable: {
                                    name: "search_radius"
                                    less_than: 30
                                }

                                do: ->
                                    Store_Locations{
                                        terrain: {"!", "H*", "M*", "*^F*", "Q*"}

                                        not: {
                                            filter: {
                                            }

                                            radius: 1
                                        }

                                        not: {
                                            filter: {
                                                side: 1
                                            }

                                            radius: 11
                                        }

                                        and: {
                                            filter: {
                                                side: 1
                                            }

                                            radius: 12
                                        }

                                        and: {
                                            x: search_center.x, y: search_center.y
                                            radius: "#{}search_radius"

                                            filter_radius: {
                                                terrain: {"G*", "R*", "C*", "K*", "S*"}
                                            }
                                        }

                                        variable: "possible_undead_locs"
                                    }

                                    VARIABLE_OP("search_radius", "add", 1)
                                
                            }
                            If{
                                variable: {
                                    name: "possible_undead_locs.length"
                                    greater_than_equal_to: 1
                                }

                                then: ->
                                    VARIABLE_OP("undead_loc_i", "rand", "0..#{}(#{}possible_undead_locs.length - 1)")
                                    VARIABLE("spawn_x", "#{}possible_undead_locs[#{}undead_loc_i].x")
                                    VARIABLE("spawn_y", "#{}possible_undead_locs[#{}undead_loc_i].y")

                                    VARIABLE_OP("undead_spawns_so_far", "add", 1)

                                    Scroll_To{
                                        x: "#{}possible_undead_locs[#{}undead_loc_i].x", y: "#{}possible_undead_locs[#{}undead_loc_i].y"
                                    }

--{DEBUG_MSG "spawning at $|spawn_x|,$|spawn_y"}

                                    Switch{
                                        variable: "undead_spawns_so_far"

                                        case: {
                                            value: 1
                                            do: ->
                                                NAMED_LOYAL_UNIT(unit.side, "Deathblade", "#{}spawn_x", "#{}spawn_y", "Norte", _ "Norte")

                                                LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                unless EASY!
                                                    LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                

                                                CLEAR_FOG(1, "#{}possible_undead_locs[#{}undead_loc_i].x", "#{}possible_undead_locs[#{}undead_loc_i].y", 2)

                                                Message{
                                                    speaker: "Norte"
                                                    message: _ "You will be felled by my hand, useless fleshbags!"
                                                }
                                        }

                                        case: {
                                            value: 2
                                            do: ->
                                                NAMED_LOYAL_UNIT(unit.side, "Banebow", "#{}spawn_x", "#{}spawn_y", "Rabbin", _ "Rabbin")

                                                LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                if HARD
                                                    LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                

                                                CLEAR_FOG(1, "#{}possible_undead_locs[#{}undead_loc_i].x", "#{}possible_undead_locs[#{}undead_loc_i].y", 2)

                                                Message{
                                                    speaker: "Rabbin"
                                                    message: _ "Embrace your end, mortals!"
                                                }

                                                Message{
                                                    speaker: "Burin the Lost"
                                                    message: _ "These monsters seem like they want to be embraced by my hammer!"
                                                }
                                        }

                                        case: {
                                            value: 3
                                            do: ->
                                                NAMED_LOYAL_UNIT(unit.side, "Draug", "#{}spawn_x", "#{}spawn_y", "General Kafka", _ "General Kafka")

                                                LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                if HARD
                                                    LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                    LOYAL_UNIT(unit.side, "Chocobone", "#{}spawn_x", "#{}spawn_y")
                                                

                                                CLEAR_FOG(1, "#{}possible_undead_locs[#{}undead_loc_i].x", "#{}possible_undead_locs[#{}undead_loc_i].y", 2)

                                                Message{
                                                    speaker: "General Kafka"
                                                    message: _ "Never trust the living to do the job of the undead. Prepare to meet the inevitable!"
                                                }

                                                Message{
                                                    speaker: "Minister Edren"
                                                    message: _ "The only job of the dead is to remain dead. Prepare to be reunited with the ground."
                                                }
                                        }
                                    }

                                    UNCLEAR_FOG!

                                    CLEAR_VARIABLE("undead_loc_i,spawn_x,spawn_y")
                                

--[else]
-- Player got lucky, no good spawn location was found
--[/else]
                            }

                            CLEAR_VARIABLE("search_radius,possible_undead_locs")
                    }

                    CLEAR_VARIABLE("side_#{unit.side}_top_enemy_count")
                

--[else]
--    {DEBUG_MSG "Side $unit.side has $this_side_enemies.length|/$side_$unit.side|_top_enemy_count units left... Needs to be less or equal to $($side_$unit.side|_top_enemy_count / 2) for reinforcements."}
--[/else]
            }

            CLEAR_VARIABLE("this_side_enemies,search_center")
    }

    event: {
        name: "die"
        filter: {
            id: "Tan-Erirt"
        }

        filter_second: {
            side: 1
        }
        do: ->
            Message{
                speaker: "Tan-Gagar"
                message: _ "We must block the human advance!"
            }

            Gold{
                side: 3
                amount: 80
            }
    }

    event: {
        name: "die"
        filter: {
            id: "Tan-Gagar"
        }

        filter_second: {
            side: 1
        }
        do: ->
            Message{
                speaker: "Tan-Erirt"
                message: _ "Reserves! We can’t let them get to their landing site."
            }

            Gold{
                side: 2
                amount: 80
            }
    }

    event: {
        name: "enemies defeated"
        do: ->
            Message{
                speaker: "Prince Haldric"
                message: _ "We’ve defeated their vanguard. We have to meet the fleet before Jevyan destroys them and captures the ships. I hope Jessene makes it back soon."
            }

            CLEAR_VARIABLE("side_2_undead_backup_triggered,side_3_undead_backup_triggered,side_4_undead_backup_triggered,undead_spawns_so_far")

            Endlevel{
                result: "victory"
                bonus: true
                <NEW_GOLD_CARRYOVER(40)
            }
    }

    event: {
        name: "last breath"
        filter: {
            id: "Commander Aethyr"
        }
        do: ->
            Message{
                speaker: "Commander Aethyr"
                message: _ "Oh, to join my family again! Do not mourn my passing."
            }

            Endlevel{
                result: "defeat"
            }
    }

    event: {
        name: "attack"
        filter: {
            id: "Burin the Lost"
        }
        do: ->
            Message{
                speaker: "Burin the Lost"
                message: _ "Ahh, it’s great to be home! I’m not much for the politics, but it’s great to be home!"
            }
    }
}
