--textdomain wesnoth-sota

-- Liches are now available to the player. All the stored units from the DA line need to
-- have that option added to their unit trees. Since all dark sorcerers have been leveling
-- into necromancers until this point, a menu option is included to turn them into liches
-- too.

-- The spiders nearest to the player start with no movement points, and get one added
-- each turn for the first few turns. That keeps the spiders from swarming the player
-- immediately, and lets the battle happen in the middle of the map. For difficulty
-- levels other than hard, a few changes are made to the map that make the scenario
-- a bit easier.

-- The spiderweb terrain can be applied anywhere, but will be invisible if it is not used
-- with specific shapes of corners or chasms. This limited the amount of artwork needed.

Scenario{
    name: _ "Abandoned Outpost"
    map: "campaigns/Secrets_of_the_Ancients/maps/18_Abandoned_Outpost.map"

    id: "18_Abandoned_Outpost"
    next_scenario: "19_Lava_and_Stone"
    victory_when_enemies_defeated: false

    story: {
        part: {
            background_layer: {
                image: "story/book.png"
                scale: false
            }
            story: _ "9 VI, 23 YW

To become a lich, one must first die. The spells of necromancy bind the spirit, but only once it has been unbound from the body. To become a lich, the mage must make the necessary incantations with his dying breaths. He thus binds his own spirit in much the same way he binds the spirits of others.... An altar serves to hold his soul in the physical plane long enough to make the transition, and a suitable object must be found to hold the consciousness for one crucial moment when the body expires."
        }
        part: {
            background_layer: {
                image: "portraits/undead/lich.png"
                scale: false
            }
            story: _ "13 VI, 23 YW

So, Ras-Tabahn is now undead. In the beginning, his health was not much improved, and he complained of being cold. His life force was weak, but he was able to absorb life from the rats infesting the ancient castle. Now he is more strong and vigorous than I have ever seen him. This is despite the fact that his flesh is starting to rot away, a process that causes him no discomfort. Nor can he smell it any more than I can. If all continues to go well, I will make the transition soon myself."
        }
        part: {
            background_layer: {
                image: "portraits/ardonna-lich.png"
                scale: false
            }
            story: _ "17 VI, 23 YW

Now the process is complete for both of us. I posted a guard so nothing could happen to me in my weakened state, and nothing did. I am restored. I don’t feel much different, but I suppose I look a fright. Ah well, it can’t be helped. But my primary goal is achieved! I cannot die! I suppose I could be broken apart like a skeleton or maybe burned, but I do not have to fear these unlikely events: I have the awesome powers of the spirit realm flowing through me, and can protect myself quite adequately! My next goal is to share my knowledge with the world so that <i>no one</i> need die."
        }
    }

    <UNDERGROUND!
    <DEFAULT_MUSIC_PLAYLIST!
    <TURNS(32, 29, 25)

    side: {
        <SIDE_1_BOTH!
        <GOLD(230, 190, 110)
        shroud: true
    }

    side: {
        side: 2
        controller: "ai"
        user_team_name: _ "Spiders"
        team_name: "bad"
        no_leader: true
        gold: 0
        hidden: true
    }

-- *************************** PRESTART ***************************
    event: {
        name: "prestart"
        do: ->
            Objectives{
                side: 1
                objective: {
                    description: _ "Move Ardryn-Na and Ras-Tabahn to the west end of the cave"
                    condition: "win"
                }
                <ALTERNATIVE_OBJECTIVE(_ "Kill every enemy unit")

                <HOW_TO_LOSE_WITH_BOTH!

                gold_carryover: {
                    bonus: true
                    carryover_percentage: 40
                }

                note: {
                    description: _ "To turn a necromancer into a lich, right-click on it while it is in a castle."
                }
            }

-- There is now a menu option to turn necromancers into liches.
            Set_Menu_Item{
                id: "lichify"
                description: _ "Make Into a Lich"
                image: "units/icons/icon-lich.png"
                show_if: {
                    have_unit: {
                        x: x1
                        y: y1
                        side: 1
                        type: {"Necromancer", "Necromancer SotA"}
                    }
                }
                command: ->
                    If{
                        have_location: {
                            x: x1
                            y: y1
                            terrain: {"C*^*", "K*^*", "*^K*", "*^C*"}  -- castles and keeps
                        }
                        then: ->
                            Fire_Event{
                                name: "lichify"  -- See: sota-utils.cfg
                                primary_unit: {
                                    x: x1
                                    y: y1
                                }
                            }
                        
                        else: ->
                            Message{
                                speaker: "narrator"
                                image: "logo.png"
                                message: _ "You can only do this in a castle."
                            }
                        
                    }
                
            }

-- From now on, newly recruited DAs need to be able to eventually advance to
-- liches like normal. We will stop using the custom units in the recruit list.
            Disallow_Recruit{
                side: 1
                type: "Dark Adept SotA"
            }
            Allow_Recruit{
                side: 1
                type: "Dark Adept"
            }

-- This section changes all *existing* units so that they have liches in their
-- advancement trees. As of 1.12 at least, [modify_unit] doesn't apply to
-- the recall list, so we have to do it the long way.
            Store_Unit{
                filter: {
                    type: {"Dark Adept SotA", "Dark Sorcerer SotA"}
                }
                variable: "DA"  -- Even though it might actually be a DS.
            }

            For{
                array: "DA"
                variable: "i"
                do: ->
                    If{
                        variable: {
                            name: "DA[i].type"
                            equals: "Dark Adept SotA"
                        }
                        then: ->
                            Set_Variable{
-- Custom DA's will advance to normal dark sorcerers
-- which will fix them.
                                name: "DA[i].advances_to"
                                value: "Dark Sorcerer"
                            }
                        
                        else: ->
                            Set_Variable{
-- Custom DS's just get the other advancement added.
                                name: "DA[i].advances_to"
                                value: {"Necromancer", "Lich"}
                            }
                        
                    }
                    Unstore_Unit{
                        variable: "DA[#{i]"
                    }
                
            }

            Clear_Variable{
                name: "DA"
            }

-- We need to change all existing bats to normal types instead of SotA types
-- so they are drawn above terrains. SotA bats were necessary for the ship
-- where they were drawn behind the rigging, but for the spiderwebs in this
-- scenario, normal bats look a lot better. First, we'll make sure newly
-- recruited ones will be correct:
            Disallow_Recruit{
                side: 1
                type: "Vampire Bat SotA"
            }
            Allow_Recruit{
                side: 1
                type: "Vampire Bat"
            }

-- Now, all the bats on the recall list get copied, except for the type.
            Store_Unit{
                filter: {
                    type: {"Vampire Bat SotA", "Blood Bat SotA", "Dread Bat SotA"}
                }
                variable: "bats"
                kill: true
            }

            For{
                array: "bats"
                variable: "i"
                do: ->
-- Get the new type:
                    Switch{
                        variable: "bats[i].type"
                        case: {
                            value: "Vampire Bat SotA"
                            do: ->
                                Set_Variable{
                                    name: "new_type"
                                    value: "Vampire Bat"
                                }
                        }
                        case: {
                            value: "Blood Bat SotA"
                            do: ->
                                Set_Variable{
                                    name: "new_type"
                                    value: "Blood Bat"
                                }
                        }
                        case: {
                            value: "Dread Bat SotA"
                            do: ->
                                Set_Variable{
                                    name: "new_type"
                                    value: "Dread Bat"
                                }
                        }
                    }

-- Create a new bat with the same attributes as the old one:
                    Unit{
                        type: new_type
                        max_experience: bats[i].max_experience
                        max_hitpoints: bats[i].max_hitpoints
                        experience: bats[i].experience
                        name: bats[i].name
                        id: bats[i].id
                        side: 1
                        placement: "recall"  -- The only place they can be at the moment.
                        modifications: {
                            insert_tag: {
                                name: "trait"
                                variable: "bats[i].modifications.trait[1]"
                            }
                            insert_tag: {
                                name: "trait"
                                variable: "bats[i].modifications.trait[2]"
                            }
                        }
                    }
                
            }

            Clear_Variable{
                name: {"bats", "new_type"}
            }

            unless HARD!
                Terrain{
                    x: 28, y: 7
                    terrain: "Xu"
                }
                Terrain{
                    x: 25
                    y: "10-11"
                    terrain: "Rb"
                }
                Terrain{
                    x: 32, y: 7
                    terrain: "Qxu"
                }
            

-- The value of spider_number is *not* the number of spiders, but this variable does
-- help determine how many spiders get placed. See the repeats below.
            if EASY
                Set_Variable{
                    name: "spider_number"
                    value: 4
                }
            
            if NORMAL
                Set_Variable{
                    name: "spider_number"
                    value: 5
                }
            
            if HARD
                Set_Variable{
                    name: "spider_number"
                    value: 6
                }
            

            Repeat{
                times: "#{(#{spider_number+5)"
                do: ->
                    Unit{
                        x: 23, y: 7
                        type: "Giant Spider"
                        side: 2
                        placement: "map_passable"
                    }
                
            }

            Repeat{
                times: 5
                do: ->
                    Unit{
                        x: 9, y: 8
                        type: "Giant Spider"
                        side: 2
                        placement: "map_passable"
                        ai_special: "guardian"
                    }
                
            }
            Repeat{
                times: spider_number
                do: ->
                    Unit{
                        x: 9, y: 10
                        type: "Giant Spider"
                        side: 2
                        placement: "map_passable"
                        ai_special: "guardian"
                    }
                
            }

            Clear_Variable{
                name: "spider_number"
            }

-- We aren't using the normal macro for the following recalls because it
-- doesn't specify locations, and that's important this time.
            Recall{
                id: "Ras-Tabahn"
                x: 44, y: 11
            }
            Recall{
                id: "Carcyn"
                x: 44, y: 11
            }
-- Only one Shynal will be recalled.
            Recall{
                id: "Shynal"
                x: 44, y: 11
            }
            Recall{
                id: "Corpse Shynal"
                x: 44, y: 11
            }
            Recall{
                id: "Bone Captain"
                x: 39, y: 9
            }
            Recall{
                id: "Vendraxis"
                x: 39, y: 10
            }

-- This map is just a larger version of the previous one, and that one had
-- a lot of its shroud removed. These tags cause the same hexes to be revealed
-- on this map as well.
            Remove_Shroud{
                x: 51, y: 4
                radius: 3
            }
            Remove_Shroud{
                x: 48, y: 6
                radius: 4
            }
            Remove_Shroud{
                x: 45, y: 8
                radius: 5
            }
            Remove_Shroud{
                x: 44, y: 4
                radius: 2
            }

-- The experience of either leader could be enough to level it into an ancient
-- lich, but that won't happen automatically. Modifying a unit *does* cause it
-- to advance though, so we will modify them both just in case.
            Modify_Unit{
                filter: {
                    id: "Ardonna"
                    or: {
                        id: "Ras-Tabahn"
                    }
                }
            }

-- Update the profile in case Ardonna didn't level here.
            Fire_Event{
                name: "ardonna_profile"
            }

-- For some reason, the handling of Ardonna (and not Ras-Tabahn) causes her
-- to not have full mp at the start of the scenario, so fix that.
            Heal_Unit{
                filter: {
                    id: "Ardonna"
                }
                moves: "full"
            }

-- This image needs to look the same as the one in the previous scenario.
            Item{
                image: "items/altar-sacrifice.png~NO_TOD_SHIFT()"
                x: 45, y: 7
            }
    }

-- *************************** PLAY ***************************

-- The closest group of spiders can't be allowed to move the full amount during the first
-- turns, or they would immediately block the tunnel and make the scenario boring. We
-- need to increase their movement gradually, so we will make their movement points be
-- one less than the turn number. We change their movement points with an object instead
-- of [modify_unit] so the correct distance they can move will be visible to the player.
    CHANGE_SPIDER_MOVES: (MOVES) -> {
        store_unit: {
            filter: {
-- The far group of spiders won't move because they are guardians.
-- So, store only the closest group:
                x: "20-40"
                side: 2
            }
            variable: "spiders"
        }

        for: {
            array: "spiders"
            variable: "i"
            do: ->
                Object{
                    filter: {
                        id: spiders[i].id
                    }
                    effect: {
                        apply_to: "movement"
                        set: MOVES
                    }
                    silent: true
                    duration: "turn"
                }
            
        }

        clear_variable: {
            name: "spiders"
        }
    }

-- This event needs to happen on the refresh for *both* sides so the player can see
-- the results during their turn. This event will be removed at a later turn.
    event: {
        name: {"side 1 turn refresh", "side 2 turn refresh"}
        first_time_only: false
        id: "spider_move_restrictions"
        do: ->
            CHANGE_SPIDER_MOVES("#{(#{turn_number - 1)")
    }

    event: {
        name: "side 1 turn 5"
        do: ->
            Event{
                id: "spider_move_restrictions"
                remove: true
            }
            CHANGE_SPIDER_MOVES(6)
    }

-- This moves one leader out of the cave. If it's the first one, they get
-- refreshed and stored. If it's the second one, the scenario ends.
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            id: "Ardonna"
            x: 1, y: 10
            or: {
                id: "Ras-Tabahn"
                x: 1, y: 10
            }
        }
        do: ->
            If{
                variable: {
                    name: "leader_gone.length"
                    equals: 1
                }
                then: ->
                    Hide_Unit{
                        canrecruit: true
                    }
                    Fire_Event{
                        name: "end_scenario"
                    }
                
                else: ->
                    Heal_Unit{
                        filter: {
                            side: 1
                        }
                        amount: "full"
                        restore_statuses: true
                    }
                    Store_Unit{
                        filter: {
                            x: 1, y: 10
                        }
                        variable: "leader_gone"
                        kill: true
                    }
-- The [set_variables] are to refresh this leader since they won't
-- be on the map at the end to be refreshed automatically.
                    Set_Variables{
                        name: "leader_gone"
                        mode: "merge"
                        value: {
                            x: "recall"
                            y: "recall"
                        }
                    }
-- The leader can't be unstored to the recall list yet, or the
-- other leader would be able to recall them. We'll do it just
-- before [endlevel].
                
            }
    }

-- *************************** ENDING / OPENING ***************************
    event: {
        name: "start"
        do: ->
            Message{
                speaker: "narrator"
                image: "portraits/undead/lich.png~SCALE(93, 93)"
                message: _ "You can now advance dark sorcerers to liches! For the rest of the campaign, you can also right-click on an existing necromancer to turn it into a lich as long as it is in a castle. If the necromancer has gained enough experience, it will immediately level into an ancient lich!"
            }

            Message{
                speaker: "Ardonna"
                message: _ "We have conquered death! Let us bring the news back to Wesnoth. We should to let them know that nobody ever need die again."
            }
            Message{
                speaker: "Ras-Tabahn"
                message: _ "I was planning to go that direction myself, so I have no objection. But, let us not go over those wretched mountain passes again. These tunnels should connect to the realm of Knalga and take us there directly."
            }
            Message{
                speaker: "Ardonna"
                message: _ "Why would the Dwarvish empire abandon an outpost like this?"
            }
            Message{
                speaker: "Ras-Tabahn"
                message: _ "We may find out. We should proceed cautiously."
            }
    }

    event: {
        name: "sighted"
        filter: {
            side: 2
        }
        do: ->
            If{
                have_unit: {
                    id: "Vendraxis"
                }
                then: ->
                    Message{
                        speaker: "Vendraxis"
                        message: _ "Giant spidersss! That explainsss the cobwebsss everywhere."  --no spellcheck
                    }
                
                else: ->
                    Message{
                        speaker: "Ardonna"
                        message: _ "Giant spiders! That explains the cobwebs everywhere."
                    }
                
            }
            Message{
                speaker: "Ardonna"
                message: _ "They are not moving much. Hopefully they continue to stay sleepy."
            }
            Event{
                name: "side 2 turn 3"
                do: ->
                    Message{
                        speaker: "Shynal"
                        message: _ "They’re waking up now. Watch out."
                    }
            }
    }

    event: {
        name: "die"
        first_time_only: false
        do: ->
            If{
                not: {
                    have_unit: {
                        side: 2
                    }
                }
                then: ->
                    Fire_Event{
                        name: "end_scenario"
                    }
                
            }
    }

    event: {
        name: "end_scenario"

-- If one of the leaders left the map and is stored, bring it back now:
        do: ->
            If{
                variable: {
                    name: "leader_gone.length"
                    equals: 1
                }
                then: ->
                    Unstore_Unit{
                        variable: "leader_gone"
                    }
                    Clear_Variable{
                        name: "leader_gone"
                    }
                
            }

            Endlevel{
                result: "victory"
                bonus: true
                <NEW_GOLD_CARRYOVER(40)
            }
    }

    <TURN_INTO_A_LICH!
    <HERO_DEATHS!
    <MANAGE_PROFILE!
    <KIDS_ADVANCE!

    CHANGE_SPIDER_MOVES = nil
}
