--textdomain wesnoth-sota

-- At the end of this scenario, Ras-Tabahn and his army and gold have to be stored so they
-- can be brought back when R-T rejoins Ardonna. There is some dialog about having at
-- least 50 gold because that's probably necessary to win Entering_the_Northlands on hard.
-- EtN is the next scenario chronologically, but not the next in the game, so having to
-- come all the way back to this scenario for more gold would be annoying--hence the tip.
-- You get the ability to recruit chocobones when a unit inspects the bones of a
-- flightless bird half-buried in the sand. There is one long event for this. Almost the
-- same event appears in Mountain_Pass if the player doesn't find the bones here.

Scenario{
    name: _ "Merfolk Revenge"
    map: "campaigns/Secrets_of_the_Ancients/maps/10_Merfolk_Revenge.map"

    id: "10_Merfolk_Revenge"
    next_scenario: "11_Battleground"

    story: {
        part: {
            background_layer: {
                image: "portraits/merfolk/triton.png"
                scale: false
            }
            story: _ "Ras-Tabahnâ€™s party reached the end of the elf road near the Great River where they were to wait for Ardonna. As they arrived, another party did as well."
        }
        <JOURNEY_PART(10)
    }

    <DEFAULT_SCHEDULE!
    <DEFAULT_MUSIC_PLAYLIST!
    <TURNS(25, 26, 27)

    side: {
        <SIDE_1_RAS-TABAHN!
        <GOLD(150, 130, 110)
    }

    <STARTING_VILLAGES(2, 5)
    <STARTING_VILLAGES(1, 5)

    side: {
        side: 2
        controller: "ai"
        user_team_name: _ "Merfolk"
        type: "Merman Triton"
        name: _ "Okean"
        id: "Okean"
        recruit: {"Merman Netcaster", "Merman Fighter", "Merman Hunter", "Mermaid Initiate"}
        color: "purple"
        facing: "sw"
        <GOLD(210, 290, 370)
        <FLAG_VARIANT("long")
        ai: {
            caution: 3
            recruitment_diversity: 3.0
        }
    }

-- *************************** PRESTART ***************************
    event: {
        name: "prestart"
        do: ->
            Objectives{
                side: 1
                objective: {
                    description: _ "Defeat the enemy leader"
                    condition: "win"
                }

                <HOW_TO_LOSE_WITH_RAS-TABAHN!

                gold_carryover: {
                    bonus: true
                    carryover_percentage: 40
                }
            }

-- Only one Shynal will be recalled.
            Recall{
                id: "Shynal"
                x: 8, y: 14
            }
            Recall{
                id: "Corpse Shynal"
                x: 8, y: 14
            }
            Recall{
                id: "Carcyn"
                x: 8, y: 15
            }

            Set_Variable{
                name: "bird_bones_found"
                value: false
            }
            Item{
                x: 32, y: 12
                image: "items/bird-bones.png"
            }
    }

    event: {
        name: "start"
    }

-- *************************** PLAY ***************************

-- This long event creates a chocobone when a unit moves to where bird bones are
-- buried in the sand.
-- There is a short conversation, but there are many possibilities for which units
-- are involved, so there are a lot of ifs. There is also a lot of animation around
-- the appearance of the chocobone involving a skeleton and a flightless-bird unit.
    event: {
        name: "moveto"
        filter: {
            x: 32, y: 12
            side: 1
        }
        do: ->
            If{
                variable: {
                    name: "unit.race"
                    equals: "undead"
                }
                then: ->
-- Bones examined by a ghost, skeleton, ghoul, or corpse.
                    Message{
                        speaker: unit.id
                        message: _ "Bones. Claws and wings."
                    }
                
                else: ->
-- Bones examined by a human.
                    Message{
                        speaker: unit.id
                        message: _ "There are some large bones here. I can see claws and wings."
                    }
                
            }

-- Choose a human for Ras-Tabahn to talk to.
            Store_Unit{
                filter: {
                    race: "human"
                    x: "1-99"
                    not: {
                        id: "Ras-Tabahn"
                    }
                }
                variable: "all_other_humans"
            }
            If{
                variable: {
                    name: "all_other_humans.length"
                    greater_than: 0
                }
                then: ->
                    Set_Variable{
                        name: "other_human"
                        value: all_other_humans[1].id
                    }
                
                else: ->
                    Set_Variable{
                        name: "other_human"
                        value: "nobody"
                    }
                
            }
            Clear_Variable{
                name: "all_other_humans"
            }

            If{
                have_unit: {
                    id: other_human
                }
                then: ->
                    Message{
                        speaker: other_human
                        message: _ "How odd. I wonder what are they from. A gryphon perhaps?"
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "A large flightless bird would be my guess."
                    }
                    Message{
                        speaker: other_human
                        message: _ "Well, there is an easy way to find out."
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "Indeed. Let us see."
                    }
                
                else: ->
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "I wonder what are they from. A large flightless bird perhaps? Let us see."
                    }
                
            }

-- Remove the bones and show a resurrected bird:
            If{
                have_unit: {
                    id: "Ras-Tabahn"
                    x: 32, y: 12
                }
                then: ->
-- Since Ras-Tabahn is standing on the bones, face him toward the most likely hex for the bird to appear
                    Animate_Unit{
-- Fire the recruitment animation (actually an extra_anim):
                        filter: {
                            id: "Ras-Tabahn"
                        }
                        flag: "recruit2"
                        facing: {
                            x: 31, y: 12
                        }
                    }
                
                else: ->
                    Animate_Unit{
-- Fire the recruitment animation (actually an extra_anim):
                        filter: {
                            id: "Ras-Tabahn"
                        }
                        flag: "recruit2"
                        facing: {
                            x: 32, y: 12
                        }
                    }
                
            }
            Remove_Item{
-- Remove the bones:
                x: 32, y: 12
            }
            Unit{
-- Show the bird fading in. The engine will automatically find an empty
-- location for it.
                x: 32, y: 12
                id: "bird"
                type: "Bone Bird"
                side: 1
                facing: "se"
                animate: true
            }
            Store_Unit{
-- Store the bird so we can get its location later:
                filter: {
                    id: "bird"
                }
                variable: "bird"
            }

            Message{
                speaker: other_human
                message: _ "Oh, you were right!"
            }

            Message{
                speaker: "Ras-Tabahn"
                message: _ "I wonder if it could carry someone light. A skeleton maybe."
            }

-- Replace the bird with a Chocobone:
            Modify_Unit{
-- We're about to animate a recruit which will most likely appear to
-- Ras-Tabahn's upper left, so we'll face him that direction:
                filter: {
                    id: "Ras-Tabahn"
                }
                facing: "nw"
            }
            Animate_Unit{
-- Fire the recruitment animation (actually an extra_anim):
                filter: {
                    id: "Ras-Tabahn"
                }
                flag: "recruit2"
            }
            Unit{
-- Animate a skeleton getting recruited:
                side: 1
                animate: true
                type: "Skeleton"
                id: "rider"
                placement: "leader"
            }
            Store_Unit{
-- Remove the skeleton, but store it so we can get its location:
                filter: {
                    id: "rider"
                }
                variable: "rider"
                kill: true
            }
            Move_Unit_Fake{
-- Show a skeleton moving from where the skeleton appeared to wherever
-- the bird is:
                type: "Skeleton"
                side: 1
                x: {rider.x, bird.x}
                y: {rider.y, bird.y}
            }
            Kill{
                id: "bird"
                animate: false
            }
            Unit{
-- Now we show a joined skeleton and bird:
                x: bird.x, y: bird.y
                type: "Chocobone"
                side: 1
                animate: false
                facing: "se"
            }

            Message{
                speaker: "Ras-Tabahn"
                message: _ "Splendid! These birds could be quite useful."
            }
            Allow_Recruit{
                side: 1
                type: "Chocobone"
            }
            Message{
                speaker: "narrator"
                image: "units/undead-skeletal/chocobone.png~SCALE(93,93)"
                message: _ "You can now recruit chocobones!"
            }
            Set_Variable{
-- This variable causes the bird bones *not* to appear on Mountain_Pass.
-- It won't be cleared until then.
                name: "bird_bones_found"
                value: true
            }
            Clear_Variable{
                name: {"bird", "rider", "other_human"}
            }
    }

-- *************************** ENDING / OPENING ***************************
    event: {
        name: "enemies defeated"

-- Copy Ras-Tabahn and his units to an array, saving them for later. We don't
-- kill them because that would remove them from the screen during linger
-- mode. They won't automatically be healed, so do that first.
        do: ->
            Heal_Unit{
                filter: {
                    side: 1
                }
                amount: "full"
                restore_statuses: true
            }
            Store_Unit{
                filter: {
                    side: 1
                }
                variable: "rastabahn_recall_list"
            }
-- Change the location of the copies to be the recall list instead of the map:
            For{
                array: "rastabahn_recall_list"
                variable: "i"
                do: ->
                    Set_Variable{
                        name: "rastabahn_recall_list[i].x"
                        value: "recall"
                    }
                    Set_Variable{
                        name: "rastabahn_recall_list[i].y"
                        value: "recall"
                    }
                
            }

-- We want to be able to add Ras-Tabahn's gold to the total when the two
-- characters are reunited, but only Ardonna's gold will be carried over
-- from the scenario right before that. We are storing R-T's gold now,
-- but we want to store what it would be after the bonus. We need to
-- calculate the bonus and store it before ending the scenario.
            Store_Turns{
                variable: "turns"
            }
            Store_Villages{
                variable: "villages"
            }
            Store_Gold{
                side: 1
                variable: "gold"
            }

-- This is the formula used by the game:
            Set_Variable{
                name: "rastabahn_gold"
                value: "#{(((#{turns - #{turn_number) * (#{villages.length + 2) + (#{gold)) * 0.4)"
            }
            Set_Variable{
                name: "rastabahn_gold"
                round: 0
            }

            Set_Variable{
                name: "gold_message"
                value: _ "Hopefully this will be enough gold."
            }

            If{
                variable: {
                    name: "rastabahn_gold"
                    less_than: 46
                }
                then: ->
                    Set_Variable{
                        name: "gold_message"
                        value: _ "We have won, but I am afraid this may not be enough gold."
                    }
                
            }

            If{
                variable: {
                    name: "rastabahn_gold"
                    greater_than: 55
                }
                then: ->
                    Set_Variable{
                        name: "gold_message"
                        value: _ "Good. We ended with a fair amount of gold."
                    }
                
            }

-- During the next message about gold, the carryover report will not have been
-- shown yet, so the player won't know how much gold R-T is talking about. To
-- fix that, we temporarily set the amount of gold shown at the top of the
-- screen to be equal to the carryover amount. Then we have to set it back to
-- make the carryover report correct.
            Gold{
                side: 1
                amount: "#{(-1 * #{gold + #{rastabahn_gold)"
            }
            Message{
                speaker: "Ras-Tabahn"
                message: gold_message
            }
            Gold{
                side: 1
                amount: "#{(-1 * #{rastabahn_gold + #{gold)"
            }

-- R-T gold should not be negative:
            If{
                variable: {
                    name: "rastabahn_gold"
                    less_than: 0
                }
                then: ->
                    Set_Variable{
                        name: "rastabahn_gold"
                        value: 0
                    }
                
            }

-- We don't need "bonus=yes" etc., but it will cause the carryover report
-- to be generated correctly:
            Endlevel{
                result: "victory"
                bonus: true
                <NEW_GOLD_CARRYOVER(40)
            }
            Clear_Variable{
                name: {"turns", "villages", "gold", "gold_message"}
            }
    }

    event: {
        name: "start"
        do: ->
            Message{
                speaker: "Okean"
                message: _ "You! You have destroyed the town of Carcyn!"
            }
            Message{
                speaker: "Ras-Tabahn"
                message: _ "The town is hardly destroyed. I just encouraged a change of leadership."
            }
            Message{
                speaker: "Okean"
                message: _ "Your words mock us. Those humans were valuable trading partners of ours. We will have justice!"
            }
            Message{
                speaker: "Ras-Tabahn"
                message: _ "Actually, I expect you will follow them into the ground if you try to harm us."
            }

            If{
                <BOTH_KIDS_LIVE!
                then: ->
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "This is going to cost us, but I want to keep some gold around for emergencies â€” I think 50 is about right. You kids help me collect some. (<i>Cough, cough</i>)"
                    }
                    Message{
                        speaker: "Carcyn"
                        message: _ "Right away sir."
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "Are you feeling well?"
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "Yes, yes. Iâ€™m quite all right."
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "I donâ€™t fancy wading in the water to fight these things."
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "No problem. We can lure them onto land."
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "How?"
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "Have you never been fishing before? With bait of course."
                    }
                
            }

            If{
                <ONE_KID_LIVES!
                then: ->
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "This is going to cost us, but I want to keep some gold around for emergencies â€” I think 50 is about right. Help me collect some. (<i>Cough, cough</i>)"
                    }
-- Only one of the two following messages will be read.
                    Message{
                        speaker: "Carcyn"
                        message: _ "Right away sir. Are you feeling well?"
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "Right away sir. Are you feeling well?"
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "Yes, yes. Iâ€™m quite all right."
                    }
                    Message{
                        speaker: "Carcyn"
                        message: _ "I donâ€™t fancy wading in the water to fight these things."
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "I donâ€™t fancy wading in the water to fight these things."
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "No problem. We can lure them onto land."
                    }
                    Message{
                        speaker: "Carcyn"
                        message: _ "How?"
                    }
                    Message{
                        speaker: "Shynal"
                        message: _ "How?"
                    }
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "Have you never been fishing before? With bait of course."
                    }
                
            }

            If{
                <NO_KIDS_LIVE!
                then: ->
                    Message{
                        speaker: "Ras-Tabahn"
                        message: _ "This is going to cost me, but I want to keep some gold around for emergencies â€” I think 50 is about right. Iâ€™d better send someone to collect some. (<i>Cough, cough</i>) I hope I can lure these fish onto land. Maybe I should recruit some bait."
                    }
                
            }
    }

    event: {
        name: "time over"
        do: ->
            Message{
                speaker: "narrator"
                image: "logo.png"
                message: _ "You have no more time."
            }
    }

    <HERO_DEATHS!
    <KIDS_ADVANCE!
}
