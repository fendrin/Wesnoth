--textdomain wesnoth-ei
Scenario{
    id: "08_Training_the_Ogres"
    name: _ "Capturing the Ogres"
    next_scenario: "09_Xenophobia"
    map: "campaigns/Eastern_Invasion/maps/08_Training_the_Ogres.map"
    victory_when_enemies_defeated: false
    turns: -1
    <NORTHERN_SCHEDULE!

    <INTRO_AND_SCENARIO_MUSIC("revelation.ogg", "traveling_minstrels.ogg")
    <EXTRA_SCENARIO_MUSIC("journeys_end.ogg")

    <EI_TRACK(JOURNEY_08_NEW!)

    MAP_EDGES_SLF: () -> {
        filter_adjacent_location: {
            count: "1-5"
        }
    }

-- wmllint: validate-off
    side: {
        side: 1
        controller: "human"
        gold: 100
        team_name: "good"
        user_team_name: _ "Wesnothians"
        <FLAG_VARIANT("loyalist")

-- wmllint: recognize Gweddry
        <CHARACTER_STATS_GWEDDRY!
    }
-- wmllint: validate-on

    side: {
        side: 2
        controller: "ai"
        no_leader: true
        team_name: "ogres"
        user_team_name: _ "Ogres"
        ai: {
            aggression: 1.0

            <MODIFY_AI_ADD_CANDIDATE_ACTION(2, "main_loop", {
                    candidate_action: {
                        engine: "lua"
                        name: "ogres_flee"
                        id: "ogres_flee"
                        max_score: 110000
                        location: "campaigns/Eastern_Invasion/ai/ca_ogres_flee.lua"
                    }
            })
        }
    }

    event: {
        name: "prestart"
        do: ->
            SCATTER_UNITS(ON_DIFFICULTY(8, 7, 6), "Ogre", 0, {
                    x: "18-24"
                    y: "11-14"
                    not: {
                        filter: {
                        }
                    }
                },{
                    side: 2
                    generate_name: true
                    random_traits: true
            })

            Objectives{
                side: 1
                objective: {
                    description: _ "Capture as many ogres as you can" .. "<span foreground='white'> <small>" .. _ "(captured ogres will be made available for recall)" .. "</small></span>"
                    condition: "win"
                    show_turn_counter: true
                }
                objective: {
                    description: _ "Death of Gweddry"
                    condition: "lose"
                }
                objective: {
                    description: _ "Death of Dacyn"
                    condition: "lose"
                }
                objective: {
                    description: _ "Death of Owaec"
                    condition: "lose"
                }

                note: {
                    description: _ "An ogre is captured when it starts a turn being unable to move more than one hex."
                }
                note: {
                    description: _ "If an ogre reaches the edge of the map, it will escape."
                }

                gold_carryover: {
                    carryover_percentage: 40
                }
            }
    }

    event: {
        name: "start"
        do: ->
            Recall{
                id: "Dacyn"
                x: 20, y: 19
            }
            Recall{
                id: "Owaec"
                x: 22, y: 19
            }

            Message{
                speaker: "Gweddry"
                message: _ "Look, this valley is inhabited by a tribe of ogres. We should try to capture some to train."
            }
            Message{
                race: "ogre"
                message: _ "Humans are coming! Run!"
            }
            Message{
                speaker: "Owaec"
                message: _ "Looks like they are fleeing. I think they will surrender easily if we can surround them."
            }
            Message{
                speaker: "Dacyn"
                message: _ "All right, we have to capture them one by one."
            }
    }

    event: {
        name: "moveto"
        first_time_only: false

        filter: {
            race: "ogre"
            filter_location: {
                <MAP_EDGES_SLF!
            }
        }
        do: ->
            Set_Variables{
                name: "ogre_escape_msgs"

                value: {
                    message: _ "Waah! Run!" -- wmllint: no spellcheck
                }

                value: {
                    message: _ "Run for your lives!"
                }

                value: {
                    message: _ "Help!"
                }
            }

            If{
                variable: {
                    name: "next_ogre_escape_msg"
                    equals: empty
                }

                then: ->
                    VARIABLE("next_ogre_escape_msg", 0)
                

                else: ->
                    VARIABLE_OP("next_ogre_escape_msg", "add", 1)
                    VARIABLE_OP("next_ogre_escape_msg", "modulo", ogre_escape_msgs.length)
                
            }

            Message{
                speaker: "unit"
                message: ogre_escape_msgs[next_ogre_escape_msg].message
            }

            Kill{
                x: x1, y: y1
            }

            CLEAR_VARIABLE("ogre_escape_msgs")
    }

    event: {
        name: "moveto"

        filter: {
            race: "ogre"
            filter_location: {
                <MAP_EDGES_SLF!
            }
        }
        do: ->
            Message{
                speaker: "Gweddry"
                message: _ "We have let one escape. Let’s hope they don’t all!"
            }
    }

    event: {
        name: "side 2 turn"
        first_time_only: false

-- This stores all ogres which have no free adjacent locations which
-- aren't adjacent to a side 1 unit; that is, the ones which are
-- ZoC-trapped so that they can't move more than one hex.
        do: ->
            Store_Unit{
                filter: {
                    side: 2

                    filter_location: {
                        not: {
                            filter_adjacent_location: {
                                not: {
                                    filter: {
                                        side: 1
                                    }
                                }

                                not: {
                                    filter_adjacent_location: {
                                        filter: {
                                            side: 1
                                        }
                                    }
                                }

                                not: {
                                    terrain: "*^X*"
                                }
                            }
                        }
                    }
                }

                kill: false
                variable: "ogres_to_capture"
            }

            Foreach{
                array: "ogres_to_capture"
                do: ->
                    VARIABLE("ogre_name", this_item.name)

                    Set_Variables{
                        name: "ogre_capture_msgs"

                        value: {
                            message: _ "#{ogre_name surrender!"
                        }

                        value: {
                            message: _ "Don't hurt #{ogre_name}!"
                        }

                        value: {
                            message: _ "#{ogre_name will be good! Promise!"
                        }
                    }

                    If{
                        variable: {
                            name: "next_ogre_capture_msg"
                            equals: empty
                        }

                        then: ->
                            VARIABLE("next_ogre_capture_msg", 0)
                        

                        else: ->
                            VARIABLE_OP("next_ogre_capture_msg", "add", 1)
                            VARIABLE_OP("next_ogre_capture_msg", "modulo", ogre_capture_msgs.length)
                        
                    }

                    Message{
                        x: this_item.x, y: this_item.y
                        message: ogre_capture_msgs[next_ogre_capture_msg].message
                    }

                    Kill{
                        x: this_item.x, y: this_item.y
                    }

                    VARIABLE("this_item.side", 1)

                    Unstore_Unit{
                        variable: "this_item"
                        x: "recall", y: "recall"
                    }
                
            }

            CLEAR_VARIABLE("ogres_to_capture,ogre_name,ogre_capture_msgs")
    }

    event: {
        name: "new turn"

        filter_condition: {
            not: {
                have_unit: {
                    side: 2
                }
            }
        }
        do: ->
            Endlevel{
                result: "victory"
                <NEW_GOLD_CARRYOVER(40)
            }
    }

    event: {
        name: "time over"
        do: ->
            Endlevel{
                result: "victory"
                <NEW_GOLD_CARRYOVER(40)
            }
    }

    event: {
        name: "victory"
        do: ->
            Store_Unit{
                filter: {
                    side: 1
                    race: "ogre"
                }

                kill: false
                variable: "ogres"
            }

            Switch{
                variable: "ogres.length"

                case: {
                    value: 0
                    do: ->
                        Message{
                            speaker: "Gweddry"
                            message: _ "We failed to capture any of them!"
                        }
                }

                case: {
                    value: 1
                    do: ->
                        Message{
                            speaker: "Gweddry"
                            message: _ "We only captured one ogre."
                        }
                }

                case: {
                    value: 2
                    do: ->
                        Message{
                            speaker: "Gweddry"
                            message: _ "We failed to capture more than two of the ogres."
                        }
                }

                case: {
                    value: 3
                    do: ->
                        Message{
                            speaker: "Gweddry"
                            message: _ "We captured three ogres! I hope they will prove useful."
                        }
                }

                else: ->
                    Message{
                        speaker: "Gweddry"
                        message: _ "We managed to capture many ogres! They will make a good addition to our troops."
                    }
                
            }

            CLEAR_VARIABLE("ogres,next_ogre_escape_msg,next_ogre_capture_msg")
    }

    <FOREIGN_DEFEAT!

    <HERODEATH_GWEDDRY!
    <HERODEATH_DACYN!
    <HERODEATH_OWAEC!
}
