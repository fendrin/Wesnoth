--textdomain wesnoth-sotbe
Scenario{
    id: "11_Clash_of_Armies"
    name: _ "Clash of Armies"
    map: "campaigns/Son_Of_The_Black_Eye/maps/11_Clash_of_Armies.map"
    turns: 24

    <DEFAULT_SCHEDULE_SECOND_WATCH!

    next_scenario: "12_Giving_Some_Back"

    <SCENARIO_MUSIC("battle.ogg")
    <EXTRA_SCENARIO_MUSIC("the_city_falls.ogg")

    event: {
        name: "prestart"
        do: ->
            Objectives{
                side: 1
                objective: {
                    description: _ "Defend Prestim successfully for four days"
                    condition: "win"
                    show_turn_counter: true
                }
                objective: {
                    description: _ "Enemies control any villages on the north side of the river when turns run out"
                    condition: "lose"
                }
                objective: {
                    description: _ "Death of Kapou’e"
                    condition: "lose"
                }
                objective: {
                    description: _ "Death of Grüü"
                    condition: "lose"
                }

                gold_carryover: {
                    bonus: false
                    carryover_percentage: 40
                }
            }
    }

    side: {
        side: 1
        id: "Kapou'e"
        type: "Orcish Leader"
        controller: "human"
        team_name: "Kapoue"
        user_team_name: _ "Kapou’e"
        gold: 200
        <BLACK_FLAG!
    }

    <STARTING_VILLAGES(1, 10)
    <STARTING_VILLAGES_AREA(1, 5, 5, 6)
    <STARTING_VILLAGES_AREA(1, 35, 5, 6)

    side: {
        type: "Elvish Champion"
        id: "Thelarion"
        name: _ "Thelarion"
        side: 2
        canrecruit: true
        facing: "sw"
        ai: {
            aggression: 1.0
            grouping: false
            village_value: 0.0
            leader_value: 50.0
        }
        recruit: {"Elvish Captain", "Elvish Fighter", "Elvish Archer", "Elvish Marksman", "Elvish Druid", "Elvish Scout"}
        team_name: "villains"
        user_team_name: _ "Villains"
        <GOLD(200, 200, 250)
        <FLAG_VARIANT("wood-elvish")
    }

    <STARTING_VILLAGES(2, 10)

    side: {
        type: "Dwarvish Steelclad"
        id: "Darstang"
        name: _ "Darstang"
        side: 3
        canrecruit: true
        ai: {
            aggression: 1.0
            caution: 0.0
            villages_per_scout: 0
            grouping: false
            village_value: 20

            aspect: {
                id: "recruitment_instructions"
                facet: {
                    turns: "1-2"
                    value: {
                        recruit: {
                            type: "Gryphon Rider"
                            number: 1
                            importance: 1
                        }
                        recruit: {
                            importance: 0
                            type: {"Dwarvish Fighter", "Dwarvish Thunderer", "Dwarvish Scout", "Bandit"}
                        }
                    }
                }
                facet: {
                    turns: "3-24"
                    value: {
                        recruit: {
                            type: "Gryphon Rider"
                            <if HARD then {
                                number: 3
                            } else {
                                number: 2
                            }
                            total: true
                            importance: 1
                        }
                        recruit: {
                            importance: 0
                            type: {"Dwarvish Fighter", "Dwarvish Thunderer", "Dwarvish Scout", "Bandit"}
                        }
                    }
                }
            }
        }
        recruit: {"Dwarvish Fighter", "Dwarvish Thunderer", "Dwarvish Scout", "Bandit", "Gryphon Rider"}
        user_team_name: _ "Villains"
        team_name: "villains"
        <GOLD(200, 250, 300)
        <FLAG_VARIANT("knalgan")
    }

    <STARTING_VILLAGES(3, 11)

    side: {
        type: "General"
        id: "Earl Lanbec'h"
        name: _ "Earl Lanbec’h"
        profile: "portraits/lanbech.png"
        side: 4
        canrecruit: true
        facing: "sw"
        ai: {
            aggression: 1.0
            grouping: false
            leader_value: 20
            village_value: 20
        }
        recruit: {"Swordsman", "Red Mage", "Pikeman", "Heavy Infantryman", "Fencer", "Bowman"}
        team_name: "villains"
        user_team_name: _ "Villains"
        <GOLD(200, 400, 600)
        <FLAG_VARIANT("loyalist")
    }

    <STARTING_VILLAGES(4, 8)
    <STARTING_VILLAGES_AREA(4, 19, 31, 6)

    side: {
        side: 5
        ai: {
            aggression: 1.0
            caution: 0.25
            village_value: 10
        }
        team_name: "villains"
        user_team_name: _ "Villains"
        no_leader: true
    }

    <SOTBE_TRACK(JOURNEY_11_NEW!)

    event: {
        name: "prestart"

        HUMAN_SHIP: (X, Y, FACING_VALUE, ID_VALUE) -> {
            <GENERIC_UNIT(4, "Transport Galleon", X, Y)
            unit: {
                amend: true
                facing: FACING_VALUE
                upkeep: "free"
                role: "docked transport"

                variables: {
                    transport_num: ID_VALUE
                    dock_x: X
                    dock_y: Y
                }

-- Let's make the transports slightly more durable than usual so they're
-- not as easy to destroy...
                modifications: {
                    object: {
                        effect: {
                            apply_to: "hitpoints"
                            increase_total: 20
                        }
                    }
                }
            }
        }
        do: ->
            HUMAN_SHIP(24, 16, "sw", 1)
            HUMAN_SHIP(14, 16, "se", 2)
            HUMAN_SHIP(26, 17, "sw", 3)
            HUMAN_SHIP(12, 17, "se", 4)

            Fire_Event{
                name: "start_boarding_next_transport"
            }

            Role{
                type: {"Orcish Warlord", "Troll Warrior", "Orcish Warrior", "Troll", "Orcish Grunt"}
                role: "cannonfodder"
            }
            Recall{
                role: "cannonfodder"
                x: 18
                y: 11
            }

            Role{
                role: "cannonfodder2"
                type: {"Orcish Crossbowman", "Orcish Slayer", "Orcish Archer", "Orcish Assassin"}
            }
            Recall{
                role: "cannonfodder2"
                x: 20
                y: 11
            }

            RENAME_IF_DEAD("thelarion_dead", "Thelarion", _ "Telamir")
            RENAME_IF_DEAD("darstang_dead", "Darstang", _ "Angthur")
    }

    event: {
        name: "start"
        do: ->
            Recall{
                id: "Grüü"
            }
            Recall{
                id: "Jetto"
            }
            Recall{
                id: "Inarix"
            }
            Recall{
                id: "Plonk"
            }

            Message{
                role: "cannonfodder"
                message: _ "So here we are, and they are preparing to assault."
            }

            Message{
                speaker: "Grüü"
                message: _ "Prestim’s walls are rock-hard, they’ll waste themselves on them."
            }

            Message{
                speaker: "Kapou'e"
                message: _ "I’m not that sure. Every fortress has its own weakness. Prestim’s walls are strong but long and it is difficult to defend them from many directions at once. This Earl Lanbec’h must know they can’t break through by only fording the river where the bridge previously stood so he must have a better plan than that."
            }

            Message{
                role: "cannonfodder"
                message: _ "We’ve received messengers from the Council, saying that they are gathering tribes into the Great Horde."
            }

            Message{
                speaker: "Grüü"
                message: _ "Great! When do they arrive?"
            }

            Message{
                role: "cannonfodder"
                message: _ "In four days. I fear it will be too late."
            }

            Message{
                speaker: "Kapou'e"
                message: _ "Fool! We can hold that long. But we have to have Prestim firmly in control when the shamans arrive with the Great Horde. We can’t let the humans establish a foothold on this side of the river."
            }

            Message{
                role: "cannonfodder"
                message: _ "Why?"
            }

            Message{
                speaker: "Kapou'e"
                message: _ "Because if we cannot decisively beat these humans, the other tribes won’t think us strong enough to lead them. Each chieftain will try to claim the leadership of the horde for themselves and the humans will be able to break through our defenses."
            }

            Message{
                role: "cannonfodder"
                message: _ "Great."
            }

-- TODO: Have Lanbec'h say something
    }

-- If a transport which is in the process of being boarded dies, free the
-- would-be-boarders and start boarding the next transport instead. This is
-- probably unnecessary as killing a transport which is about to be boarded
-- would require the player to reach the boarding areas, but better safe than
-- sorry...
    event: {
        name: "die"
        first_time_only: false

        filter: {
            type: "Transport Galleon"

            filter_wml: {
                variables: {
                    transport_num: transport_to_board
                }
            }
        }
        do: ->
            MODIFY_UNIT({
                    filter_wml: {
                        variables: {
                            boarding_transport: true
                        }
                    }

                    filter_adjacent: {
                        x: x1, y: y1
                    }
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 338:         ) variables.boarding_transport no}

                    fire_event: {
                        name: "start_boarding_next_transport"
                    }
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! table closed by event at line 342

-- This event triggers when the current transport to board has three adjacent
-- units ready to board it. Then it shows all three units board the
-- transport, stores those units in the transport's variables so they can be
-- unstored when the transport unloads.
                event: {
                    name: "side 4 turn refresh"
                    first_time_only: false

                    filter_condition: {
                        have_unit: {
                            type: "Transport Galleon"

                            filter_wml: {
                                variables: {
                                    transport_num: transport_to_board
                                }
                            }

                            filter_adjacent: {
                                filter_wml: {
                                    variables: {
                                        boarding_transport: true
                                    }
                                }

                                count: 3
                            }
                        }
                    }
                    do: ->
                        VARIABLE_OP("ships_boarded", "add", 1)
                        Switch{
                            variable: "ships_boarded"

                            case: {
                                value: 1
                                do: ->
                                    Message{
                                        speaker: "Grüü"
                                        message: _ "Look, the humans are boarding a ship!"
                                    }
                            }
                        }

                        Store_Unit{
                            filter: {
                                type: "Transport Galleon"

                                filter_wml: {
                                    variables: {
                                        transport_num: transport_to_board
                                    }
                                }
                            }

                            kill: false
                            variable: "transport"
                        }

                        Store_Unit{
                            filter: {
                                filter_wml: {
                                    variables: {
                                        boarding_transport: true
                                    }
                                }
                            }

                            kill: false
                            variable: "transport.variables.landing_party"
                        }

                        Foreach{
                            array: "transport.variables.landing_party"
                            do: ->
                                Kill{
                                    x: this_item.x
                                    y: this_item.y
                                    fire_event: false
                                }

                                Move_Unit_Fake{
                                    x: {this_item.x, transport.x}
                                    y: {this_item.y, transport.y}
                                    type: this_item.type
                                    gender: this_item.gender
                                    side: 4
                                }

                                VARIABLE("this_item.moves", 0)
                                VARIABLE("this_item.attacks_left", 0)
                                CLEAR_VARIABLE("this_item.variables.boarding_transport")
                            
                        }

                        Unstore_Unit{
                            variable: "transport"
                            find_vacant: false
                        }

                        Fire_Event{
                            name: "start_boarding_next_transport"
                        }

                        CLEAR_VARIABLE("transport")
                }

-- This makes each transport which has a landing party to move towards a
-- randomly selected landing spot.
                event: {
                    name: "side 4 turn refresh"
                    first_time_only: false
                    do: ->
                        Store_Unit{
                            filter: {
                                type: "Transport Galleon"

                                filter_wml: {
                                    variables: {
                                        landing_party: {
                                        }
                                    }
                                }
                            }

                            kill: false
                            variable: "moving_transports"
                        }

                        Foreach{
                            array: "moving_transports"
                            do: ->
                                If{
                                    variable: {
                                        name: "this_item.x"
                                        less_than: 19
                                    }

                                    then: ->
                                        VARIABLE("x", "1-17")
                                    

                                    else: ->
                                        VARIABLE("x", "21-38")
                                    
                                }

                                Store_Locations{
                                    x: x
                                    y: "7-11"
                                    terrain: "W*"

                                    filter_adjacent_location: {
                                        terrain: {"!", "W*"}
                                        count: "2-6"
                                    }

                                    not: {
                                        filter: {
                                        }

                                        radius: 1
                                    }

                                    variable: "landing_sites"
                                }

--{DEBUG_MSG "Found $landing_sites.length possible landing sites for transport $this_item.variables.transport_num"}

                                If{
                                    variable: {
                                        name: "landing_sites.length"
                                        greater_than_equal_to: 1
                                    }

                                    then: ->
                                        RANDOM("0..#{(#{landing_sites.length - 1)")

                                        VARIABLE("goto_x", landing_sites[random].x)
                                        VARIABLE("goto_y", landing_sites[random].y)

                                        VARIABLE("this_item.goto_x", goto_x)
                                        VARIABLE("this_item.goto_y", goto_y)

--{DEBUG_MSG "Setting transport $this_item.variables.transport_num to goto $goto_x|,$goto_y"}

                                        Unstore_Unit{
                                            variable: "this_item"
                                            find_vacant: false
                                        }
                                    
                                }
                            
                        }

                        CLEAR_VARIABLE("moving_transports,landing_sites,x,goto_x,goto_y,random")
                }

-- This picks a nearby side 4 unit and flags it as one which should move
-- towards the transport. First looks for a unit which is within one turn's
-- movement, then for units within one turn's movement + 1 hex, then for
-- units within one turn's movement + 2 hex, etc, but doesn't pick units
-- which are more than 2 turns away and gives up when +6 is reached.
                event: {
                    name: "side 4 turn refresh"
                    first_time_only: false

                    filter_condition: {
                        have_unit: {
                            filter_wml: {
                                variables: {
                                    boarding_transport: true
                                }
                            }

                            count: "0-2"
                        }
                    }
                    do: ->
                        VARIABLE("i", 0)
                        While{
                            variable: {
                                name: "possible_boarders.length"
                                less_than: 1
                            }

                            variable: {
                                name: "i"
                                less_than: 6
                            }

                            do: ->
                                Store_Unit{
                                    filter: {
                                        side: 4
                                        canrecruit: false

                                        not: {
                                            type: "Transport Galleon"
                                        }

                                        filter_wml: {
                                            hitpoints: this_unit.max_hitpoints
                                        }

                                        not: {
                                            filter_wml: {
                                                variables: {
                                                    boarding_transport: true
                                                }
                                            }
                                        }

                                        and: {
                                            filter_location: {
                                                filter: {
                                                    type: "Transport Galleon"

                                                    filter_wml: {
                                                        variables: {
                                                            transport_num: transport_to_board
                                                        }
                                                    }
                                                }

                                                radius: "#{(#{this_unit.moves + min(#{i,#{this_unit.moves))"

                                                filter_radius: {
                                                    terrain: {"G*", "R*", "C*", "K*", "*^V*", "Wwf"}
                                                }
                                            }
                                        }
                                    }

                                    kill: false
                                    variable: "possible_boarders"
                                }

                                VARIABLE_OP("i", "add", 1)
                            
                        }

                        If{
                            variable: {
                                name: "possible_boarders.length"
                                greater_than_equal_to: 1
                            }

                            then: ->
                                RANDOM("0..#{(#{possible_boarders.length - 1)")

                                VARIABLE("possible_boarders[#{random].variables.boarding_transport", true)

--{DEBUG_MSG "Setting $possible_boarders[$random].name the $possible_boarders[$random].language_name to board transport $transport_to_board"}

                                Unstore_Unit{
                                    variable: "possible_boarders[#{random]"
                                    find_vacant: false
                                }
                            

--[else]
--    {DEBUG_MSG "Found no one to go to board transport $transport_to_board|..."}
--[/else]
                        }

                        CLEAR_VARIABLE("possible_boarders,random")
                }

-- This makes units which have been designated to board a transport to move
-- towards the current transport to board.
                event: {
                    name: "side 4 turn refresh"
                    first_time_only: false
                    do: ->
                        Store_Unit{
                            filter: {
                                side: 4

                                filter_wml: {
                                    variables: {
                                        boarding_transport: true
                                    }
                                }

                                not: {
                                    filter_adjacent: {
                                        filter_wml: {
                                            variables: {
                                                transport_num: transport_to_board
                                            }
                                        }
                                    }
                                }
                            }

                            kill: false
                            variable: "moving_to_transport"
                        }

                        Foreach{
                            array: "moving_to_transport"
                            do: ->
-- First we try to find a proper boarding location which the unit can
-- reach in one turn...
                                Store_Locations{
                                    terrain: {"!", "W*"}

                                    filter_adjacent_location: {
                                        filter: {
                                            filter_wml: {
                                                variables: {
                                                    transport_num: transport_to_board
                                                }
                                            }
                                        }
                                    }

                                    not: {
                                        filter: {
                                        }
                                    }

                                    and: {
                                        filter: {
                                            x: this_item.x, y: this_item.y
                                        }

                                        radius: this_item.moves

                                        filter_radius: {
                                            terrain: {"G*", "R*", "C*", "K*", "*^V*", "Wwf"}
                                        }
                                    }

                                    variable: "boarding_locs"
                                }

-- ...but if no such location was found, then we just make the unit
-- head for the transport itself for now.
                                If{
                                    variable: {
                                        name: "boarding_locs.length"
                                        less_than: 1
                                    }

                                    then: ->
                                        Store_Locations{
                                            filter: {
                                                filter_wml: {
                                                    variables: {
                                                        transport_num: transport_to_board
                                                    }
                                                }
                                            }

                                            variable: "boarding_locs"
                                        }
                                    
                                }

                                RANDOM("0..#{(#{boarding_locs.length - 1)")

                                VARIABLE("this_item.goto_x", boarding_locs[random].x)
                                VARIABLE("this_item.goto_y", boarding_locs[random].y)

--{DEBUG_MSG "Setting $this_item.name the $this_item.language_name to go to $boarding_locs[$random].x|,$boarding_locs[$random].y"}

                                Unstore_Unit{
                                    variable: "this_item"
                                    find_vacant: false
                                }
                            
                        }

                        CLEAR_VARIABLE("moving_to_transport,boarding_locs,random")
                }

                event: {
                    name: "side 4 turn refresh"
                    first_time_only: false

-- Zero the movement of docked transports
                    do: ->
                        MODIFY_UNIT({
                                type: "Transport Galleon"
                                x: this_unit.variables.dock_x, y: this_unit.variables.dock_y

                                not: {
                                    filter_wml: {
                                        variables: {
                                            landing_party: {
                                            }
                                        }
                                    }
                                }
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 780:         ) moves 0}

-- Zero the movement of units waiting to board a transport
                                <MODIFY_UNIT({
                                        side: 4

                                        filter_wml: {
                                            variables: {
                                                boarding_transport: true
                                            }
                                        }
                                        filter_adjacent: {
                                            filter_wml: {
                                                variables: {
                                                    transport_num: transport_to_board
                                                }
                                            }
                                        }
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 798:         ) moves 0}
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! table closed by event at line 796

-- When a transport reaches the northern shore in a spot which has at least 3
-- adjacent free non-deep hexes, so that there's enough space to unload the
-- whole landing party.
                                    event: {
                                        name: "moveto"
                                        first_time_only: false

                                        filter: {
                                            type: "Transport Galleon"

                                            filter_location: {
                                                x: "1-38"
                                                y: "7-11"

                                                filter_adjacent_location: {
                                                    not: {
                                                        filter: {
                                                        }
                                                    }

                                                    terrain: {"!", "W*"}
                                                    count: "1-6"
                                                }

                                                and: {
                                                    filter_adjacent_location: {
                                                        not: {
                                                            filter: {
                                                            }
                                                        }

                                                        terrain: {"!", "Wo"}
                                                        count: "3-6"
                                                    }
                                                }
                                            }
                                        }

                                        foreach: {
                                            array: "unit.variables.landing_party"
                                            do: ->
                                                Store_Locations{
                                                    terrain: {"!", "W*"}

                                                    filter_adjacent_location: {
                                                        x: x1, y: y1
                                                    }

                                                    not: {
                                                        filter: {
                                                        }
                                                    }

                                                    variable: "disembark_loc"
                                                }

                                                If{
                                                    variable: {
                                                        name: "disembark_loc.length"
                                                        less_than: 1
                                                    }

                                                    then: ->
                                                        Store_Locations{
                                                            terrain: {"!", "Wo"}

                                                            filter_adjacent_location: {
                                                                x: x1, y: y1
                                                            }

                                                            not: {
                                                                filter: {
                                                                }
                                                            }

                                                            variable: "disembark_loc"
                                                        }
                                                    
                                                }

                                                Move_Unit_Fake{
                                                    x: {unit.x, disembark_loc.x}
                                                    y: {unit.y, disembark_loc.y}
                                                    type: this_item.type
                                                    gender: this_item.gender
                                                    side: 4
                                                }

                                                Unstore_Unit{
                                                    variable: "this_item"
                                                    x: disembark_loc.x, y: disembark_loc.y
                                                }
                                            
                                        }
                                        do: ->
                                            VARIABLE_OP("landing_parties_landed", "add", 1)
                                            Switch{
                                                variable: "landing_parties_landed"

                                                case: {
                                                    value: 1
                                                    do: ->
                                                        Message{
                                                            x: disembark_loc.x, y: disembark_loc.y
                                                            message: _ "Charge!"
                                                        }
                                                }

                                                case: {
                                                    value: 2
                                                    do: ->
                                                        Message{
                                                            x: disembark_loc.x, y: disembark_loc.y
                                                            message: _ "Get them!"
                                                        }
                                                }
                                            }

                                            CLEAR_VARIABLE("unit.variables.landing_party,disembark_loc")

                                            VARIABLE("unit.moves", 0)

                                            Unstore_Unit{
                                                variable: "unit"
                                                find_vacant: false
                                            }
                                    }

-- This makes transports which have no landing party and aren't at their dock
-- location to return to their dock. This should only be the case when a
-- transport has unloaded their landing party but hasn't yet returned.
                                    event: {
                                        name: "side 4 turn refresh"
                                        first_time_only: false
                                        do: ->
                                            Store_Unit{
                                                filter: {
                                                    type: "Transport Galleon"

                                                    not: {
                                                        x: this_unit.variables.dock_x, y: this_unit.variables.dock_y
                                                    }

                                                    not: {
                                                        filter_wml: {
                                                            variables: {
                                                                landing_party: {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                kill: true
                                                variable: "returning_transports"
                                            }

                                            Foreach{
                                                array: "returning_transports"
                                                do: ->
                                                    VARIABLE("this_item.goto_x", this_item.variables.dock_x)
                                                    VARIABLE("this_item.goto_y", this_item.variables.dock_y)

--{DEBUG_MSG "Setting transport $this_item.variables.transport_num to return to $this_item.variables.dock_x|,$this_item.variables.dock_y"}

                                                    Unstore_Unit{
                                                        variable: "this_item"
                                                    }
                                                
                                            }

                                            CLEAR_VARIABLE("returning_transports")
                                    }

-- This event simply cycles the variable $transport_to_board through values
-- of 1,2,3,4,1,2,3,4,1,2,..., starting from whatever value it is originally
-- set to (if not, then the first call to this sets it to 1).
                                    event: {
                                        name: "start_boarding_next_transport"
                                        first_time_only: false
                                        do: ->
                                            VARIABLE("i", transport_to_board)
                                            If{
                                                variable: {
                                                    name: "i"
                                                    less_than: 4
                                                }

                                                then: ->
                                                    VARIABLE_OP("i", "add", 1)
                                                

                                                else: ->
                                                    VARIABLE("i", 1)
                                                
                                            }
                                            While{
                                                not: {
                                                    have_unit: {
                                                        type: "Transport Galleon"

                                                        filter_wml: {
                                                            variables: {
                                                                transport_num: i
                                                            }
                                                        }
                                                    }
                                                }

                                                not: {
                                                    variable: {
                                                        name: "i"
                                                        numerical_equals: transport_to_board
                                                    }
                                                }

                                                do: ->
                                                    If{
                                                        variable: {
                                                            name: "i"
                                                            less_than: 4
                                                        }

                                                        then: ->
                                                            VARIABLE_OP("i", "add", 1)
                                                        

                                                        else: ->
                                                            VARIABLE("i", 1)
                                                        
                                                    }
                                                
                                            }

--{DEBUG_MSG "Next transport to board is transport $i"}

                                            VARIABLE("transport_to_board", i)
                                    }

                                    event: {
                                        name: "turn 2"
                                        do: ->
                                            Unit{
                                                side: 5
                                                type: "Merman Warrior"
                                                id: "Plouf"
                                                name: _ "Plouf"
                                                x: 1
                                                y: 16
                                                random_traits: true
                                            }

                                            GENERIC_UNIT(5, "Merman Fighter", 1, 15)
                                            GENERIC_UNIT(5, "Merman Fighter", 1, 17)

                                            Message{
                                                speaker: "Plouf"
                                                message: _ "We arrive to honor our alliance, Earl Lanbec’h."
                                            }

                                            Message{
                                                speaker: "Kapou'e"
                                                message: _ "Curses! They have fish-men on their side."
                                            }
                                    }

                                    event: {
                                        <if EASY then {
                                            name: {"turn 6", "turn 10", "turn 14"}
                                        }
                                        <if NORMAL then {
                                            name: {"turn 6", "turn 10", "turn 14", "turn 18"}
                                        }
                                        <if HARD then {
                                            name: {"turn 6", "turn 10", "turn 14", "turn 18", "turn 22"}
                                        }
                                        first_time_only: false

                                        scroll_to: {
                                            x: 1, y: 15
                                        }
                                        do: ->
                                            GENERIC_UNIT(5, "Merman Fighter", 1, 15)
                                            GENERIC_UNIT(5, "Merman Fighter", 1, 16)
                                            unless EASY!
                                                GENERIC_UNIT(5, "Merman Fighter", 1, 17)
                                            

                                            Delay{
                                                time: 500
                                            }
                                    }

                                    event: {
                                        <if EASY then {
                                            name: {"turn 4", "turn 8", "turn 12"}
                                        }
                                        <if NORMAL then {
                                            name: {"turn 4", "turn 8", "turn 12", "turn 16"}
                                        }
                                        <if HARD then {
                                            name: {"turn 4", "turn 8", "turn 12", "turn 16", "turn 20"}
                                        }
                                        first_time_only: false

                                        scroll_to: {
                                            x: 38, y: 14
                                        }
                                        do: ->
                                            GENERIC_UNIT(5, "Merman Fighter", 38, 14)
                                            Unit{
                                                amend: true
                                                facing: "sw"
                                            }
                                            GENERIC_UNIT(5, "Merman Fighter", 38, 13)
                                            Unit{
                                                amend: true
                                                facing: "sw"
                                            }
                                            unless EASY!
                                                GENERIC_UNIT(5, "Merman Fighter", 38, 12)
                                                Unit{
                                                    amend: true
                                                    facing: "sw"
                                                }
                                            

                                            Delay{
                                                time: 500
                                            }
                                    }

                                    event: {
                                        name: "turn 24"

                                        filter_condition: {
                                            have_location: {
                                                terrain: "*^V*"
                                                y: "1-11"

                                                not: {
                                                    owner_side: 1
                                                }
                                            }
                                        }
                                        do: ->
                                            Message{
                                                speaker: "Kapou'e"
                                                message: _ "The Great Horde is almost here! Drive them out of our villages <b>now</b>!"
                                            }
                                    }

                                    event: {
                                        name: "time over"
                                        do: ->
                                            ORCISH_SHAMAN(1, 11, 1, "Pirk", _ "Pirk")
                                            OLD_ORCISH_SHAMAN(1, 11, 1, "Gork", _ "Gork")
                                            NOVICE_ORCISH_SHAMAN(1, 11, 1, "Vraurk", _ "Vraurk")
-- wmllint: whofield clear
                                            UNIT(1, "Orcish Warrior", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Warrior", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Crossbowman", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Crossbowman", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Slayer", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Slayer", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Warlord", 11, 1, {role: "greathordewarlord1"})
                                            UNIT(1, "Orcish Crossbowman", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Goblin Pillager", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Goblin Pillager", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Warrior", 11, 1, {role: "greathordeprops"})
                                            UNIT(1, "Orcish Warlord", 11, 1, {role: "greathordewarlord2"})

                                            If{
                                                have_location: {
                                                    terrain: "*^V*"
                                                    y: "1-11"

                                                    not: {
                                                        owner_side: 1
                                                    }
                                                }

                                                then: ->
                                                    Message{
                                                        speaker: "Gork"
                                                        message: _ "Here we are!"
                                                    }

                                                    Message{
                                                        role: "greathordewarlord1"
                                                        message: _ "What’s this? This weakling has let humans enter Prestim? I will lead the horde and push them to the river!"
                                                        image: "portraits/orcs/grunt-6.png"
                                                    }

                                                    Message{
                                                        role: "greathordewarlord2"
                                                        message: _ "Bah! I’m the only one strong enough to drive out the humans! The Great Horde follows me!"
                                                        image: "portraits/orcs/grunt-5.png"
                                                    }

                                                    Message{
                                                        speaker: "Earl Lanbec'h"
                                                        message: _ "Look at that, the stupid orcs are starting to fight amongst themselves! Now’s our chance, everyone attack!"
                                                    }

                                                    Endlevel{
                                                        result: "defeat"
                                                    }
                                                

                                                else: ->
                                                    Message{
                                                        speaker: "Gork"
                                                        message: _ "Here we are! Hold on Prestim, we arrive to push them to the river!"
                                                    }

                                                    Message{
                                                        speaker: "Earl Lanbec'h"
                                                        message: _ "They are too numerous now, RETREAT!"
                                                    }

                                                    Kill{
                                                        side: 5
                                                        animate: false
                                                    }
                                                    Kill{
                                                        side: 2
                                                        animate: false
                                                    }
                                                    Kill{
                                                        side: 3
                                                        animate: false
                                                    }
                                                    Kill{
                                                        side: 4
                                                        animate: false
                                                    }

                                                    Message{
                                                        speaker: "Kapou'e"
                                                        message: _ "The Great Horde at last! I was beginning to think they would never come."
                                                    }

                                                    Message{
                                                        speaker: "Gork"
                                                        message: _ "Your defense of Prestim was heroic, facing such opposition surely undermined the morale of the humans. Now they are retreating to their fortresses and will not venture out again anytime soon."
                                                    }

                                                    Message{
                                                        speaker: "Pirk"
                                                        message: _ "It is now time to show them who we are and to lead the Great Horde in pursuit. We will not rest until we destroy Earl Lanbec’h. Smite, stab, slay!"
                                                    }

                                                    CLEAR_VARIABLE("transport_to_board,landing_parties_landed,landing_parties_landed,ships_boarded")

                                                    Endlevel{
                                                        result: "victory"
                                                        bonus: false
                                                        <NEW_GOLD_CARRYOVER(40)
                                                    }
                                                
                                            }
                                    }

                                    <HERO_DEATHS!
err: ../attic/data/campaigns/Son_Of_The_Black_Eye/scenarios/11_Clash_of_Armies.cfg - ./wml_to_wsl/compile.moon:31: Unbalanced WML! table closed by scenario at line 1260
