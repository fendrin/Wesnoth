--textdomain wesnoth
Binary_Path{
    path: "data/campaigns/Under_the_Burning_Suns"
}
Binary_Path{
    path: "data/campaigns/The_Rise_Of_Wesnoth"
}
if have("campaigns/Under_the_Burning_Suns/units/units.cfg")
    Units{
        INCLUDE("campaigns/Under_the_Burning_Suns/utils/kaleh-abilities.cfg")
        INCLUDE("campaigns/Under_the_Burning_Suns/units/units.cfg")
        INCLUDE("campaigns/Under_the_Burning_Suns/units/elves/Kaleh.cfg")
    }

Test{
    name: "Test scenario"
    map_data: "Mm, Mm, Mm, Mm, Mm^Xm, Mm^Xm, Mm^Xm, Gg, Ww, Gg, Dd, Gg, Aa, Gg, Aa, Gg, Hh, Gg, Mm, Gg, Uu, Gg, Wo, Wo, Ch, Wo, Wo, Wo, Gg, Wo, Wo, Wo, Md, Wo, Wo, Wo, Rd, Wo, Wo
Mm, Mm, Mm, Mm, Mm^Xm, Mm^Xm, Mm^Xm, Gg^Vl, Ww^Vm, Gg, Dd^Vda, Gg, Aa^Vea, Aa^Vla, Aa^Vha, Gg, Hh^Vhh, Gg, Mm^Vhh, Gg, Uu^Vu, Gg, Wo, Wo, Ch, Wo, Wo, Wo, Gg^Fet, Wo, Wo, Wo, Md, Wo, Wo, Wo, Rd^Vov, 3 Wo, Wo
Mm, Mm, Mm, Mm, Mm, Mm^Xm, Gg, Gg, Gg, Uu^Vud, Gg, Dd^Vdt, Gg, Gg^Ve, Gg, Gg^Vh, Gg^Vo, Ha^Vhha, Gg, Gs^Vht, Wo, Wo, Cud, Ch, Wo, Wo, Ds, Gg, Wo, Wo^Fet, Hd^Fet, Md^Fet, Wo^Fet, Wo, Re^Kov, Rd^Cov, Wo, Wo, Wo
Mm, Mm, Gg, Gg, Gg, Gg, Gg, Ch, Ch, Ch, Ch, Gg, Gg, Gg, Gg, Gg, Gg^Vo, Gg^Vo, Gg^Em, Ss^Vhs, Gg, Cud, Wo, Wo, Dd, Ds, Wo, Wo, Ha, Hd, Wo, Wo, Ql^Fet, Re^Fet, Wo, Wo, Uu^Fp, Uu, Uu
Mm, Mm, Gg, Gg, Gg, Gg, Gg, Ch, 1 Kh, Ch, Ww, Gg, Gg, Mm^Vhh, Gg, Gg, Gg, Gg, Gg^Es, Gs^Fp, Gs^Fp, Gs^Fp, Gs^Fp, Dd, Wo, Wo, Gs, Ha, Wo, Wo, Mm, Ql, Wo, Wo, Uh^Fp, Uh^Fp, Wo^Fp, Wo^Fp, Wo
Mm, Mm, Gg, Gg, Gg, Gg, Gg, Ch, Ch, Ch, Gg, Ww, Gg, Gg, Gg, Gg, Gg, Gg, Gg^Em, Gs^Fp, Gs^Fp, Gs^Fp, Gs^Fp, Wo, Gs, Gs, Gg^Vh, Ww, Ww^Fp, Mm, Ww, Wo, Rr, Rr, Wo^Fp, Wo^Fp, Gg^Fp, Gg^Fp, Gg
Mm, Mm, Gg, Gg, Gg, Gg, Gg, Ch, Ch, Ch, Gg^Em, Gg, Gg, Gg, Rr, Gg, Rr, Rr, Rr, Gs^Fp, Gs^Fp, Gs^Fp, Gs^Fp, Gs^Fp, Gg^Vh, Rr, Gg, Ww^Fp, Ww^Fp, Hh^Fp, Hh^Ft, Hh^Ft, Wo, Wo, Wo, Gg^Fp, Wo, Gg, Gg
Mm, Mm, Gg, Gg, Gg^Es, Gg, Gg, Gg^Ve, Gg, Gg^Ve, Gg, Gg, Gg, Gg, Gg, Gg, Rr, Gg, Rr, Gg^Efm, Gg, Gg, Gg^Efm, Gg^Em, Gg^Em, Gg, Gg^Fdw, Ww^Fdw, Ww^Fp, Ww^Fp, Ww^Ft, Gg^Ft, Wo, Mm^Xm, Wo, Gg, Wo, Ha, Ha
Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gs, Gg, Gg, Rr, Gg^Em, Gg, Gg^Efm, Gg, Gg^Efm, Gg^Efm, Gg, Gg, Gg^Es, Gg^Fdw, Aa^Fdw, Gg^Fp, Gg, Gg, Wo, Mm^Xm, Wo, Gg, Wo, Ha, Ha
Gg, Gg, Gs^Fp, Gg, Gg, Gg, Gg, Gg, Gg^Es, Gg, Gg, Gs, Gg, Gs, Gg, Gs, Gg, Gg, Re, Gg^Efm, Gg^Efm, Gg^Efm, Gg, Gg^Efm, Gg^Efm, Gg, Gg, Gg^Em, Aa^Fdw, Aa^Fdw, Gg, Gg, Wo, Aa, Wo, Gg, Wo, Hh, Hh
Gg, Gg, Gg, Gg, Gs^Ft, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg^Es, Gs, Gs, Gs, Gg, Re, Gg^Efm, Re, Gg^Efm, Gg, Gg, Gg, Gg, Gg^Em, Gg, Gg, Gg, Gg, Gg, Gg, Wo, Aa, Wo, Md, Wo, Hh, Hh
Gg, Gg, Dd^Do, Gg, Gg, Gg, Gg, Gg^Es, Gg, Gg, Gg, Gs^Es, Gg, Gg, Rd, Gg, Gg^Es, Re, Re, Re, Gg^Efm, Gg, Ch, Ch, Ch, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Wo, Ai, Wo, Md, Wo, Ss^Bw|, Ss^Bw|
Gg, Gg, Gg, Gg, Gg^Fet, Gg, Gg, Gg, Gs^Fpa, Ds^Fp, Gs^Fp, Gg, Gg, Rd, Gg, Rd, Gg, Gg, Gg, Gg, Gg, Gg, Ch, Ch, Ch, Gg, Gg, Gg, Ww, Gg, Wo, Gg, Wo, Ai, Wo, Mm, Wo, Ss, Ss
Xu, Xu, Xu, Gg, Gg, Gg, Gg, Gg, Re^Fp, Gg^Fet, Gg^Fp, Ss^Vm, Gg, Rd, Rd, Rd, Gg, Re, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Wo^Bw\, Wo^Bw/, Wo^Bw|, Ww, Gg, Wo, Dd, Wo, Mm, Wo, Ss, Ss
Xu, Xu, Xu, Ce, Ce, Ke, Ce, Gg, Gg, Re^Fp, Gg^Ve, Gg^Vh, Gg, Gg, Gg, Gg, Ce, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Ss^Bw/, Ww, Ss^Bw|, Ss^Bw\, Gg, Wo, Dd, Wo, Qxu, Wo, Rr, Rr
Xu, Xu, Uu^Uf, Xu, Ce, Ce, Xu, Gg, Uh, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Ke, Ce, Gg, Gg, Gg, Gg, Gg^Es, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Ss^Bw\, Wo, Ds, Wo, Qxu, Wo, Rr, Rr
Xu, Xu, Uu^Uf, Xu, Xu, Xu, Xu, Xu, Uu, Gg, Uh, Gg, Gg, Gg^Es, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Ss, Gg, Gg, 2 Kh, Gg, Gg, Wo, Ds, Wo, Rd, Wo, Uh, Uh
Xu, Xu, Qxu, Qxu, Cud, Xu, Uu, Uu^Ii, Uu^Vu, Gg, Xu, Gg, Gg, Gg, Gg^Ve, Gg, Ch, Gg, Gg, Chr, Chr, Gg, Chw, Ww, Gg, Chs, Chs, Gg, Cud, Gg, Gg, Gg, Wo, Gs, Wo, Rd, Wo, Uh, Uh
Xu, Xu, Xu, Qxu, Ql, Cud, Uh, Uu^Vu, Uu^Uf, Xu, Ql, Gg^Ve, Xu, Gg, Gg, Gg, Kh, Ch, Gg, Khr, Gg, Gg, Khw, Chw, Gg, Khs, Gg, Gg, Kud, Cud, Ww^Bw/, Ww^Bw/, Wo, Gs, Wo, Re, Wo, Uu, Uu
Xu, Xu, Qxu, Qxu, Ql, Ql, Ql, Xu, Xu, Xu, Xu, Xu, Xu, Xu, Xu, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Wo, Gg, Wo, Re, Wo, Uu, Uu
Xu, Xu, Qxu, Qxu, Ql, Ql, Ql, Xu, Xu, Xu, Xu, Xu, Xu, Xu, Xu, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Gg, Wo, Gg, Wo, Re, Wo, Uu, Uu"
    turns: -1
    id: "test"

    <DAWN!
    <MORNING!
    <AFTERNOON!
    <DUSK!
    <FIRST_WATCH!
    <SECOND_WATCH!
    current_time: 3

    victory_music: "loyalists.ogg,underground.ogg,revelation.ogg"
    defeat_music: "sad.ogg"

    side: {
        no_leader: true
        leader: {
            name: "Kaleh"
            type: "Kaleh"
            variation: "Youth"
            modifications: {
                object: {
                    effect: {
                        apply_to: "image_mod"
                        add: "BLEND(255,0,255,25%)"
                    }
                }
            }
            random_gender: true
            id: "test"
            max_hitpoints: 90
            experience: 99
            alignment: "liminal"
        }
        side: 1
        controller: "human"
        suppress_end_turn_confirmation: true
        recruit: "Ghost,Troll Whelp,Assassin,Elvish Hero,Elvish Fighter,Elvish Archer,Horseman,Mage,Elvish Shaman,Red Mage,Spearman,Swordsman,Duelist,Fencer,Elvish Captain,Elvish Ranger,Elvish Shyde,Thief,Rogue,White Mage,Mage of Light,Elvish Sharpshooter,Silver Mage,Vampire Bat,Blood Bat,Dread Bat,Soulless,Walking Corpse,Fire Dragon"
        gold: 2000
        village_support: 5
        team_name: "1"
        shroud: true
        recall_cost: 42
        village: {
            x: 9, y: 7
        }
        village: {
            x: 7, y: 7
        }
        unit: {
            alignment: "lawful"
            x: 8, y: 11
            type: "Elvish Outrider"
            max_hitpoints: 12000
            hitpoints: 12000
            max_experience: 9999
            experience: 9000
            max_moves: 120
            vision: 12
            jamming: 5
            level: 10
            name: "UI testing Outrider called Isor"
            status: {
--dehydrated=yes
--entangled=yes
                poisoned: true
--entangled=yes
                slowed: true
            }
            modifications: {
                amend: true
                <TRAIT_LOYAL!
                <TRAIT_INTELLIGENT!
                <TRAIT_DEXTROUS!
                object: {
                    silent: true
                    effect: {
                        apply_to: "remove_attacks"
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "sword"
--textdomain wesnoth-units
                        description: _ "sword"
--textdomain wesnoth
                        icon: "attacks/greatsword-elven.png"
                        type: "blade"
                        specials: {
                            drains: {
                                id: "life_vortex"
                                name: "Life Vortex"
                                description: "Each successful strike in a battle involving this attack causes the attacker to gain the health that his attack removed from the target.  This has no effect against nonliving targets."
                                value: 0
                                add: 100
                                apply_to: "both"
                            }
                            heal_on_hit: {
                                id: "entropy"
                                name: "Entropy"
                                description: "Each successful strike in a battle involving this attack causes the attacker to lose 4 HP.  This has no effect against nonliving targets."
                                filter_opponent: {
                                    not: {
                                        status: "not_living"
                                    }
                                }
                                sub: 4
                                apply_to: "both"
                            }
                        }
                        range: "melee"
                        damage: 9
                        number: 5
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "bow"
--textdomain wesnoth-units
                        description: _ "bow"
--textdomain wesnoth
                        icon: "attacks/bow-elven.png"
                        type: "pierce"
                        specials: {
                            drains: {
                                id: "empathic_weapon"
                                name: "Empathic Weapon"
                                description: "All damage dealt by this attack to a living target is dealt to the user as well"
                                multiply: -2
                            }
                            heal_on_hit: {
                                id: "rejuvenating_weapon"
                                name: "Rejuvenating Weapon (10)"
                                description: "Each successful strike with this weapon heals the user for 10 HP"
                                value: 10
                            }
                        }
                        range: "ranged"
                        damage: 9
                        number: 3
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "longbow"
--textdomain wesnoth-units
                        description: _ "longbow"
--textdomain wesnoth
                        icon: "attacks/bow-elven-magic.png"
                        type: "pierce"
                        specials: {
                            <WEAPON_SPECIAL_MARKSMAN!
                            drains: {
                                id: "drains"
                                name: "drains 20%"
                                description: "This unit drains health from living units, healing itself for 20% of the amount of damage it deals (rounded down)."
                                value: 20
                            }
                            heal_on_hit: {
                                id: "drains"
                                name: "sacrifice 5"
                                description: "Each successful attack costs this unit 5 HP."
                                sub: 5
                            }
                        }
                        range: "ranged"
                        damage: 10
                        number: 5
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "life bomb"
                        description: "life bomb"
                        type: "impact"
                        specials: {
                            heal_on_hit: {
                                id: "drains"
                                name: "life copy 20"
                                description: "When this attack hits a living unit, the user is healed for 20 HP."
                                filter_opponent: {
                                    not: {
                                        status: "not_living"
                                    }
                                }
                                value: 20
                            }
                        }
                        damage: 3
                        number: 2
                        range: "ranged"
                    }
                }
            }
            abilities: {
                <ABILITY_SKIRMISHER!
                <ABILITY_ILLUMINATES!
            }
        }

        unit: {
            x: 9, y: 7
            type: "Silver Mage"
            generate_name: true
        }
        unit: {
            x: 4, y: 8
            type: "Elvish Avenger"
            id: "statue"
            generate_name: true
            hitpoints: 4
            vision: 15
            ellipse: "none"
            status: {
                petrified: true
            }
            overlays: "wesnoth-icon.png~CROP(10,10,20,20)"
        }
        unit: {
            x: 14, y: 6
            type: "Footpad"
            generate_name: true
            modifications: {
                trait: {
                    id: "feral"
                    availability: "musthave"
                    male_name: "feral"
                    female_name: "female^feral"
                    description: "Receive at most 40% defense in villages"
                    effect: {
                        apply_to: "defense"
                        replace: true
                        defense: {
                            village: -60
                        }
                    }
                }
                trait: {
                    id: "overpowered"
                    name: "overpowered"
                    availability: "musthave"
                    effect: {
                        apply_to: "attack"
                        increase_attacks: 1
                        increase_damage: 1
                    }
                }
            }
        }
        unit: {
            x: 12, y: 8
            type: "Thief"
            generate_name: true
            hitpoints: 9
            status: {
                poisoned: true
                entangled: true
            }
        }
        unit: {
-- Unhealable unit
            x: 9, y: 8
            type: "Peasant_unhealable"
            name: "Unhealable"
            image_icon: "misc/key.png"
            generate_name: true
            status: {
                unhealable: true
            }
        }
        unit: {
-- A unit without a portrait.
            x: 18, y: 9
            type: "Wolf Rider"
            generate_name: true
        }
        unit: {
            x: 17, y: 10
            type: "Elvish Druid"
            generate_name: true
        }
        unit: {
-- A unit with an old small portrait.
            x: 19, y: 10
            type: "Thief"
            generate_name: true
        }
        unit: {
            x: 17, y: 11
            type: "Elvish Shyde"
            profile: "portraits/elves/shyde.png~BLIT(items/gold-coins-large.png)"
            generate_name: true
        }
        unit: {
-- A unit whose portrait is only shown on the right side.
            x: 18, y: 11
            type: "White Mage"
            gender: "female"
            generate_name: true
        }
        unit: {
-- A unit with a cold attack
            x: 19, y: 11
            type: "Dark Adept"
            generate_name: true
            modifications: {
                object: {
                    silent: true
                    effect: {
                        apply_to: "halo"
                        halo: "halo/darkens-aura.png"
                    }
                    effect: {
                        apply_to: "new_ability"
                        abilities: {
                            illuminates: {
                                id: "illumination"
                                value: -25
                                min_value: -25
                                cumulative: false
                                name: "darkens"
                                female_name: "female^darkens"
                                description: "darkens and stuff"
                                affect_self: true
                            }
                        }
                    }
                    effect: {
                        apply_to: "attack"
                        name: "chill wave"
                        increase_attacks: 12
                        set_specials: {
                            mode: "append"
                            heal_on_hit: {
                                id: "sacrifice"
                                name: "Sacrifice"
                                description: "This unit sacrifices its own life in order to make more attacks."
                                value: -5
                            }
                        }
                    }
                    effect: {
                        apply_to: "attack"
                        name: "shadow wave"
                        increase_attacks: 18
                        set_specials: {
                            mode: "append"
                            heal_on_hit: {
                                id: "sacrifice"
                                name: "Greater Sacrifice"
                                description: "This unit sacrifices its own life in order to make more attacks."
                                value: -6
                            }
                        }
                    }
                }
            }
        }
        unit: {
-- Drain tester
            x: 20, y: 7
            type: "Elvish Champion"
            generate_name: true
            <IS_HERO!
            modifications: {
                object: {
                    silent: true
                    effect: {
                        apply_to: "remove_attacks"
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "sword"
--textdomain wesnoth-units
                        description: _ "sword"
--textdomain wesnoth
                        icon: "attacks/greatsword-elven.png"
                        type: "blade"
                        specials: {
                            drains: {
                                id: "life_vortex"
                                name: "Life Vortex"
                                description: "Each successful strike in a battle involving this attack causes the attacker to gain the health that his attack removed from the target.  This has no effect against nonliving targets."
                                value: 0
                                add: 100
                                apply_to: "both"
                            }
                            heal_on_hit: {
                                id: "entropy"
                                name: "Entropy"
                                description: "Each successful strike in a battle involving this attack causes the attacker to lose 4 HP.  This has no effect against nonliving targets."
                                filter_opponent: {
                                    not: {
                                        status: "not_living"
                                    }
                                }
                                sub: 4
                                apply_to: "both"
                            }
                        }
                        range: "melee"
                        damage: 9
                        number: 5
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "bow"
--textdomain wesnoth-units
                        description: _ "bow"
--textdomain wesnoth
                        icon: "attacks/bow-elven.png"
                        type: "pierce"
                        specials: {
                            drains: {
                                id: "empathic_weapon"
                                name: "Empathic Weapon"
                                description: "All damage dealt by this attack to a living target is dealt to the user as well"
                                multiply: -2
                            }
                            heal_on_hit: {
                                id: "rejuvenating_weapon"
                                name: "Rejuvenating Weapon (10)"
                                description: "Each successful strike with this weapon heals the user for 10 HP"
                                value: 10
                            }
                        }
                        range: "ranged"
                        damage: 9
                        number: 3
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "longbow"
--textdomain wesnoth-units
                        description: _ "longbow"
--textdomain wesnoth
                        icon: "attacks/bow-elven-magic.png"
                        type: "pierce"
                        specials: {
                            <WEAPON_SPECIAL_MARKSMAN!
                            drains: {
                                id: "drains"
                                name: "drains 20%"
                                description: "This unit drains health from living units, healing itself for 20% of the amount of damage it deals (rounded down)."
                                value: 20
                            }
                            heal_on_hit: {
                                id: "drains"
                                name: "sacrifice 5"
                                description: "Each successful attack costs this unit 5 HP."
                                sub: 5
                            }
                        }
                        range: "ranged"
                        damage: 10
                        number: 5
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "life bomb"
                        description: "life bomb"
                        type: "impact"
                        specials: {
                            heal_on_hit: {
                                id: "drains"
                                name: "life copy 20"
                                description: "When this attack hits a living unit, the user is healed for 20 HP."
                                filter_opponent: {
                                    not: {
                                        status: "not_living"
                                    }
                                }
                                value: 20
                            }
                        }
                        damage: 3
                        number: 2
                        range: "ranged"
                    }
                }
            }
        }
    }

    label: {
        x: 20, y: 12
        text: "Enhance Vision"
        tooltip: "Set the unit's vision to 15."
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 20, y: 12
        }
        do: ->
            Message{
                speaker: "unit"
                message: "Now my Vision value is 15 and I can see 16 hex fields wide."
            }
            Modify_Unit{
                filter: {
                    x: 20, y: 12
                }
                vision: 15
            }
    }

    label: {
        x: 18, y: 7
        text: "Hero or not?"
        tooltip: "Toggle the hero status."
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 18, y: 7
        }
        do: ->
            If{
                variable: {
                    name: "unit.ellipse"
                    equals: "misc/ellipse-hero"
                }
                then: ->
                    Message{
                        speaker: "unit"
                        message: "I am no longer a hero!"
                    }
                    UNMAKE_HERO(unit.id)
                
                else: ->
                    Message{
                        speaker: "unit"
                        message: "I am now a hero!"
                    }
                    MAKE_HERO(unit.id)
                
            }
    }

    label: {
        x: 14, y: 10
        text: "Vision Test"
        tooltip: "Visibility Check of (8,15)"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 14, y: 10
        }
        do: ->
            Message{
                speaker: "narrator"
                icon: "wesnoth-icon.png"
                message: "Checking visibility of (8,15)..."
            }
            If{
                have_location: {
                    x: 8, y: 15
                    filter_vision: {
                        side: 1
                        respect_fog: false
                    }
                }
                then: ->
                    If{
                        have_location: {
                            x: 8, y: 15
                            filter_vision: {
                                side: 1
                                visible: false
                                respect_fog: false
                            }
                        }
                        then: ->
                            Message{
                                speaker: "narrator"
                                icon: "wesnoth-icon.png"
                                message: "HORRORS FILTERS ARE ALL TRUE!"
                            }
                        
                        else: ->
                            Message{
                                speaker: "narrator"
                                icon: "wesnoth-icon.png"
                                message: "You can see it, can't you?"
                            }
                            If{
                                have_location: {
                                    x: 8, y: 15
                                    filter_vision: {
                                        side: 1
                                    }
                                }
                                then: ->
                                    If{
                                        have_location: {
                                            x: 8, y: 15
                                            filter_vision: {
                                                side: 1
                                                visible: false
                                            }
                                        }
                                        then: ->
                                            Message{
                                                speaker: "narrator"
                                                icon: "wesnoth-icon.png"
                                                message: "HORRORS FILTERS ARE ALL TRUE!"
                                            }
                                        
                                        else: ->
                                            Message{
                                                speaker: "narrator"
                                                icon: "wesnoth-icon.png"
                                                message: "Clear sailing!"
                                            }
                                        
                                    }
                                
                                else: ->
                                    If{
                                        have_location: {
                                            x: 8, y: 15
                                            filter_vision: {
                                                side: 1
                                                visible: false
                                            }
                                        }
                                        then: ->
                                            Message{
                                                speaker: "narrator"
                                                icon: "wesnoth-icon.png"
                                                message: "But the fog, it blinds you!"
                                            }
                                        
                                        else: ->
                                            Message{
                                                speaker: "narrator"
                                                icon: "wesnoth-icon.png"
                                                message: "HORRORS FILTERS ARE ALL FALSE!"
                                            }
                                        
                                    }
                                
                            }
                        
                    }
                
                else: ->
                    If{
                        have_location: {
                            x: 8, y: 15
                            filter_vision: {
                                side: 1
                                visible: false
                            }
                        }
                        then: ->
                            Message{
                                speaker: "narrator"
                                icon: "wesnoth-icon.png"
                                message: "It is invisible!"
                            }
                        
                        else: ->
                            Message{
                                speaker: "narrator"
                                icon: "wesnoth-icon.png"
                                message: "HORRORS FILTERS ARE ALL FALSE!"
                            }
                        
                    }
                
            }
    }

    event: {
        name: "attack"
        filter: {
            type: "Elvish Shyde"
        }
        do: ->
            MODIFY_UNIT({id: second_unit.id}, "side", 1)
    }
    event: {
        name: "prestart"
        do: ->
            VARIABLE("teleports_on", false)
    }
    label: {
        x: 20, y: 13
        text: "Teleport switch"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 20, y: 13
        }
        do: ->
            If{
                variable: {
                    name: "teleports_on"
                    boolean_equals: false
                }
                then: ->
                    Tunnel{
                        id: "one"
                        bidirectional: true
                        always_visible: true
                        source: {
                            x: 8
                            y: 6
                        }
                        target: {
                            x: 20
                            y: 12
                        }
                        filter: {
                        }
                    }
                    Tunnel{
                        id: "two"
                        bidirectional: false
                        source: {
                            x: 20
                            y: 14
                        }
                        target: {
                            x: 21
                            y: 4
                        }
                        filter: {
                        }
                    }
                    VARIABLE("teleports_on", true)
                    Message{
                        speaker: "narrator"
                        icon: "wesnoth-icon.png"
                        message: "Teleporters activated"
                    }
                
                else: ->
                    Tunnel{
                        id: "one,two"
                        remove: true
                    }
                    VARIABLE("teleports_on", false)
                    Message{
                        speaker: "narrator"
                        icon: "wesnoth-icon.png"
                        message: "Teleporters deactivated"
                    }
                
            }
    }

    side: {
        type: "Orcish Warlord"
        id: "Urug-Telfar"
        side: 2
        controller: "ai"
        canrecruit: true
        recruit: "Orcish Grunt,Troll Whelp,Wolf Rider,Orcish Archer,Orcish Assassin,Saurian Skirmisher,Naga Fighter"
        gold: 40
        income: 10
        team_name: "2"
        leader: {
            type: "Orcish Warlord"
            id: "Asir-Ulrug"
            x: 28
            y: 18
        }
        unit: {
            x: 12, y: 13
            type: "Orcish Archer"
            generate_name: true
            jamming: 5
        }
        unit: {
            x: 10, y: 7
            type: "Orcish Archer"
            generate_name: true
        }
        unit: {
            x: 18, y: 12
            type: "Ghost"
            name: "Steadfast tester"
            modifications: {
                object: {
                    silent: true
                    effect: {
                        apply_to: "new_ability"
                        abilities: {
                            <ABILITY_STEADFAST!
                        }
                    }
                }
            }
        }
        village: {
            x: 26, y: 5
        }
        unit: {
            x: 24, y: 7
            type: "Silver Mage"
            name: "Hidden Teleporter"
        }
        unit: {
            x: 18, y: 10
            type: "Soulless"
            modifications: {
                object: {
                    silent: true
                    effect: {
                        apply_to: "attack"
                        increase_damage: 50
                    }
                    effect: {
                        apply_to: "hitpoints"
                        increase_total: 30
                    }
                    effect: {
                        apply_to: "defense"
                        replace: true
                        defense: {
                            flat: 10
                        }
                    }
                }
            }
        }
        unit: {
            x: 20, y: 5
            type: "Ancient Wose"
            id: "rithrandil"
            name: "Rithrandil"
            profile: "portraits/rithrandil.png"
            modifications: {
                object: {
                    effect: {
                        apply_to: "movement"
                        set: 0
                    }
                }
            }
        }
        unit: {
-- Drain tester (for undead and default drain)
            x: 21, y: 7
            type: "Lich"
            generate_name: true
        }
        unit: {
-- Drain tester
            x: 21, y: 8
            type: "Elvish Sharpshooter"
            generate_name: true
            modifications: {
                object: {
                    silent: true
                    effect: {
                        apply_to: "attack"
                        name: "sword"
                        set_specials: {
                            mode: "append"
                            heal_on_hit: {
                                id: "fiery"
                                name: "fiery 4"
                                name_inactive: "fiery 4"
                                description: "A successful hit against this unit costs the opponent 4 HP."
                                description_inactive: "A successful hit against this unit costs the opponent 4 HP."
                                sub: 4
                                apply_to: "opponent"
                            }
                        }
                    }
                    effect: {
                        apply_to: "new_attack"
                        name: "lifebow"
                        description: "lifebow"
                        icon: "attacks/bow-elven-magic.png"
                        type: "pierce"
                        specials: {
                            <WEAPON_SPECIAL_MARKSMAN!
                            drains: {
                                id: "drains"
                                name: "drains 100%"
                                description: "This unit drains health from living units, healing itself for 100% of the amount of damage it deals (rounded down)."
                                value: 100
                            }
                        }
                        range: "ranged"
                        damage: 4
                        number: 5
                    }
                }
            }
        }
    }
    side: {
        side: 3
        controller: "ai"
        team_name: "1,2"
        type: "Gryphon Master"
        name: "Friendly Explorer"
        canrecruit: true
        fog: true
        shroud: true
        share_maps: false
        share_view: false
    }
    event: {
        name: "turn refresh"
        first_time_only: false
        do: ->
            If{
                variable: {
                    name: "side_number"
                    equals: 3
                }
                then: ->
-- This is to work around a broken idle_ai (it moves)
                    End_Turn{
                    }
                
            }
    }
    label: {
        x: 1, y: 1
        text: "Explore the map"
    }

    event: {
        name: "moveto"
        filter: {
            side: 1
            filter_adjacent: {
                id: "rithrandil"
            }
        }
        do: ->
            Message{
                id: "rithrandil"
                message: "Hello there"
            }
    }

    <if DEBUG_MODE then {
        event: {
            name: "select"
            first_time_only: false
            filter: {
                type: "Wolf Rider"
            }
            do: ->
                Message{
                    speaker: "narrator"
                    icon: "wesnoth-icon.png"
                    message: "Select event triggered on Wolf Rider"
                }
        }
    }

    if have("~add-ons/Wesnoth_Lua_Pack/_main.cfg")
        INCLUDE("~add-ons/Wesnoth_Lua_Pack/utils.cfg")
        WLP_QUICK_DEBUG!
    

    label: {
        x: 14, y: 7
        text: "Custom dialog"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 14, y: 7
        }
        do: ->
            Lua{
                code: [[
local types = { "Ancient Lich", "Ancient Wose", "Elvish Avenger" }

local result = wesnoth.synchronize_choice(function()
    -- Human choice
    local helper = wesnoth.require "helper"
    local T = helper.set_wml_tag_metatable {}
    local _ = wesnoth.textdomain "wesnoth"
    local dialog = {
      T.helptip { id = "helptip_large" },
      T.tooltip { id = "tooltip_large" },
      T.grid { T.row {
        T.column { T.grid {
          T.row { T.column { horizontal_grow = true, T.listbox { id = "the_list",
            T.list_definition { T.row { T.column { horizontal_grow = true,
              T.toggle_panel { T.grid { T.row {
                T.column { horizontal_alignment = "left", T.label { id = "the_label" } },
                T.column { T.image { id = "the_icon" } }
              } } }
            } } }
          } } },
          T.row { T.column { T.grid { T.row {
            T.column { T.button { id = "ok", label = _"OK" } },
            T.column { T.button { id = "cancel", label = _"Cancel" } }
          } } } },
          T.row { T.column {
            T.toggle_button { id = "flip", label = "Flip" }
          } }
        } },
        T.column { T.image { id = "the_image" } }
      } }
    }

    local function preshow()
        local function select()
            local i = wesnoth.get_dialog_value "the_list"
            local ut = wesnoth.unit_types[types[i]].__cfg
            local profile = string.gsub(ut.profile, "([^/]+)$", "transparent/%1")
            if wesnoth.get_dialog_value "flip" then profile = profile .. "~FL()" end
            wesnoth.set_dialog_value(profile, "the_image")
        end
        wesnoth.set_dialog_callback(select, "the_list")
        wesnoth.set_dialog_callback(select, "flip")
        for i,v in ipairs(types) do
            local ut = wesnoth.unit_types[v].__cfg
            wesnoth.set_dialog_value(ut.name, "the_list", i, "the_label")
            wesnoth.set_dialog_value(ut.image, "the_list", i, "the_icon")
        end
        wesnoth.set_dialog_value(2, "the_list")
        select()
        wesnoth.set_dialog_canvas(2, {
            T.rectangle { x = 20, y = 20, w = 20, h = 20, fill_color= "0,0,255,255" },
            T.rectangle { x = 30, y = 30, w = 20, h = 20, fill_color = "255,0,0,255" }
        })
    end

    local li = 0
    local r = wesnoth.show_dialog(dialog, preshow, function ()
        li = wesnoth.get_dialog_value "the_list"
    end)
    return { button = r, list_item = li }
end, function()
    -- AI choice
    return { button = -1, list_item = math.random(#types) }
end)

if result.button == -1 then
    local ev = wesnoth.current.event_context
    wesnoth.transform_unit(wesnoth.get_units{x=ev.x1, y=ev.y1}[1], types[result.list_item])
    wesnoth.fire("redraw", {})
end
            ]]
            }
    }

    label: {
        x: 3, y: 2
        text: "objectives test"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 3, y: 2
        }
        do: ->
            Lua{
                code: [[
                local obj_note = string.rep("w", 5000)
                wesnoth.wml_actions.objectives({ note = obj_note })
            ]]
            }
    }

    event: {
        name: "moveto"
        filter: {
            x: 1, y: 1
        }
        do: ->
            Modify_Side{
                side: 3
                share_maps: true
            }
            Message{
                speaker: "unit"
                message: "We should now be sharing maps with side 3!"
            }
            Label{
                x: 1, y: 1
                text: "Rename our kind friends"
            }
            Event{
                name: "moveto"
                filter: {
                    x: 1, y: 1
                }
                do: ->
                    Modify_Side{
                        side: 3
                        user_team_name: "Neutral"
                    }
                    Message{
                        side: 3
                        message: "That’s right! We’re neutral!"
                    }
                    Label{
                        x: 1, y: 1
                        text: ""
                    }
            }
    }

    event: {
        name: "preload"
        first_time_only: false
        do: ->
            Lua{
                code: [[
                local wml_actions = wesnoth.wml_actions
                function wml_actions.my_lua_action(t)
                    wesnoth.fire("label", { text =
                        string.format("Lua says:\n%d units and %d gold on side %d",
                            #wesnoth.get_units { side = t.on_side },
                            wesnoth.sides[t.on_side].gold,
                            t.on_side),
                        x = t.x, y = t.y })
                end
                function wml_actions.check_substitution(t)
                    wesnoth.set_variable("substitution_variable", 1)
                    if t.value ~= "Number 2" then
                        wesnoth.message("Substitution is not delayed! " .. tostring(t.value))
                    end
                end
                local function get_child(cfg, name)
                    for i = 1, #cfg do
                        local v = cfg[i]
                        if v[1] == name then return v[2] end
                    end
                end
                function has_teleport(u)
                    return wesnoth.unit_ability(u, "teleport")
                end
                local old_unit_status = wesnoth.theme_items.unit_status
                function wesnoth.theme_items.unit_status()
                    local u = wesnoth.get_displayed_unit()
                    if not u then return {} end
                    local s = old_unit_status()
                    if u.status.entangled then
                        table.insert(s, { "element", {
                            image = "misc/key.png",
                            tooltip = "entangled: This unit is entangled. It cannot move but it can still attack."
                        } })
                    end
                    return s
                end
            ]]
            }
    }

    event: {
        name: "turn refresh"
        first_time_only: false
        do: ->
            Lua{
                code: [[
                for i,u in ipairs(wesnoth.get_units()) do
                    if u.status.entangled then
                        u.moves = 0
                    end
                end
            ]]
            }
    }

    event: {
        name: "prestart"
        do: ->
            Lua{
                code: [[
                local args = ...
                local team = wesnoth.sides[args.side];
                team.gold = team.gold + args.gold;
            ]]
                args: {
                    side: 1
                    gold: -1900
                }
            }
            Modify_Unit{
                filter: {
                    x: 14, y: 6
                }
                object: {
                    effect: {
                        apply_to: "image_mod"
                        add: "PAL(FFDC02,EA9752,C4793A,C35029,6B2C29,A34C29,D5561F,343424,353624,BF5746 > BCBCBC,7D7D7D,5E5E5E,434343,232323,3B3B3B,494949,232323,232323,484848)"
                    }
                    effect: {
                        apply_to: "image_mod"
                        add: "B(50)~R(-50)"
                    }
                }
                object: {
                    effect: {
                        apply_to: "new_attack"
                        name: "lightning"
                        description: "lightning"
                        icon: "attacks/lightning.png"
-- Testcase for custom attack types and ranges
                        type: "electrical"
                        range: "very_long"
                        specials: {
                            <WEAPON_SPECIAL_MAGICAL!
                        }
                        damage: 14
                        number: 4
                    }
                }
            }
            Music{
                name: "traveling_minstrels.ogg"
                ms_before: 12000
            }
            Set_Menu_Item{
                description: "Calculate unit worth"
                id: "test98"
                show_if: {
                    have_unit: {
                        x: x1
                        y: y1
                    }
                }
                command: ->
                    Unit_Worth{
                        x: x1
                        y: y1
                    }
                    Message{
                        x: x1, y: y1
                        message: "I seem to be worth #{unit_worth} gold!
This is based on the following facts:
I cost $cost gold and am at $health|% health.
My best advancement costs $next_cost gold and I’m $experience|% there."
                    }
                
            }
            Set_Menu_Item{
                description: "Lua"
                id: "test99"
                filter_location: {
                    filter: {
                        type: "Kaleh"
                    }
                }
                command: ->
                    Message{
                        speaker: "narrator"
                        message: "Enter Lua code"
                        text_input: {
                            variable: "code"
                        }
                    }
                    Set_Variables{
                        name: "tag"
                        mode: "replace"
                        value: {
                            code: code
                        }
                    }
                    Insert_Tag{
                        name: "lua"
                        variable: "tag"
                    }
                
            }

            Set_Menu_Item{
                description: "Show movement range"
                id: "show_movement_range"
                filter_location: {
                    filter: {
                    }
                }
                command: ->
                    Store_Reachable_Locations{
                        filter: {
                            x: x1, y: y1
                        }

                        variable: "unit_reach"
                    }

                    FOREACH("unit_reach", "i")
                    Item{
                        x: unit_reach[i].x, y: unit_reach[i].y
                        image: "misc/waypoint.png"
                    }
                    NEXT("i")

                    Event{
                        name: {"select", "side turn", "moveto"}
                        do: ->
                            FOREACH("unit_reach", "i")
                            Remove_Item{
                                x: unit_reach[i].x, y: unit_reach[i].y
                                image: "misc/waypoint.png"
                            }
                            NEXT("i")

                            Redraw{
                            }

                            CLEAR_VARIABLE("unit_reach")
                    }
                
            }

            Set_Menu_Item{
                description: "Show attack range"
                id: "show_attack_range"
                filter_location: {
                    filter: {
                    }
                }
                command: ->
                    Store_Reachable_Locations{
                        filter: {
                            x: x1, y: y1
                        }

                        range: "attack"
                        variable: "unit_reach"
                    }

                    Lua{
                        code: [[
                        local location_set = wesnoth.require 'location_set'
                        local items = wesnoth.require 'wml/items'
                        local locs = location_set.of_wml_var 'unit_reach'
                        locs:iter(function(x, y)
                            items.place_image(x, y, 'misc/waypoint.png~CS(255,-127,-127)')
                        end)
                    ]]
                    }

                    Event{
                        name: {"select", "side turn", "moveto"}
                        do: ->
                            FOREACH("unit_reach", "i")
                            Remove_Item{
                                x: unit_reach[i].x, y: unit_reach[i].y
                                image: "misc/waypoint.png~CS(255,-127,-127)"
                            }
                            NEXT("i")

                            Redraw{
                            }

                            CLEAR_VARIABLE("unit_reach")
                    }
                
            }
            Set_Menu_Item{
                description: "Reload and execute Lua code"
                id: "reload_and_execute_lua_code"
-- This command expects a (custom) file data/lua/code.lua of the form
--
-- local code = {}
-- function code.main()
--    wesnoth.message("hello world")
-- end
-- return code
--
-- The file is not in the repository to allow adding custom stuff to it.
                command: ->
                    Lua{
                        code: [[
                        local codeFile = "lua/code.lua"
                        if wesnoth.have_file(codeFile) then
                            local code = wesnoth.dofile(codeFile)
                            if type(code) == "table" and type(code.main) == "function" then
                                code.main()
                            else
                                wesnoth.message(codeFile.." must return a table with a 'main' function.")
                            end
                        else
                            wesnoth.message("To use this command, create a file 'data/lua/code.lua' in the wesnoth source directory that returns a table with a 'main' function.")
                        end
                    ]]
                    }
                
            }
    }

    event: {
        name: "prerecruit"
        do: ->
            Message{
                speaker: "narrator"
                message: "testing prerecruit"
                image: "wesnoth-icon.png"
            }
    }

    event: {
        name: "prestart"
        do: ->
            Gold{
                side: 1
                amount: 42
            }
    }

    event: {
        name: "start"
        do: ->
            Gold{
                side: 1
                amount: 1000
            }

            Lua{
                code: [[
                wesnoth.set_village_owner(20, 1, 1)
                local u = wesnoth.get_units({ lua_function = "has_teleport" })[1]
                local t, c = wesnoth.find_path(u, 23, 7)
                for i,l in ipairs(t) do
                    wesnoth.fire("item",
                        { x = l[1], y = l[2], image = "items/buckler.png" })
                end
                wesnoth.fire("label",
                    { x = 23, y = 7, text = string.format("Move cost: %d", c) })
            ]]
            }
    }

    event: {
        name: "test1"
        first_time_only: false
        do: ->
            Select_Unit{
                type: "Elvish Avenger"
                fire_event: true
            }
    }

    event: {
        name: "select"
        first_time_only: false
        filter: {
            type: "Elvish Avenger"
            filter_wml: {
                status: {
                    petrified: true
                }
            }
        }
        do: ->
            Message{
                speaker: "unit"
                message: "Oh hi"
            }
    }

    event: {
        name: "prestart"
        do: ->
            Time_Area{
                id: "cave"
                <UNDERGROUND!
                terrain: {"U*^*", "Q*", "Xu", "Kud", "Cud"}
                x: "0-14"
                y: "13-20"
            }
            Label{
                x: 8, y: 11
                text: "Filter Area"
                tooltip: "Test filtering areas
<b>filter</b> with area=test_area
<span color='#bcb088'><b>x,y=8,11</b></span>"
            }
            Time_Area{
                x: 8, y: 11
                id: "test_area"
                <DEFAULT_SCHEDULE_24H!
                current_time: 13
            }
    }

    event: {
        name: "prestart"
        do: ->
            Sound_Source{
                id: "birds"
                sounds: {"ambient/birds1.ogg", "ambient/birds2.ogg", "ambient/birds3.ogg"}
                delay: 0
                chance: 100
                check_fogged: true
                loop: -1
                x: 21
                y: 5
                full_range: 3
                fade_range: 5
            }
    }

    event: {
        name: "new turn"
        first_time_only: false
        do: ->
            My_Lua_Action{
                on_side: 1
                x: 13, y: 3
            }
    }

    event: {
        name: "new turn"
        do: ->
            Set_Variable{
                name: "substitution_variable"
                value: 0
            }
            Check_Substitution{
                value: "Number #{(#{substitution_variable*2)"
            }
    }

    label: {
        x: 4, y: 3
        text: "randomness"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 4, y: 3
        }
        do: ->
            VARIABLE_OP("minus_one", "rand", "-1..-1")
            VARIABLE_OP("zero", "rand", "0..0")
            VARIABLE_OP("bool", "rand", "0..1")
            VARIABLE_OP("one", "rand", "1..1")
            VARIABLE_OP("below_ten", "rand", "0..9")
            VARIABLE_OP("ascii", "rand", "one,two,three")
            VARIABLE_OP("mixed", "rand", "0..3,one,two,three,4..9,zero")
            Message{
                speaker: "narrator"
                image: "wesnoth-icon.png"
                message: "Today, 0..0 = #{zero, −1..−1 = #{minus_one, 1..1 = #{one and 0..1 = #{bool.
Also, 0..9 = $below_ten, one,two,three = $ascii and the bonus answer is $mixed."
            }
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10, y: 5, canrecruit: true, side: 1
        }
        do: ->
            Message{
                speaker: "unit"
                message: "What am I supposed to be doing again?"
            }
            Show_Objectives{
                side: 1
            }
    }
    event: {
        name: "start"
        get_global_variable: {
            side: "global"
            namespace: "demo.sub.name.space"
            from_global: "saved_unit"
            to_local: "store"
        }
        do: ->
            If{
                not: {
                    variable: {
                        name: "store.x"
                        equals: empty
                    }
                }
                then: ->
                    Set_Variable{
                        name: "store.moves"
                        value: store.max_moves
                    }
                    Set_Variable{
                        name: "store.hitpoints"
                        value: store.max_hitpoints
                    }
                    Unstore_Unit{
                        variable: "store"
                        find_vacant: false
                    }
                    Message{
                        speaker: "narrator"
                        message: "Unit recalled from storage."
                    }
                
            }
            Get_Global_Variable{
                side: "global"
                namespace: "demo.sub.name"
                from_global: "savings"
                to_local: "estate"
            }
            If{
                not: {
                    variable: {
                        name: "estate"
                        equals: empty
                    }
                }
                then: ->
                    Store_Gold{
                        side: 1
                        variable: "cur"
                    }
                    Set_Variable{
                        name: "blah"
                        value: estate
                        sub: cur
                    }
                    If{
                        variable: {
                            name: "blah"
                            greater_than: 0
                        }
                        then: ->
                            Gold{
                                amount: blah
                                side: 1
                            }
                        
                    }
                
            }
            Get_Global_Variable{
                side: "global"
                namespace: "demo.sub"
                from_global: "greeting"
                to_local: "greeting"
            }
            Objectives{
                objective: {
                    condition: "win"
                    description: "Defeat the enemy leader (he’s at 29,16!)"
                    show_if: {
                        have_unit: {
                            x: 29, y: 16, canrecruit: true, side: 2
                        }
                    }
                }
                objective: {
                    condition: "win"
                    description: "Defeat the enemy leader (he’s at 28,18!)"
                    show_if: {
                        have_unit: {
                            x: 28, y: 18, canrecruit: true, side: 2
                        }
                    }
                }
                objective: {
                    condition: "win"
                    description: "Defeat the enemy leader (I have no clue where he is)"
                    show_if: {
                        not: {
                            have_unit: {
                                canrecruit: true, side: 2
                                and: {
                                    x: 29, y: 16
                                    or: {
                                        x: 28, y: 18
                                    }
                                }
                            }
                        }
                    }
                }
                objective: {
                    condition: "lose"
                    description: greeting
                    show_if: {
                        not: {
                            variable: {
                                name: "greeting"
                                equals: empty
                            }
                        }
                    }
                }
            }
            Get_Global_Variable{
                namespace: "demo"
                side: "global"
                from_global: "villages"
                to_local: "territory"
            }
            If{
                not: {
                    variable: {
                        name: "territory[1].x"
                        equals: empty
                    }
                }
                then: ->
                    FOREACH("territory", "i")
                    Capture_Village{
                        side: territory[i].owner_side
                        x: territory[i].x, y: territory[i].y
                    }
                    NEXT("i")
                
            }
            CLEAR_VARIABLE("store")
            CLEAR_VARIABLE("estate")
            CLEAR_VARIABLE("greeting")
            CLEAR_VARIABLE("territory")
            Clear_Global_Variable{
                namespace: "demo.sub.name.space"
                side: "global"
                global: "saved_unit"
                immediate: true
            }
            Clear_Global_Variable{
                namespace: "demo.sub.name"
                side: "global"
                global: "savings"
            }
            Clear_Global_Variable{
                namespace: "demo.sub"
                side: "global"
                global: "greeting"
            }
            Clear_Global_Variable{
                namespace: "demo"
                side: "global"
                global: "villages"
            }
    }

    label: {
        x: 7, y: 5
        text: "Memory phone"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 7
            y: 5
            side: 1
        }
        get_global_variable: {
            side: "global"
            namespace: "demo.sub"
            from_global: "greeting"
            to_local: "greeting"
        }
        do: ->
            If{
                not: {
                    variable: {
                        name: "greeting"
                        equals: empty
                    }
                }
                then: ->
                    Message{
                        speaker: "narrator"
                        message: greeting
                    }
                    Message{
                        speaker: "narrator"
                        message: "Is this greeting really okay?"
                        option: {
                            label: "Yes"
                        }
                        option: {
                            label: "No"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    message: "How would you like to be greeted?"
                                    text_input: {
                                        variable: "greeting"
                                    }
                                }
                                If{
                                    not: {
                                        variable: {
                                            name: "greeting"
                                            equals: empty
                                        }
                                    }
                                    then: ->
                                        Message{
                                            speaker: "narrator"
err: ../attic/data/scenario-test.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 1815:                                         message="Excellent! ""$greeting|"" will appear as your failure condition next time you play this scenario."
                                        }
                                    
                                }
                            
                        }
                    }
                
                else: ->
                    Message{
                        speaker: "narrator"
                        message: "How would you like to be greeted?"
                        text_input: {
                            variable: "greeting"
                        }
                    }
                    If{
                        not: {
                            variable: {
                                name: "greeting"
                                equals: empty
                            }
                        }
                        then: ->
                            Message{
                                speaker: "narrator"
                                message: "Excellent! #{greeting will appear as your failure condition next time you play this scenario."
                            }
                        
                    }
                
            }
            Set_Global_Variable{
                side: "global"
                namespace: "demo.sub"
                from_local: "greeting"
                to_global: "greeting"
                immediate: true
            }
    }

    label: {
        x: 9, y: 5
        text: "Temporal Clone"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 9
            y: 5
            side: 1
        }
        do: ->
            Store_Unit{
                filter: {
                    x: 9
                    y: 5
                    side: 1
                }
                variable: "store"
                kill: false
                mode: "replace"
            }
            Set_Global_Variable{
                side: "global"
                namespace: "demo.sub.name.space"
                from_local: "store"
                to_global: "saved_unit"
                immediate: true
            }
            Unstore_Unit{
                variable: "store"
                find_vacant: false
                advance: false
            }
            CLEAR_VARIABLE("store")
            Message{
                speaker: "unit"
                message: "I have been saved and will appear here the next time this scenario is started."
            }
    }

    label: {
        x: 10, y: 6
        text: "Bank Teller"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10
            y: 6
            side: 1
        }
        do: ->
            Store_Gold{
                side: 1
                variable: "account"
            }
            Set_Global_Variable{
                side: "global"
                namespace: "demo.sub.name"
                from_local: "account"
                to_global: "savings"
                immediate: true
            }
            CLEAR_VARIABLE("account")
            Message{
                speaker: "unit"
                message: "I have deposited our assets into our savings account. We will have access to them on future playthroughs of this scenario."
            }
    }

    event: {
        name: "capture"
        first_time_only: false
        filter: {
            side: 1
        }
        do: ->
            Store_Villages{
                owner_side: 1
                variable: "empire"
            }
            Set_Global_Variable{
                namespace: "demo"
                side: "global"
                from_local: "empire"
                to_global: "villages"
                immediate: true
            }
            CLEAR_VARIABLE("empire")
    }

    event: {
        name: "moveto"
        filter: {
            x: 11
            y: 6
            side: 1
            not: {
                id: "Baldras"
            }
        }
        do: ->
            Message{
                speaker: "narrator"
                message: "You can come if you wish, but the leader is only interested in speaking to Baldras."
                image: "wesnoth-icon.png"
            }
    }

    event: {
        name: "moveto"
        filter: {
            x: 17, y: 7, side: 1
        }
        do: ->
            Modify_Side{
                side: 2
                gold: 1000
                income: 100
                recruit: {"Orcish Assassin", "Orcish Warrior", "Orcish Crossbowman", "Wolf Rider", "Orcish Archer"}
                ai: {
                    time_of_day: {"morning", "afternoon"}
                    aggression: 1.0
                    caution: 0.0
                    recruitment_pattern: {"fighter", "fighter", "fighter", "fighter"}
                    <NO_SCOUTS!
                }
                ai: {
                    time_of_day: {"dawn", "dusk"}
                    aggression: 1.0
                    caution: 0.0
                    recruitment_pattern: {"archer", "archer", "archer", "archer"}
                    <NO_SCOUTS!
                }
                ai: {
                    time_of_day: {"first_watch", "second_watch", "underground"}
                    aggression: 1.0
                    caution: 0.0
                    recruitment_pattern: {"scout", "scout", "scout", "scout"}
                    <NO_SCOUTS!
                }
            }
            REMOVE_LABEL(x1, y1)
            Message{
                speaker: "narrator"
                image: "wesnoth-icon.png"
                message: "Now the orcs will fight until death; nothing shall stop their bloodthirsty warriors!"
            }
            Modify_Turns{
                current: 5
            }
            Redraw{
            }
            Delay{
                time: 400
            }
            Move_Units_Fake{
                fake_unit: {
                    type: "Orcish Slurbow"
                    side: 2
                    x: {24, 19}
                    y: {6, 7}
                    skip_steps: 2
                }
                fake_unit: {
                    type: "Orcish Grunt"
                    side: 2
                    x: {26, 20}
                    y: {5, 6}
                    skip_steps: 1
                }
                fake_unit: {
                    type: "Orcish Grunt"
                    side: 2
                    x: {27, 20}
                    y: {11, 7}
                    skip_steps: 0
                }
            }
            Unit{
                type: "Orcish Slurbow"
                side: 2
                x: 19, y: 7
                facing: "sw"
            }
            Unit{
                type: "Orcish Grunt"
                side: 2
                x: 20, y: 6
                facing: "sw"
            }
            Unit{
                type: "Orcish Grunt"
                side: 2
                x: 20, y: 7
                facing: "sw"
            }
    }

    label: {
        x: 14, y: 12
        text: "Health insurance"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 14, y: 12
        }
        do: ->
            LOG("#{unit.name (id #{unit.id}) requested health insurance!")
            FULL_HEAL({x: x1, y: y1})
            Object{
                id: "brief_health"
                silent: true
                duration: "turn"
                filter: {
                    x: 14, y: 12
                }
                effect: {
                    apply_to: "hitpoints"
                    increase_total: "50%"
                }
            }
    }

    label: {
        x: 17, y: 7
        text: "Open the hell"
    }

    label: {
        x: 19, y: 9
        text: "dialog"
    }

    label: {
        x: 18, y: 4
        text: "Gamestate Inspector"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 18, y: 4, side: 1
        }
        do: ->
            Inspect{
                name: "moveto(18,4)"
            }
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 19, y: 9, side: 1
        }
        do: ->
            Message{
                speaker: "unit"
                message: "Hello world"
            }
    }

    label: {
        x: 20, y: 9
        text: "parrot"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 20, y: 9, side: 1
        }
        do: ->
            Message{
                speaker: "unit"
                message: "Who’s the parrot"
                text_input: {
                    text: "test"
                    variable: "parrot"
                }
            }

            Message{
                speaker: "unit"
                message: "Set the parrot settings."
                text_input: {
                    label: "Parrot message"
                    variable: "text"
                }

                option: {
                    label: "Parrot is in denial"
                    command: ->
                        Message{
                            speaker: parrot
                            message: "Why are you looking at me, I’m no parrot!!!"
                        }
                        Message{
                            speaker: "narrator"
                            image: "wesnoth-icon.png"
                            message: "A short time passes..."
                        }
                    
                }

                option: {
                    label: "Parrot accepted its fate"
                }
            }

            Message{
                speaker: parrot
                message: text
            }
    }

    label: {
        x: 18, y: 8
        text: "drink"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 18, y: 8, side: 1
        }
        do: ->
            Message{
                speaker: "unit"
                message: "Pick your drink"
                option: {
                    label: "Soda"
                }
                option: {
                    label: "Water"
                    command: ->
                        Message{
                            speaker: "narrator"
                            image: "wesnoth-icon.png"
                            message: "Water is nice"
                        }
                    
                }
            }
    }

    label: {
        x: 18, y: 10
        text: "poison"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 18, y: 10, side: 1
        }

--wmlindent: start ignoring
        do: ->
            Lua{
-- Uses the special syntax as described at
-- http://www.wesnoth.org/wiki/DescriptionWML
-- The ; doesn't seem to work in the old gui so no need to port it.
--
-- On 800x480 a scrollbar should appear.
                code: [[
                local ec = wesnoth.current.event_context
                wesnoth.message(string.format("Unit moved from %d,%d to %d,%d", ec.x2, ec.y2, ec.x1, ec.y1))
                local helper = wesnoth.require "helper"
                local result = helper.get_user_choice(
                    { speaker = "unit", message = "Pick your poison" },
                    { "&items/potion-red.png=Something red=Take a sip and enjoy",
                      "*&items/potion-blue.png=Nice blue=Surely you’ll like that one",
                      "&items/potion-yellow.png=<span color='yellow'
                      "&scenery/well.png=A nice well=Grab a bucket and fetch some water",
                      "&items/holy-water.png=Oh nice bottle=Feel the divinity",
                      -- Should have an empty first column and a second column on two lines.
                      "=Well a nice and black drink.\nToo dark too see?=Take a sip and pass the bottle along" })
                wesnoth.message(string.format("User selected choice %d.", result))
            ]]
            }
--wmlindent: stop ignoring
    }

    label: {
        x: 17, y: 9
        text: "Manual"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 17, y: 9, side: 1
        }

--wmlindent: start ignoring
        do: ->
            Message{
                speaker: "unit"
                message: "Battle for Wesnoth User’s Manual
================================

Preface
-------

The Battle for Wesnoth is a turn-based strategy game with a fantasy theme.

Build up a great army, gradually training raw recruits into hardened veterans. In later games, recall your toughest warriors and form a deadly host against whom none can stand! Choose units from a large pool of specialists, and hand pick a force with the right strengths to fight well on different terrains against all manner of opposition.

Wesnoth has many different sagas waiting to be played out. You can battle orcs, undead, and bandits on the marches of the Kingdom of Wesnoth; fight alongside dragons in the lofty peaks, elves in the green reaches of the Aethenwood, dwarves in the great halls of Knalga, or even merfolk in the Bay of Pearls. You can fight to regain the throne of Wesnoth, or use your dread power over the Undead to dominate the land of mortals, or lead your glorious Orcish tribe to victory against the humans who dared despoil your lands.

You will be able to select from among over two hundred unit types (infantry, cavalry, archers, and mages are just the beginning) and fight actions ranging from small-unit ambushes to clashes of vast armies. You can also challenge your friends – or strangers – and fight in epic multi-player fantasy battles.

Battle for Wesnoth is open-source software, and a thriving community of volunteers cooperates to improve the game. You can create your own custom units, write your own scenarios, and even script full-blown campaigns. User-maintained content is available from an add-on server, and the very best of it is incorporated into Battle for Wesnoth’s official releases.

Getting Started
---------------

The World
~~~~~~~~~

The known portion of the Great Continent, on which Wesnoth abides, is generally divided into three areas: the Northlands, which are generally lawless; the kingdom of Wesnoth and its occasional principality, Elensefar; and the domain of the Southwest Elves in the Aethenwood and beyond.

The Kingdom of Wesnoth lies in the center of this land. Its borders are the Great River to the north, the Dulatus Hills in the east and south, the edge of the Aethenwood to the southwest, and the Ocean to the west. Elensefar, a once-province of Wesnoth, is bordered by the Great River to the north, a loosely defined line with Wesnoth to the east, the Bay of Pearls to the south, and the ocean to the west.

The Northlands is the wild country north of the Great River. Various groups of orcs, dwarves, barbarians and elves populate the region.  To the north and east lies the forest of Lintanir, where the great kingdom of the North-Elves keeps to its own mysterious affairs.

Over the land are scattered villages where you can heal your troops and gather the income required to support your army. You will also have to cross mountains and rivers, push through forests, hills and tundra, and cross open grassland. In each of these areas different creatures have adapted to live there and can travel more easily and fight better when they are in familiar terrain.

The Creatures
^^^^^^^^^^^^^

In the world of Wesnoth there dwell humans, elves, dwarves, orcs, drakes, saurians, mermen, nagas, and many other races yet more obscure and wondrous. In accursed lands walk undead and ghosts and specters; monsters lurk in its ruins and dungeons.  Each has adapted to particular terrains. Humans inhabit primarily the temperate grasslands. In the hills, mountains and underground caves orcs and dwarves are most at home. In the forests the elves reign supreme. In the oceans and rivers mermen and nagas dominate.

For game purposes, the races group into factions; for example, orcs often cooperate with trolls, and elves or dwarves with humans. Some other factions reflect divisions within human society — loyalists vs. outlaws, for example. In most campaigns, you will control units drawn a single faction. But sometimes factions make alliances with others, so you may face more than one faction in a scenario."
            }
--wmlindent: stop ignoring
    }

    <PLACE_IMAGE("items/book1.png", 2, 2)
    <PLACE_IMAGE("items/book2.png", 3, 2)
    <PLACE_IMAGE("items/book3.png", 4, 2)
    <PLACE_IMAGE("items/book4.png", 5, 2)
    <PLACE_IMAGE("items/flower1.png", 2, 3)
    <PLACE_IMAGE("items/flower2.png", 3, 3)
    <PLACE_IMAGE("items/flower3.png", 4, 3)
    <PLACE_IMAGE("items/flower4.png", 5, 3)
    <PLACE_IMAGE("scenery/rock1.png", 2, 4)
    <PLACE_IMAGE("scenery/rock2.png", 3, 4)
    <PLACE_IMAGE("scenery/rock3.png", 4, 4)
    <PLACE_IMAGE("scenery/rock4.png", 5, 4)
    <PLACE_IMAGE("items/dragonstatue.png", 2, 5)
    <PLACE_IMAGE("items/ornate1.png", 3, 5)
    <PLACE_IMAGE("items/ornate2.png", 4, 5)
    <PLACE_IMAGE("items/barrel.png", 5, 5)
    <PLACE_IMAGE("scenery/monolith1.png", 2, 6)
    <PLACE_IMAGE("scenery/monolith2.png", 3, 6)
    <PLACE_IMAGE("scenery/monolith3.png", 4, 6)
    <PLACE_IMAGE("scenery/monolith4.png", 5, 6)
    <PLACE_IMAGE("scenery/well.png", 2, 7)
    <PLACE_IMAGE("scenery/leanto.png", 3, 7)
    <PLACE_IMAGE("items/ball-green.png", 4, 7)
    <PLACE_IMAGE("items/ball-blue.png", 5, 7)
    <PLACE_IMAGE("items/box.png", 2, 8)
    <PLACE_IMAGE("scenery/well.png", 10, 5)

    <OBJ_RING_REGENERATION(10, 4, "OBJ1")
    <OBJ_RING_REGENERATION(10, 40, "OBJ1")
    <OBJ_RING_SLOW(11, 4, "OBJ2")
    <OBJ_POTION_HEALING(12, 4, "OBJ3")
    <OBJ_POTION_POISON(13, 5, "OBJ4")
    <OBJ_POTION_HOLY(14, 4, "OBJ5")
    <OBJ_POTION_STRONG(15, 4, "OBJ6")
    <OBJ_POTION_DECAY(11, 5, "OBJ7")
    <OBJ_TRIDENT_STORM(12, 5, "OBJ8")
--{OBJ_SWORD_FIRE 13 5 OBJ9}
--{OBJ_SCEPTRE_FIRE 14 5 OBJ10}

    event: {
        name: "moveto"
        filter: {
            side: 1
        }
        do: ->
            Modify_Side{
                side: 1
--wmlindent: start ignoring
                shroud_data: "}111111111111
|1111111111111
|1111111111111
|11111111111111
|11111111111111
|001111111111111
|111111111111111
|1111111111111111
|111111111111111
|1111111111111111
|1111111111111111
|11111111111111111
|11111111111111111
|11111111111111111
|1111111111111111
|1111111111111111
|111111111111111
|111111111111111
|11111111111111
|11111111111111
|1111111111111
|
|
|
|
|
|
|
|
|
|
|
|00000000000001111111
|000000000000011111111
|00000000000001111111
|000000000000000111111
|00000000000000011111
"
--wmlindent: stop ignoring
            }
    }

    item: {
        x: 8, y: 16
        image: "units/merfolk/warrior.png~BLIT(items/cage.png)"
    }
    label: {
        x: 8, y: 16
        text: "Local ToD item test"
    }

    item: {
        x: 9, y: 1
-- This doesn't work, image doesn't do animation
--image="scenery/fire1.png~CS(0,0,50):150,scenery/fire2.png~CS(0,0,50):150,scenery/fire3.png~CS(0,0,50):150,scenery/fire4.png~CS(0,0,50):150,scenery/fire5.png~CS(0,0,50):150,scenery/fire6.png~CS(0,0,50):150,scenery/fire7.png~CS(0,0,50):150,scenery/fire8.png~CS(0,0,50):150"
        image: "scenery/fire1.png~CS(0,0,50)"
    }
    item: {
        x: 11, y: 1
        halo: "scenery/fire1.png~CS(0,0,50):150,scenery/fire2.png~CS(0,0,50):150,scenery/fire3.png~CS(0,0,50):150,scenery/fire4.png~CS(0,0,50):150,scenery/fire5.png~CS(0,0,50):150,scenery/fire6.png~CS(0,0,50):150,scenery/fire7.png~CS(0,0,50):150,scenery/fire8.png~CS(0,0,50):150"
    }

    item: {
        x: 8, y: 8
        image: "items/orcish-flag.png"
    }
    label: {
        x: 8, y: 8
        text: "Northerners unleashed!"
    }

    item: {
        x: 10, y: 10
        halo: "scenery/fire1.png:150,scenery/fire2.png:150,scenery/fire3.png:150,scenery/fire4.png:150,scenery/fire5.png:150,scenery/fire6.png:150,scenery/fire7.png:150,scenery/fire8.png:150"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 8
            y: 8
        }
        do: ->
            Terrain{
                x: {28, 30, 29}
                y: {15, 15, 17}
                terrain: "Ch"
            }

            VARIABLE_OP("xx1", "rand", "10..20")
            VARIABLE_OP("yy1", "rand", "10..17")

            Unit{
                side: 2
                x: "#{xx1", y: "#{yy1"
                type: "Orcish Warlord"
                id: "Bozo"
                generate_name: true
            }

            Message{
                speaker: "Bozo"
                message: "Mwahahahahah! I appeared at #{xx1, #{yy1!"
            }
    }

    item: {
        x: 4, y: 4
        image: "items/orcish-flag.png"
    }
    label: {
        x: 10, y: 9
        text: "Let’s fight"
        tooltip: "Trigger attack animation."
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10
            y: 9
            side: 1
        }
-- Check than [delay] does not cause [animate_unit] to skip the animation.
        do: ->
            Delay{
                time: 400
            }
            Animate_Unit{
                flag: "attack"
                hits: "hit"
                primary_attack: {
                }
            }
    }
    label: {
        x: 4, y: 4
        text: "Open, Sesame!"
    }
    label: {
        x: 5, y: 8
        text: "Let there be fog!"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 5
            y: 8
            side: 1
        }
        do: ->
            Store_Side{
                side: 1
                variable: "side1_store"
            }
            If{
                variable: {
                    name: "side1_store.fog"
                    equals: "no"
                }
                then: ->
                    Modify_Side{
                        side: 1
                        fog: true
                    }
                    Redraw{}
                    Label{
                        x: 5, y: 8
                        text: "Torches, attack!"
                    }
                
                else: ->
                    Modify_Side{
                        side: 1
                        fog: false
                    }
                    Redraw{}
                    Label{
                        x: 5, y: 8
                        text: "Let there be fog!"
                    }
                
            }
            CLEAR_VARIABLE("side1_store")
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 4
            y: 4
        }
        do: ->
            Terrain{
                x: {1, 2}
                y: {2, 2}
                terrain: "Re"
            }
            Label{
                x: 2, y: 2
                text: "Math test"
            }
            Event{
                name: "moveto"
                first_time_only: false
                filter: {
                    side: 1
                    x: 2, y: 2
                }
                do: ->
                    Message{
                        speaker: "narrator"
                        image: "wesnoth-icon.png"
                        message: "Enter a number."
                        text_input: {
                            variable: "number"
                            text: 0
                        }
                    }
                    Message{
                        speaker: "narrator"
                        message: "What should we do with the number #{number}?"
                        option: {
                            label: "Round it"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    image: "wesnoth-icon.png"
                                    message: "How should we round #{number}?
`(any integer)
`ceil
`floor"
                                    text_input: {
                                        variable: "round"
                                    }
                                }
                                VARIABLE("rounded", number)
                                Set_Variable{
                                    name: "rounded"
                                    round: round
                                }
                                Message{
                                    speaker: "narrator"
                                    image: "wesnoth-icon.png"
                                    message: "Rounding #{number} to #{round} results in #{rounded}."
                                }
                            
                        }
                        option: {
                            label: "Add something"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    text_input: {
                                        label: "Amount to add"
                                        variable: "amount"
                                    }
                                }
                                VARIABLE("total", number)
                                Set_Variable{
                                    name: "total"
                                    add: amount
                                }
                                Message{
                                    speaker: "narrator"
                                    message: "Adding #{amount} to #{number} results in #{total}."
                                }
                            
                        }
                        option: {
                            label: "Multiply"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    text_input: {
                                        label: "Amount to multiply"
                                        variable: "amount"
                                    }
                                }
                                VARIABLE("total", number)
                                Set_Variable{
                                    name: "total"
                                    multiply: amount
                                }
                                Message{
                                    speaker: "narrator"
                                    message: "#{number} * #{amount} = #{total}."
                                }
                            
                        }
                        option: {
                            label: "Divide by something"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    text_input: {
                                        label: "Divisor"
                                        variable: "divisor"
                                    }
                                }
                                If{
                                    variable: {
                                        name: "divisor"
                                        numerical_equals: 0
                                    }
                                    or: {
                                        variable: {
                                            name: "divisor"
                                            equals: 
                                        }
                                    }
                                    then: ->
                                        Message{
                                            speaker: "narrator"
                                            message: "Cannot divide by zero!"
                                        }
                                    
                                    else: ->
                                        VARIABLE("total", number)
                                        Set_Variable{
                                            name: "total"
                                            divide: divisor
                                        }
                                        Message{
                                            speaker: "narrator"
                                            message: "Dividing #{number} by #{divisor} results in #{total}."
                                        }
                                    
                                }
                            
                        }
                        option: {
                            label: "Modulo"
                            command: ->
                                Message{
                                    speaker: "narrator"
                                    text_input: {
                                        label: "Modulo"
                                        variable: "modulo"
                                    }
                                }
                                If{
                                    variable: {
                                        name: "modulo"
                                        numerical_equals: 0
                                    }
                                    or: {
                                        variable: {
                                            name: "modulo"
                                            equals: 
                                        }
                                    }
                                    then: ->
                                        Message{
                                            speaker: "narrator"
                                            message: "Cannot use modulus of zero!"
                                        }
                                    
                                    else: ->
                                        VARIABLE("total", number)
                                        Set_Variable{
                                            name: "total"
                                            modulo: modulo
                                        }
                                        Message{
                                            speaker: "narrator"
                                            message: "#{number} % #{modulo} = #{total}."
                                        }
                                    
                                }
                            
                        }
                        option: {
                            label: "ints&amp;floats"
                            command: ->
                                Set_Variable{
                                    name: "int"
                                    ipart: number
                                }
                                VARIABLE_OP("float", "fpart", number)
                                Message{
                                    speaker: "narrator"
                                    message: "#{number} = #{int} + #{float}"
                                }
                            
                        }
                    }
            }
            Label{
                x: 1, y: 2
                text: "Crash test"
            }
            Event{
                name: "moveto"
                filter: {
                    x: 1, y: 2
                }
                do: ->
                    VARIABLE_OP("unset0", "round", 0)
                    VARIABLE_OP("unset1", "multiply", 5)
                    VARIABLE_OP("unset2", "add", 3)
                    VARIABLE_OP("unset3", "fpart", "unset4")
                    VARIABLE_OP("unset5", "value", 3)
                    VARIABLE_OP("unset6", "string_length", "unset7")
                    VARIABLE("new_var", "#{(#{unset_var1+#{unset_var2)")
                    VARIABLE("new_var", "#{(#{unset_var1/#{unset_var2)")
                    VARIABLE("new_var", "#{(#{unset_var1*#{unset_var2)")
            }
    }

    <PLACE_IMAGE("units/human-outlaws/poacher.png~TC(2,magenta)", 20, 14)
    <PLACE_IMAGE("items/cage.png", 20, 14)

    item: {
        x: 8, y: 5
        image: "items/orcish-flag.png"
    }
    label: {
        x: 8, y: 5
        text: "Reveal the Way"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 8
            y: 5
        }
        do: ->
            Remove_Shroud{
                side: 1
                x: "0-38"
                y: "0-20"
            }
    }

    item: {
        x: 12, y: 6
        image: "terrain/color-hex.png~RC(red>purple)~RC(blue>black)"
    }
    label: {
        x: 12, y: 6
        text: "change coloring"
    }

    color_range: {
        id: "blonde"
        rgb: {"FFFF00", "FFFF80", 000000}
    }
    color_palette: {
        thief: {"85A7CA", 496697, "D7f0F0", "B9CEE4", "293D5F", "617CAB"}
    }
    event: {
        name: "prerecruit"
        first_time_only: false
        filter: {
            type: "Thief"
        }
        do: ->
            RANDOM({"RC(thief>red)", "RC(thief>green)", "RC(thief>blue)", "RC(thief>blonde)", "RC(thief>mauve_troll)", "NOP()"})
            Object{
                silent: true
                effect: {
                    apply_to: "image_mod"
                    replace: random
                }
            }
    }

    color_range: {
        id: "mauve_troll"
        rgb: {"ED6F9B", "C63567", 380113}
    }
    color_range: {
        id: "aqua_troll"
        rgb: {"7AA09A", "3B765F", 002121}
    }
    color_range: {
        id: "green_troll"
        rgb: {869280, 466546, 001715}
    }
    color_range: {
        id: "grey_troll"
        rgb: {"7E808B", 3E5451, "00101A"}
    }

    color_palette: {
        troll_skin: {"A8A8A8", "747F73", 616153, 374336, 172830, "9A9A9A", 999999, "596F60", "596E5F", "4E4F3F", 4E5040, "4D4F3F", 1E3325, "1F3325", "001B22", "001A21"}
    }

    event: {
        name: "prerecruit"
        first_time_only: false
        filter: {
            type: "Troll Whelp"
        }
        do: ->
            Fire_Event{
                primary_unit: {
                    x: x1, y: y1
                }
                name: "apply_troll_skin"
            }
    }

    event: {
        name: "apply_troll_skin"
        first_time_only: false
        do: ->
            RANDOM({"RC(troll_skin>mauve_troll)", "RC(troll_skin>aqua_troll)", "RC(troll_skin>aqua_troll)", "RC(troll_skin>green_troll)", "RC(troll_skin>grey_troll)", "NOP()"})
            Object{
                silent: true
                filter: {
                    x: x1
                    y: y1
                }
                effect: {
                    apply_to: "image_mod"
                    replace: random
                }
            }
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 12
            y: 6
            type: "Thief"
        }
        do: ->
            Object{
                id: "bleach"
                name: "Potion of bleach"
                image: "items/potion-red.png"
                duration: "scenario"
                description: "Oooh tingly!!!"
                effect: {
                    apply_to: "image_mod"
                    add: "RC(thief>blonde)"

                    color_palette: {
                        thief: {"85A7CA", 496697, "D7f0F0", "B9CEE4", "293D5F", "617CAB"}
                    }
                }
            }
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            side: 1
            x: 12
            y: 6
            not: {
                type: "Thief"
            }
        }
        do: ->
            Message{
                speaker: "narrator"
                image: "portraits/elves/captain.png"
                message: "Send me a thief to spy on the blondes"
            }
    }

    item: {
        x: 8, y: 7
        image: "items/chest-plain-closed.png"
    }
    label: {
        x: 8, y: 7
        text: "BOOM!"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 8, y: 7
        }
        do: ->
            Terrain{
                x: "7,9"
                y: "7,7"
                terrain: "Gg"
            }
    }

    item: {
        x: 9, y: 3
        image: "items/gohere.png"
    }
    label: {
        x: 9, y: 3
        text: "Win"
    }
    label: {
        x: 7, y: 3
        text: "Timeshift"
    }

    label: {
        x: 14, y: 9
        text: "The silly dance"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 14, y: 9
        }
        do: ->
            Animate_Unit{
                flag: "idling"
            }
            Allow_Undo{
            }
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 9, y: 3
        }
        do: ->
            VARIABLE("endlevel_test.result", "victory")
            VARIABLE("endlevel_test.bonus", "yes")
            Insert_Tag{
                name: "endlevel"
                variable: "endlevel_test"
            }
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 7, y: 3
        }
        do: ->
            Message{
                speaker: "narrator"
                image: "wesnoth-icon.png"
                message: "Message 1 of 2: prepare for timeshift"
            }
            End_Turn{
            }
            Message{
                speaker: "narrator"
                image: "wesnoth-icon.png"
                message: "Message 2 of 2: timeshift imminent"
            }
    }

    event: {
        name: "start"
        do: ->
            Unit{
                side: 1
                x: "recall", y: "recall"
                type: "Lich"
            }

            Unit{
                side: 1
                x: "recall", y: "recall"
                type: "Arch Mage"
            }

            Unit{
                side: 1
                x: "recall", y: "recall"
                type: "Ancient Wose"
            }

            Unit{
                side: 1
                x: "recall", y: "recall"
                type: "Fire Dragon"
            }

            Lua{
                code: [[
                wesnoth.put_recall_unit { type = "Elvish Lady" }
                local u = wesnoth.get_recall_units()[2]
                local l = wesnoth.get_units { side = 1, canrecruit = true }[1]
                local x, y = wesnoth.find_vacant_tile(l.x, l.y, u)
                u.side = 3
                wesnoth.put_unit(u, x, y)
                local ul = wesnoth.get_recall_units()
                local t = {}
                for i,u in ipairs(ul) do table.insert(t, u.type) end
                wesnoth.message(string.format("Recall list: %s", table.concat(t, ',')))
            ]]
            }
    }

    label: {
        x: 15, y: 15
        text: "This is not a forest"
    }

    label: {
        x: 4, y: 10
        text: "This label is not immutable"
        immutable: "no"
    }

    label: {
        x: 25, y: 6
        text: "Let it snow"
    }

    event: {
-- When moving to the specified coordinates,
-- the area will be transformed to a snow landscape,
-- but the water area should remain as is.
        name: "moveto"
        first_time_only: true
        filter: {
            x: 25, y: 6
        }
        do: ->
            Terrain_Mask{
                x: 20, y: 1
                border: false
--wmlindent: start ignoring
                mask: "
_s, _s, _s, _s, Aa, Aa, _s, _s, _s, _s
_s, _s, _s, Aa, Aa, Aa, Aa, _s, _s, _s
_s, _s, Aa, Aa, Aa, Aa, Aa, Aa, _s, _s
_s, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, _s
Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa
Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa
_s, Aa, Aa, Aa, Aa, Aa, Aa, Aa, Aa, _s
_s, _s, Aa, Aa, Aa, Aa, Aa, Aa, _s, _s
_s, _s, _s, Aa, Aa, Aa, Aa, _s, _s, _s
_s, _s, _s, _s, Aa, Aa, _s, _s, _s, _s
"
--wmlindent: stop ignoring
                rule: {
                    old: "Gg^Vh"
                    new: "Aa"
                    terrain: "Aa^Vha"
                }
                rule: {
                    old: "Gs^Fp"
                    new: "Aa"
                    terrain: "Aa^Fpa"
                }
                rule: {
                    old: "Hh"
                    new: "Aa"
                    terrain: "Hh"
                }
                rule: {
                    old: {"Gg", "Re", "Gg^Efm"}
                    new: "Aa"
-- Don't specify terrain and it just uses the new terrain
                }
-- default: Will match everything, since 'old' and 'new' aren't specified.
-- Set 'use_old=yes' to signal no change.
                rule: {
                    use_old: true
                }
            }
    }

    label: {
        x: 9, y: 13
        text: "Plant palms"
    }

    event: {
-- Replace all trees with tropic forest but leave the base terrain intact
        name: "moveto"
        first_time_only: true
        filter: {
            x: 9, y: 13
        }
        do: ->
            Terrain_Mask{
                x: 8, y: 11
                border: false
--wmlindent: start ignoring
                mask: "
^Ft, ^Ft, ^Ft, ^Ft
^Ft, ^Ft, ^Ft, ^Ft
^Ft, ^Ft, ^Ft, ^Ft
^Ft, ^Ft, ^Ft, ^Ft
"
--wmlindent: stop ignoring
                rule: {
                    old: "*^F*"
                    layer: "overlay"
                }
-- default: Will match everything, since 'old' and 'new' aren't specified.
-- Set 'use_old=yes' to signal no change.
                rule: {
                    use_old: true
                }
            }
            Terrain{
                x: 12
                y: 12
                terrain: "Aa^Ft"
                layer: "overlay"
            }
    }

    label: {
        x: 10, y: 13
        text: "Flood"
    }
    event: {
-- replace the base terrain while leaving the overlay intact
        name: "moveto"
        first_time_only: true
        filter: {
            x: 10, y: 13
        }
        do: ->
            Terrain_Mask{
                x: 8, y: 11
                border: false
--wmlindent: start ignoring
                mask: "
Ww, Ww, Ww, Ww
Ww, Ww, Ww, Ww
Ww, Ww, Ww, Ww
Ww, Ww, Ww, Ww
"
--wmlindent: stop ignoring
                rule: {
                    old: "*^Ve*"
                    layer: "base"
                }
                rule: {
                    layer: "base"
                    replace_if_failed: true  -- if just replacing the base failed, replace the whole terrain
-- this will make the human village disappear.
                }
-- default: Will match everything, since 'old' and 'new' aren't specified.
-- Set 'use_old=yes' to signal no change.
                rule: {
                    use_old: true
                }
            }
            Terrain{
                x: 12
                y: 12
                terrain: "Ds"
                layer: "base"
            }

            Label{
                x: 11, y: 14
                text: "Sunken"
            }
            Label{
                x: 10, y: 14
                text: "Still there"
            }
    }

    event: {
        name: "moveto"

        filter: {
            filter_location: {
                area: "test_area"
            }
        }
        do: ->
            Message{
                speaker: "unit"
                message: "You entered a different time Zone"
            }
    }

    event: {
        name: "start"
        do: ->
            Set_Menu_Item{
                id: "test0"
                description: "Perform Calculation"
                filter_location: {
                    filter: {
                        has_weapon: "missile"
                    }
                }
                command: ->
                    Message{
                        speaker: "unit"
                        message: "I will prepare the incantation; what dost thou desire to know?"
                        text_input: {
                            label: "Formula="
                            variable: "formula"
                        }
                    }
                    Message{
                        speaker: "narrator"
--wmlindent: start ignoring
                        message: "Formula:
<span color='green'>    $formula</span>
Result:
<span color='red'>    $(debug_print( 'Result: ', ($formula) ))</span>
"
--wmlindent: stop ignoring
                    }
                
            }
            Set_Menu_Item{
                id: "test1"
                description: "Summon Troll"
                show_if: {
                    not: {
                        have_unit: {
                            x: x1, y: y1
                        }
                    }
                }
                filter_location: {
                }
                command: ->
                    NAMED_LOYAL_UNIT(side_number, "Troll", x1, y1, "MagicTroll", "Magic Troll")
                    Fire_Event{
                        name: "apply_troll_skin"
                        primary_unit: {
                            x: x1
                            y: y1
                        }
                    }
                    Sound{
                        name: "magic-holy-miss-3.ogg"
                    }
                
            }
            Set_Menu_Item{
                id: "test2"
                image: "buttons/WML-custom.png~BLEND(255,127,0,1.0)"
                description: "Dismiss Troll"
                show_if: {
                    have_unit: {
                        x: x1, y: y1
                        type: "Troll"
                        side: side_number
                    }
                }
                command: ->
                    Kill{
                        x: x1, y: y1
                        animate: true
                    }
                
            }
            Set_Menu_Item{
                id: "terraform"
                image: "buttons/WML-custom.png~BLEND(0,255,127,1.0)"
                description: "Identify terrain"
                filter_location: {
                    x: "4-12"
                    y: "11-14"
                }
                command: ->
                    Store_Locations{
                        x: x1, y: y1
                        variable: "location"
                    }
                    Switch{
                        variable: "location.terrain"
                        case: {
                            value: {"Gg", "Gt", "Gs"}
                            do: ->
                                VARIABLE("type", "grass")
                        }
                        case: {
                            value: {"Gg^Fet", "Gs^Ft", "Gs^Fpa", "Ds^Fp", "Re^Fp", "Gg^Fp"}
                            do: ->
                                VARIABLE("type", "forest")
                        }
                        case: {
                            value: {"Ss^Vm", "Gg^Vh", "Gg^Ve"}
                            do: ->
                                VARIABLE("type", "village")
                        }
                        else: ->
                            VARIABLE("type", "other")
                        
                    }
                    Message{
                        speaker: "narrator"
                        image: "wesnoth-icon.png"
                        message: "The current terrain is of type #{type"
                    }
                    CLEAR_VARIABLE("location,type")
                
            }
    }

    label: {
        x: 10, y: 10
        text: "Keep out!!!"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10, y: 10
        }
        deprecated_message: {
            what: "Deprecation Test"
            message: "Moving to this location is no longer supported... bye bye"
            level: 3
            version: 1.0
        }
        do: ->
            Kill{
                x: 10, y: 10
                animate: true
            }
    }

    label: {
        x: 7, y: 10
        text: "Earn 100 XP!"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 7
            y: 10
        }
        do: ->
            VARIABLE_OP("unit.experience", "add", 100)
            Unstore_Unit{
                variable: "unit"
                text: "100 XP"
                red: 200, green: 200, blue: 50
            }
    }

    label: {
        x: 7, y: 11
        text: "test anim"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 7
            y: 11
        }
        do: ->
            Object{
                effect: {
                    apply_to: "new_attack"
                    name: "ruby of fire"
                    description: "ruby of fire"
                    icon: "attacks/fireball.png"
                    type: "fire"
                    range: "ranged"
                    specials: {
                        <WEAPON_SPECIAL_MAGICAL!
                    }
                    damage: 14
                    number: 4
                }

                effect: {
                    apply_to: "new_animation"
                    standing_anim: {
                        alpha: "0.0~1.0"

                        frame: {
                            begin: -2000
                            end: 0
                        }
                    }
                }
            }
    }

    label: {
        x: 5, y: 5
        text: "promotions"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 5
            y: 5
        }
        do: ->
            ADVANCE_UNIT({x: 5, y: 5}, {"Grand Marshal", "Yeti", "Fire Dragon"})
    }

    label: {
        x: 5, y: 6
        text: "role test"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 5, y: 6
        }
        do: ->
            Role{
                x: 5, y: 6
                role: "talking_guy"
            }
            Message{
                role: "talking_guy"
                message: "I have the role!"
            }
    }

    label: {
        x: 32, y: 3
        text: "forfeit"
    }
    event: {
        name: "moveto"
        filter: {
            x: 32, y: 3
        }
        do: ->
            Event{
                name: "new turn"
                first_time_only: false
                do: ->
                    End_Turn{
                    }
            }
            Message{
                side: 2
                message: "No more turns for you!"
            }
            End_Turn{
            }
    }

    label: {
        x: 10, y: 2
        text: "map change"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10, y: 2
        }
        do: ->
            Message{
                side: 2
                message: "Suddenly, Elves Besieged!"
            }
            Replace_Map{
                map: "#{campaigns/Heir_To_The_Throne/maps/01_The_Elves_Besieged.map}"
                shrink: true
                expand: true
            }
    }

    label: {
        x: 10, y: 3
        text: "map change2"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 10, y: 3
        }
        do: ->
            Message{
                side: 2
                message: "Suddenly, Blackwater Port!"
            }
            Replace_Map{
                map: "#{campaigns/Heir_To_The_Throne/maps/02_Blackwater_Port.map}"
                shrink: true
                expand: true
            }
    }

    label: {
        x: 9, y: 2
        text: "map change3"
    }

    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 9, y: 2
        }
        do: ->
            Message{
                side: 2
                message: "Suddenly, Caves!!"
            }
            Replace_Map{
                map: "#{campaigns/Heir_To_The_Throne/maps/15_The_Lost_General.map}"
                shrink: true
                expand: true
            }
            Replace_Schedule{
                <UNDERGROUND!
                <DEEP_UNDERGROUND!
            }
    }

    label: {
        x: 23, y: 10
        text: "livingness"
        tooltip: "<b>Tooltip for the livingness label</b>

Moving to this hex will show you: 

<span color='red'><b>not_living</b> Subsums every of the following:</span>
<span color='yellow'><b>unpoisonable</b> - Some more text here.</span>
<span color='brown'><b>undrainable</b></span> - You see that markup works here.
<span color='green'><b>unplagueable</b> - And so on</span>"
    }
    event: {
        name: "moveto"
        first_time_only: false
        filter: {
            x: 23, y: 10
        }
        do: ->
            While{
                variable: {
                    name: "choice"
                    not_equals: "done"
                }
                do: ->
                    Store_Unit{
                        variable: "wml_unit"
                        filter: {
err: ../attic/data/scenario-test.cfg - ./wml_to_wsl/parse.moon:224: Error parsing (wml) line 3582:                         x=$x1,y=$y1
                        }
                    }
                    Message{
                        speaker: "narrator"
                        message: "Unit statuses in WML:

not_living: $wml_unit.status.not_living
unpoisonable: $wml_unit.status.unpoisonable
undrainable: $wml_unit.status.undrainable
unplagueable: $wml_unit.status.unplagueable"
                    }
                    Lua{
                        code: [[
                        local args = ...
                        local unit = wesnoth.get_unit(args.x1, args.y1)
                        local raw_msg = "Unit statuses in Lua:\n\nnot_living: %s\nunpoisonable: %s\nundrainable: %s\nunplagueable: %s"
                        local msg = string.format(raw_msg, unit.status.not_living, unit.status.unpoisonable, unit.status.undrainable, unit.status.unplagueable)
                        wesnoth.wml_actions.message({speaker = "narrator", message = msg})

                        wesnoth.wml_actions.message({speaker = "narrator", message = "Do you want to change any of that?",
                            { "option", { message = "Flip not_living",
                                { "command", {
                                    { "set_variable", { name = "choice", value = "not_living" } } } } } },
                            { "option", { message = "Flip unpoisonable",
                                { "command", {
                                    { "set_variable", { name = "choice", value = "unpoisonable" } } } } } },
                            { "option", { message = "Flip undrainable",
                                { "command", {
                                    { "set_variable", { name = "choice", value = "undrainable" } } } } } },
                            { "option", { message = "Flip unplagueable",
                                { "command", {
                                    { "set_variable", { name = "choice", value = "unplagueable" } } } } } },
                            { "option", { message = "Nope",
                                { "command", {
                                    { "set_variable", { name = "choice", value = "done" } } } } } }
                        })
                        local choice = wesnoth.get_variable("choice")
                        -- debug :unit will reapply musthave traits, breaking these modifications for undead
                        -- if you want something more permanent, give the unit an object
                        if choice == "not_living" then
                            unit.status.not_living = not unit.status.not_living
                        elseif choice == "unpoisonable" then
                            unit.status.unpoisonable = not unit.status.unpoisonable
                        elseif choice == "undrainable" then
                            unit.status.undrainable = not unit.status.undrainable
                        elseif choice == "unplagueable" then
                            unit.status.unplagueable = not unit.status.unplagueable
                        end
                    ]]
                        args: {
                            x1: x1
                            y1: y1
                        }
                    }
                
            }
            CLEAR_VARIABLE("choice")
            CLEAR_VARIABLE("wml_unit")
    }

-- Capture connected villages near 13,2 for team 2
    event: {
        name: "prestart"
        do: ->
            Store_Locations{
                x: 13, y: 2
                radius: 2
                filter_radius: {
                    terrain: "*^V*"
                }
                variable: "temp_villages_area"
            }

            FOREACH("temp_villages_area", "i")
            Capture_Village{
                side: 2
                x: temp_villages_area[i].x, y: temp_villages_area[i].y
            }
            NEXT("i")

-- Then put goblins on the northernmost villages

            Store_Locations{
                find_in: "temp_villages_area"
                y: 1
                variable: "temp_villages_area"
            }

            Lua{
                code: [[
                local helper = wesnoth.require "helper"
                for i, v in ipairs(helper.get_variable_proxy_array "temp_villages_area") do
                    wesnoth.put_unit({ type = "Goblin Spearman", side = 2 }, v.x, v.y)
                end
                wesnoth.set_variable "temp_villages_area"
            ]]
            }
    }

    event: {
        name: "prestart"
        label: {
            x: 2, y: 11
            text: "Fogged oasis"
            visible_in_fog: true
        }
    }

    event: {
        name: "prestart"
        label: {
            x: 2, y: 14
            text: "Shrouded label"
            visible_in_shroud: true
        }
    }
    DYNAMIC_EVENT_SETUP: (TYPE, VAR) -> {
        set_variables: {
            name: VAR
            literal: {
                name: TYPE
                set_variable: {
                    name: VAR
                    add: 1
                }
                message: {
                    id: "statue"
                    message: "dynamic " .. TYPE .. " event #{#{VAR}}!"
                    option: {
                        label: "Continue!"
                    }
                    option: {
                        label: "Stop annoying me..."
                        command: ->
                            Set_Variables{
                                name: VAR
                                mode: "replace"
                                value: {
                                    name: "moveto"
                                    filter: {
                                        side: 1
                                        filter_location: {
                                            radius: 1
                                            filter: {
                                                id: "statue"
                                            }
                                        }
                                    }
                                    message: {
                                        id: "statue"
                                        message: "No more dynamic events! Sorry..."
                                    }
                                }
                            }
                            MODIFY_UNIT({id: "statue"}, "status.petrified", true)
                        
                    }
                }
                insert_tag: {
                    name: "event"
                    variable: VAR
                }
            }
        }
    }

    event: {
        name: "prestart"
        do: ->
            Set_Menu_Item{
                id: "dynamic_ev"
                description: "Start Dynamic Events!"
                filter_location: {
                    filter: {
                        id: "statue"
                    }
                }
                command: ->
                    DYNAMIC_EVENT_SETUP("new turn", "ev")
                    Insert_Tag{
                        name: "event"
                        variable: "ev"
                    }
                    Set_Menu_Item{
                        id: "dynamic_ev"
                        show_if: {
                            not: {
                            }
                        }
                    }
                    Unpetrify{
                        id: "statue"
                    }
                
            }

            SHOW_IMAGE_PATH_TEST = (FUNCTOR_AND_PARAMS) -> {
                set_variable: {
                    name: "functor"
                    value: FUNCTOR_AND_PARAMS
                }
                scroll_to_unit: {
                    check_fogged: true
                    id: "Urug-Telfar"
                }
                message: {
                    speaker: "narrator"
                    image: "units/orcs/warlord.png~RC(magenta>blue)~#{functor"
                    message: "I have been affected by the power of #{functor}! To the Dark Gods with that wose-born creature!"
                    caption: "Urug-Telfar"
                }
                scroll_to_unit: {
                    x: x1, y: y1
                }
                clear_variable: {
                    name: "functor"
                }
            }
            Set_Menu_Item{
                id: "imagepath_tests"
                description: "Image tricks"
                filter_location: {
                    filter: {
                        type: {"Elvish Shyde", "Elvish Druid", "Elvish Sorceress", "Elvish Enchantress", "Elvish Sylph", "Elvish Shaman"}
                    }
                }
                command: ->
                    Message{
                        speaker: "unit"
                        message: "What glamour should I cast upon our foe?"
                        option: {
                            label: "Flip around!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("FL(horiz,vert)")
                            
                        }
                        option: {
                            label: "Scale up"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("SCALE(200,200)")
                            
                        }
                        option: {
                            label: "Scale down"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("SCALE(40,40)")
                            
                        }
                        option: {
                            label: "Blur 3"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("BL(3)")
                            
                        }
                        option: {
                            label: "More red!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("R(255)")
                            
                        }
                        option: {
                            label: "More green!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("G(255)")
                            
                        }
                        option: {
                            label: "More blue!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("B(255)")
                            
                        }
                        option: {
                            label: "Black and white!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("GS()")
                            
                        }
                        option: {
                            label: "Other team"
                            command: ->
                                VARIABLE_OP("team", "rand", "1..9")
                                SHOW_IMAGE_PATH_TEST("TC(#{team,magenta)")
                                CLEAR_VARIABLE("team")
                            
                        }
                        option: {
                            label: "And other team again"
                            command: ->
                                VARIABLE_OP("rc", "rand", "1..9")
                                SHOW_IMAGE_PATH_TEST("RC(magenta>#{rc)")
                                CLEAR_VARIABLE("rc")
                            
                        }
                        option: {
                            label: "Psychedellic!"
                            command: ->
                                SHOW_IMAGE_PATH_TEST("CROP(10,10,50,50)~CS(255,-40,100)~O(50%)~BL(2)~SCALE(125,125)")
                            
                        }
                        option: {
                            label: "Shrooms!"
                            command: ->
-- Shutz, this sounds like some obscure CPU architecture's data registers
                                VARIABLE_OP("rc", "rand", "1..9")
                                VARIABLE_OP("cs.r", "rand", "0..255")
                                VARIABLE_OP("cs.g", "rand", "0..255")
                                VARIABLE_OP("cs.b", "rand", "0..255")
                                VARIABLE_OP("op", "rand", "25%,50%,75%,100%,125%,150%,175%,200%,225%,250%,275%,300%,500%")
                                VARIABLE_OP("bl", "rand", "1..10")
                                VARIABLE_OP("sc.w", "rand", "50..200")
                                VARIABLE_OP("sc.h", "rand", "50..200")

                                SHOW_IMAGE_PATH_TEST("RC(magenta>#{rc})~CS(#{cs.r},#{cs.g},#{cs.b})~O(#{op)~BL(#{bl)~SCALE(#{sc.w},#{sc.h})")

                                CLEAR_VARIABLE("rc,cs,op,bl,sc")
                            
                        }
                    }
                
            }
            SHOW_IMAGE_PATH_TEST = nil
    }
    event: {
--at an attack end, remove the attack: bugs -12428 and -12990
        name: "attack end"
        first_time_only: false
        filter_attack: {
            range: "ranged"
        }
        filter_second: {
            side: 2
            canrecruit: true
        }
        do: ->
            Object{
                filter: {
                    x: x1, y: y1
                }
                description: "You just lost the attack you used."
                silent: true
                effect: {
                    apply_to: "remove_attacks"
                    range: "ranged"
                }
                then: ->
                    Message{
                        canrecruit: true, side: 2
                        message: "Cowards! Fight me in real combat!"
                    }
                
            }
    }
    event: {
        name: "prestart"
        do: ->
            Unit{
                type: "Saurian Soothsayer"
                side: 3, x: 30, y: 15
                id: "assert"
                name: "Neutral healer guy"
            }
            Set_Menu_Item{
                description: "Menu 1"
                id: "Menu_1"
                show_if: {
                    have_unit: {
                        x: x1, y: y1
                        side: side_number
                        not: {
                            filter_wml: {
                                attacks_left: 0
                            }
                        }
                    }
                }
                filter_location: {
                    terrain: {"C*", "C*^*", "*^C*", "K*", "K*^*", "*^K*"}
                }
                command: ->
                    Message{
                        message: "Menu 1 (only clickable on own units on castle terrain)"
                        x: x1, y: y1
                    }
                
            }
            Set_Menu_Item{
                description: "Menu 2"
                id: "Menu_2"
                use_hotkey: false
                show_if: {
                    have_unit: {
                        x: x1, y: y1
                        side: side_number
                    }
                }
                command: ->
                    Message{
                        message: "Menu 2 (use_hotkey = no, so I cannot assign hotkeys to it.)"
                        x: x1, y: y1
                    }
                
            }
            Set_Menu_Item{
                description: "menu 3"
                id: "menu_3"
                default_hotkey: {
                    key: "f6"
                }
                command: ->
                    Message{
                        message: "menu 3: default hotkey is F6."
                        speaker: "narrator"
                    }
                
            }
            Set_Menu_Item{
                description: "menu 4"
                id: "menu 4"
                use_hotkey: "only"
                command: ->
                    Message{
                        message: "menu 4, only acessible via hotkeys"
                        speaker: "narrator"
                    }
                
            }
    }
    event: {
        name: "start"
        do: ->
            Store_Locations{
                x: "5-8"
                variable: "x_locs"
            }
            Store_Locations{
                x: "5-8", y: "0-99"
                variable: "xy_locs"
            }
            Set_Variable{
                name: "x_len"
                value: x_locs.length
            }
            Set_Variable{
                name: "xy_len"
                value: xy_locs.length
            }

            If{
                variable: {
                    name: "x_len"
                    numerical_not_equals: xy_len
                }
                then: ->
                    Message{
                        speaker: "narrator"
                        image: "wesnoth-icon.png"
                        message: "Single-dimensional [store_locations] is broken, as #{x_len does not equal #{xy_len}. See bug #21488"
                    }
                
            }

            CLEAR_VARIABLE("x_locs")
            CLEAR_VARIABLE("xy_locs")
            CLEAR_VARIABLE("x_len")
            CLEAR_VARIABLE("xy_len")
    }
}

Units{
    unit_type: {
        id: "Peasant_unhealable"
        base_unit: {
            id: "Peasant"
        }
        image_icon: "misc/key.png"
    }
}

Language{
    amend: true
    range_very_long: _ "very long"
    type_electrical: _ "electrical"
}

-- vim: tabstop=4: shiftwidth=4: expandtab: softtabstop=4: autoindent:
-- kate: indent-mode normal; space-indent on;
